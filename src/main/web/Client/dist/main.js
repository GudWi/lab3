!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)B.d(U,I,function(F){return Q[F]}.bind(null,I));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="dist/",B(B.s=116)}([function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(6), __webpack_require__(77), __webpack_require__(24), __webpack_require__(46), __webpack_require__(47), __webpack_require__(30), __webpack_require__(25), __webpack_require__(48), __webpack_require__(31), __webpack_require__(49), __webpack_require__(78), __webpack_require__(11), __webpack_require__(3), __webpack_require__(21), __webpack_require__(50), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr, document, getProto, slice, concat, push, indexOf, class2type, toString, hasOwn, fnToString, ObjectFunctionString, support, isFunction, isWindow, DOMEval, toType) {\n  "use strict";\n\n  var version = "3.4.1",\n      // Define a local copy of jQuery\n  jQuery = function (selector, context) {\n    // The jQuery object is actually just the init constructor \'enhanced\'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  },\n      // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n  rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function () {\n      return slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function (num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return slice.call(this);\n      } // Return just the one element from the set\n\n\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function (elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function (callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function (callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function () {\n      return this.pushStack(slice.apply(this, arguments));\n    },\n    first: function () {\n      return this.eq(0);\n    },\n    last: function () {\n      return this.eq(-1);\n    },\n    eq: function (i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function () {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array\'s method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === "boolean") {\n      deep = target; // Skip the boolean and the target\n\n      target = arguments[i] || {};\n      i++;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (typeof target !== "object" && !isFunction(target)) {\n      target = {};\n    } // Extend jQuery itself if only one argument is passed\n\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name]; // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n\n          if (name === "__proto__" || target === copy) {\n            continue;\n          } // Recurse if we\'re merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name]; // Ensure proper type for the source value\n\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n\n            copyIsArray = false; // Never move original objects, clone them\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don\'t bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: "jQuery" + (version + Math.random()).replace(/\\D/g, ""),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function (msg) {\n      throw new Error(msg);\n    },\n    noop: function () {},\n    isPlainObject: function (obj) {\n      var proto, Ctor; // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n\n      if (!obj || toString.call(obj) !== "[object Object]") {\n        return false;\n      }\n\n      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\n\n      if (!proto) {\n        return true;\n      } // Objects with prototype are plain iff they were constructed by a global Object function\n\n\n      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;\n      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function (obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    // Evaluates a script in a global context\n    globalEval: function (code, options) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      });\n    },\n    each: function (obj, callback) {\n      var length,\n          i = 0;\n\n      if (isArrayLike(obj)) {\n        length = obj.length;\n\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n\n      return obj;\n    },\n    // Support: Android <=4.0 only\n    trim: function (text) {\n      return text == null ? "" : (text + "").replace(rtrim, "");\n    },\n    // results is for internal usage only\n    makeArray: function (arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function (elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function (first, second) {\n      var len = +second.length,\n          j = 0,\n          i = first.length;\n\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function (elems, callback, invert) {\n      var callbackInverse,\n          matches = [],\n          i = 0,\n          length = elems.length,\n          callbackExpect = !invert; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function (elems, callback, arg) {\n      var length,\n          value,\n          i = 0,\n          ret = []; // Go through the array, translating each of the items to their new values\n\n      if (isArrayLike(elems)) {\n        length = elems.length;\n\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return concat.apply([], ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n\n  if (typeof Symbol === "function") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  } // Populate the class2type map\n\n\n  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {\n    class2type["[object " + name + "]"] = name.toLowerCase();\n  });\n\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn\'t used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && "length" in obj && obj.length,\n        type = toType(obj);\n\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n\n    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;\n  }\n\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){eval("/**\n* @license\n* MarionetteJS (Backbone.Marionette)\n* ----------------------------------\n* v4.1.2\n*\n* Copyright (c)2019 Derick Bailey, Muted Solutions, LLC.\n* Distributed under MIT license\n*\n* http://marionettejs.com\n*/\n(function (global, factory) {\n   true ? factory(exports, __webpack_require__(4), __webpack_require__(29), __webpack_require__(75)) : undefined;\n})(this, function (exports, Backbone, _, Radio) {\n  'use strict';\n\n  Backbone = Backbone && Backbone.hasOwnProperty('default') ? Backbone['default'] : Backbone;\n  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;\n  Radio = Radio && Radio.hasOwnProperty('default') ? Radio['default'] : Radio;\n  var version = \"4.1.2\"; //Internal utility for creating context style global utils\n\n  var proxy = function proxy(method) {\n    return function (context) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return method.apply(context, args);\n    };\n  }; // Marionette.extend\n\n\n  var extend = Backbone.Model.extend; // ----------------------\n  // Pass in a mapping of events => functions or function names\n  // and return a mapping of events => functions\n\n  var normalizeMethods = function normalizeMethods(hash) {\n    var _this = this;\n\n    if (!hash) {\n      return;\n    }\n\n    return _.reduce(hash, function (normalizedHash, method, name) {\n      if (!_.isFunction(method)) {\n        method = _this[method];\n      }\n\n      if (method) {\n        normalizedHash[name] = method;\n      }\n\n      return normalizedHash;\n    }, {});\n  }; // Error\n\n\n  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number', 'url'];\n  var MarionetteError = extend.call(Error, {\n    urlRoot: \"http://marionettejs.com/docs/v\".concat(version, \"/\"),\n    url: '',\n    constructor: function constructor(options) {\n      var error = Error.call(this, options.message);\n\n      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n      if (Error.captureStackTrace) {\n        this.captureStackTrace();\n      }\n\n      this.url = this.urlRoot + this.url;\n    },\n    captureStackTrace: function captureStackTrace() {\n      Error.captureStackTrace(this, MarionetteError);\n    },\n    toString: function toString() {\n      return \"\".concat(this.name, \": \").concat(this.message, \" See: \").concat(this.url);\n    }\n  }); // Bind Entity Events & Unbind Entity Events\n\n  function normalizeBindings(context, bindings) {\n    if (!_.isObject(bindings)) {\n      throw new MarionetteError({\n        message: 'Bindings must be an object.',\n        url: 'common.html#bindevents'\n      });\n    }\n\n    return normalizeMethods.call(context, bindings);\n  }\n\n  function bindEvents(entity, bindings) {\n    if (!entity || !bindings) {\n      return this;\n    }\n\n    this.listenTo(entity, normalizeBindings(this, bindings));\n    return this;\n  }\n\n  function unbindEvents(entity, bindings) {\n    if (!entity) {\n      return this;\n    }\n\n    if (!bindings) {\n      this.stopListening(entity);\n      return this;\n    }\n\n    this.stopListening(entity, normalizeBindings(this, bindings));\n    return this;\n  } // Export Public API\n  // Bind/Unbind Radio Requests\n\n\n  function normalizeBindings$1(context, bindings) {\n    if (!_.isObject(bindings)) {\n      throw new MarionetteError({\n        message: 'Bindings must be an object.',\n        url: 'common.html#bindrequests'\n      });\n    }\n\n    return normalizeMethods.call(context, bindings);\n  }\n\n  function bindRequests(channel, bindings) {\n    if (!channel || !bindings) {\n      return this;\n    }\n\n    channel.reply(normalizeBindings$1(this, bindings), this);\n    return this;\n  }\n\n  function unbindRequests(channel, bindings) {\n    if (!channel) {\n      return this;\n    }\n\n    if (!bindings) {\n      channel.stopReplying(null, null, this);\n      return this;\n    }\n\n    channel.stopReplying(normalizeBindings$1(this, bindings));\n    return this;\n  } // Marionette.getOption\n  // --------------------\n  // Retrieve an object, function or other value from the\n  // object or its `options`, with `options` taking precedence.\n\n\n  var getOption = function getOption(optionName) {\n    if (!optionName) {\n      return;\n    }\n\n    if (this.options && this.options[optionName] !== undefined) {\n      return this.options[optionName];\n    } else {\n      return this[optionName];\n    }\n  };\n\n  var mergeOptions = function mergeOptions(options, keys) {\n    var _this = this;\n\n    if (!options) {\n      return;\n    }\n\n    _.each(keys, function (key) {\n      var option = options[key];\n\n      if (option !== undefined) {\n        _this[key] = option;\n      }\n    });\n  }; // DOM Refresh\n\n\n  function triggerMethodChildren(view, event, shouldTrigger) {\n    if (!view._getImmediateChildren) {\n      return;\n    }\n\n    _.each(view._getImmediateChildren(), function (child) {\n      if (!shouldTrigger(child)) {\n        return;\n      }\n\n      child.triggerMethod(event, child);\n    });\n  }\n\n  function shouldTriggerAttach(view) {\n    return !view._isAttached;\n  }\n\n  function shouldAttach(view) {\n    if (!shouldTriggerAttach(view)) {\n      return false;\n    }\n\n    view._isAttached = true;\n    return true;\n  }\n\n  function shouldTriggerDetach(view) {\n    return view._isAttached;\n  }\n\n  function shouldDetach(view) {\n    view._isAttached = false;\n    return true;\n  }\n\n  function triggerDOMRefresh(view) {\n    if (view._isAttached && view._isRendered) {\n      view.triggerMethod('dom:refresh', view);\n    }\n  }\n\n  function triggerDOMRemove(view) {\n    if (view._isAttached && view._isRendered) {\n      view.triggerMethod('dom:remove', view);\n    }\n  }\n\n  function handleBeforeAttach() {\n    triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n  }\n\n  function handleAttach() {\n    triggerMethodChildren(this, 'attach', shouldAttach);\n    triggerDOMRefresh(this);\n  }\n\n  function handleBeforeDetach() {\n    triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n    triggerDOMRemove(this);\n  }\n\n  function handleDetach() {\n    triggerMethodChildren(this, 'detach', shouldDetach);\n  }\n\n  function handleBeforeRender() {\n    triggerDOMRemove(this);\n  }\n\n  function handleRender() {\n    triggerDOMRefresh(this);\n  } // Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n  // whenever a rendered view is attached or an attached view is rendered.\n\n\n  function monitorViewEvents(view) {\n    if (view._areViewEventsMonitored || view.monitorViewEvents === false) {\n      return;\n    }\n\n    view._areViewEventsMonitored = true;\n    view.on({\n      'before:attach': handleBeforeAttach,\n      'attach': handleAttach,\n      'before:detach': handleBeforeDetach,\n      'detach': handleDetach,\n      'before:render': handleBeforeRender,\n      'render': handleRender\n    });\n  } // Trigger Method\n\n\n  var splitter = /(^|:)(\\w)/gi; // Only calc getOnMethodName once\n\n  var methodCache = {}; // take the event section (\"section1:section2:section3\")\n  // and turn it in to uppercase name onSection1Section2Section3\n\n  function getEventName(match, prefix, eventName) {\n    return eventName.toUpperCase();\n  }\n\n  var getOnMethodName = function getOnMethodName(event) {\n    if (!methodCache[event]) {\n      methodCache[event] = 'on' + event.replace(splitter, getEventName);\n    }\n\n    return methodCache[event];\n  }; // Trigger an event and/or a corresponding method name. Examples:\n  //\n  // `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n  // call the \"onFoo\" method.\n  //\n  // `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n  // call the \"onFooBar\" method.\n\n\n  function triggerMethod(event) {\n    // get the method name from the event name\n    var methodName = getOnMethodName(event);\n    var method = getOption.call(this, methodName);\n    var result; // call the onMethodName if it exists\n\n    if (_.isFunction(method)) {\n      // pass all args, except the event name\n      result = method.apply(this, _.drop(arguments));\n    } // trigger the event\n\n\n    this.trigger.apply(this, arguments);\n    return result;\n  }\n\n  var Events = {\n    triggerMethod: triggerMethod\n  };\n  var CommonMixin = {\n    // Imports the \"normalizeMethods\" to transform hashes of\n    // events=>function references/names to a hash of events=>function references\n    normalizeMethods: normalizeMethods,\n    _setOptions: function _setOptions(options, classOptions) {\n      this.options = _.extend({}, _.result(this, 'options'), options);\n      this.mergeOptions(options, classOptions);\n    },\n    // A handy way to merge passed-in options onto the instance\n    mergeOptions: mergeOptions,\n    // Enable getting options from this or this.options by name.\n    getOption: getOption,\n    // Enable binding view's events from another entity.\n    bindEvents: bindEvents,\n    // Enable unbinding view's events from another entity.\n    unbindEvents: unbindEvents,\n    // Enable binding view's requests.\n    bindRequests: bindRequests,\n    // Enable unbinding view's requests.\n    unbindRequests: unbindRequests,\n    triggerMethod: triggerMethod\n  };\n\n  _.extend(CommonMixin, Backbone.Events);\n\n  var DestroyMixin = {\n    _isDestroyed: false,\n    isDestroyed: function isDestroyed() {\n      return this._isDestroyed;\n    },\n    destroy: function destroy(options) {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:destroy', this, options);\n      this._isDestroyed = true;\n      this.triggerMethod('destroy', this, options);\n      this.stopListening();\n      return this;\n    }\n  }; // - channelName\n  // - radioEvents\n  // - radioRequests\n\n  var RadioMixin = {\n    _initRadio: function _initRadio() {\n      var channelName = _.result(this, 'channelName');\n\n      if (!channelName) {\n        return;\n      }\n      /* istanbul ignore next */\n\n\n      if (!Radio) {\n        throw new MarionetteError({\n          message: 'The dependency \"backbone.radio\" is missing.',\n          url: 'backbone.radio.html#marionette-integration'\n        });\n      }\n\n      var channel = this._channel = Radio.channel(channelName);\n\n      var radioEvents = _.result(this, 'radioEvents');\n\n      this.bindEvents(channel, radioEvents);\n\n      var radioRequests = _.result(this, 'radioRequests');\n\n      this.bindRequests(channel, radioRequests);\n      this.on('destroy', this._destroyRadio);\n    },\n    _destroyRadio: function _destroyRadio() {\n      this._channel.stopReplying(null, null, this);\n    },\n    getChannel: function getChannel() {\n      return this._channel;\n    }\n  }; // Object\n\n  var ClassOptions = ['channelName', 'radioEvents', 'radioRequests']; // Object borrows many conventions and utilities from Backbone.\n\n  var MarionetteObject = function MarionetteObject(options) {\n    this._setOptions(options, ClassOptions);\n\n    this.cid = _.uniqueId(this.cidPrefix);\n\n    this._initRadio();\n\n    this.initialize.apply(this, arguments);\n  };\n\n  MarionetteObject.extend = extend; // Object Methods\n  // --------------\n\n  _.extend(MarionetteObject.prototype, CommonMixin, DestroyMixin, RadioMixin, {\n    cidPrefix: 'mno',\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {}\n  }); // Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n\n\n  var _invoke = _.invokeMap || _.invoke; // - behaviors\n  // Takes care of getting the behavior class\n  // given options and a key.\n  // If a user passes in options.behaviorClass\n  // default to using that.\n  // If a user passes in a Behavior Class directly, use that\n  // Otherwise an error is thrown\n\n\n  function getBehaviorClass(options) {\n    if (options.behaviorClass) {\n      return {\n        BehaviorClass: options.behaviorClass,\n        options: options\n      };\n    } //treat functions as a Behavior constructor\n\n\n    if (_.isFunction(options)) {\n      return {\n        BehaviorClass: options,\n        options: {}\n      };\n    }\n\n    throw new MarionetteError({\n      message: 'Unable to get behavior class. A Behavior constructor should be passed directly or as behaviorClass property of options',\n      url: 'marionette.behavior.html#defining-and-attaching-behaviors'\n    });\n  } // Iterate over the behaviors object, for each behavior\n  // instantiate it and get its grouped behaviors.\n  // This accepts a list of behaviors in either an object or array form\n\n\n  function parseBehaviors(view, behaviors, allBehaviors) {\n    return _.reduce(behaviors, function (reducedBehaviors, behaviorDefiniton) {\n      var _getBehaviorClass = getBehaviorClass(behaviorDefiniton),\n          BehaviorClass = _getBehaviorClass.BehaviorClass,\n          options = _getBehaviorClass.options;\n\n      var behavior = new BehaviorClass(options, view);\n      reducedBehaviors.push(behavior);\n      return parseBehaviors(view, _.result(behavior, 'behaviors'), reducedBehaviors);\n    }, allBehaviors);\n  }\n\n  var BehaviorsMixin = {\n    _initBehaviors: function _initBehaviors() {\n      this._behaviors = parseBehaviors(this, _.result(this, 'behaviors'), []);\n    },\n    _getBehaviorTriggers: function _getBehaviorTriggers() {\n      var triggers = _invoke(this._behaviors, '_getTriggers');\n\n      return _.reduce(triggers, function (memo, _triggers) {\n        return _.extend(memo, _triggers);\n      }, {});\n    },\n    _getBehaviorEvents: function _getBehaviorEvents() {\n      var events = _invoke(this._behaviors, '_getEvents');\n\n      return _.reduce(events, function (memo, _events) {\n        return _.extend(memo, _events);\n      }, {});\n    },\n    // proxy behavior $el to the view's $el.\n    _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n      _invoke(this._behaviors, 'proxyViewProperties');\n    },\n    // delegate modelEvents and collectionEvents\n    _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n      _invoke(this._behaviors, 'delegateEntityEvents');\n    },\n    // undelegate modelEvents and collectionEvents\n    _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n      _invoke(this._behaviors, 'undelegateEntityEvents');\n    },\n    _destroyBehaviors: function _destroyBehaviors(options) {\n      // Call destroy on each behavior after\n      // destroying the view.\n      // This unbinds event listeners\n      // that behaviors have registered for.\n      _invoke(this._behaviors, 'destroy', options);\n    },\n    // Remove a behavior\n    _removeBehavior: function _removeBehavior(behavior) {\n      // Don't worry about the clean up if the view is destroyed\n      if (this._isDestroyed) {\n        return;\n      } // Remove behavior-only triggers and events\n\n\n      this.undelegate(\".trig\".concat(behavior.cid, \" .\").concat(behavior.cid));\n      this._behaviors = _.without(this._behaviors, behavior);\n    },\n    _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n      _invoke(this._behaviors, 'bindUIElements');\n    },\n    _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n      _invoke(this._behaviors, 'unbindUIElements');\n    },\n    _triggerEventOnBehaviors: function _triggerEventOnBehaviors(eventName, view, options) {\n      _invoke(this._behaviors, 'triggerMethod', eventName, view, options);\n    }\n  }; // - collectionEvents\n  // - modelEvents\n\n  var DelegateEntityEventsMixin = {\n    // Handle `modelEvents`, and `collectionEvents` configuration\n    _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n      if (model) {\n        this._modelEvents = _.result(this, 'modelEvents');\n        this.bindEvents(model, this._modelEvents);\n      }\n\n      if (collection) {\n        this._collectionEvents = _.result(this, 'collectionEvents');\n        this.bindEvents(collection, this._collectionEvents);\n      }\n    },\n    // Remove any previously delegate entity events\n    _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n      if (this._modelEvents) {\n        this.unbindEvents(model, this._modelEvents);\n        delete this._modelEvents;\n      }\n\n      if (this._collectionEvents) {\n        this.unbindEvents(collection, this._collectionEvents);\n        delete this._collectionEvents;\n      }\n    },\n    // Remove cached event handlers\n    _deleteEntityEventHandlers: function _deleteEntityEventHandlers() {\n      delete this._modelEvents;\n      delete this._collectionEvents;\n    }\n  }; // - template\n  // - templateContext\n\n  var TemplateRenderMixin = {\n    // Internal method to render the template with the serialized data\n    // and template context\n    _renderTemplate: function _renderTemplate(template) {\n      // Add in entity data and template context\n      var data = this.mixinTemplateContext(this.serializeData()) || {}; // Render and add to el\n\n      var html = this._renderHtml(template, data);\n\n      if (typeof html !== 'undefined') {\n        this.attachElContent(html);\n      }\n    },\n    // Get the template for this view instance.\n    // You can set a `template` attribute in the view definition\n    // or pass a `template: TemplateFunction` parameter in\n    // to the constructor options.\n    getTemplate: function getTemplate() {\n      return this.template;\n    },\n    // Mix in template context methods. Looks for a\n    // `templateContext` attribute, which can either be an\n    // object literal, or a function that returns an object\n    // literal. All methods and attributes from this object\n    // are copies to the object passed in.\n    mixinTemplateContext: function mixinTemplateContext(serializedData) {\n      var templateContext = _.result(this, 'templateContext');\n\n      if (!templateContext) {\n        return serializedData;\n      }\n\n      if (!serializedData) {\n        return templateContext;\n      }\n\n      return _.extend({}, serializedData, templateContext);\n    },\n    // Serialize the view's model *or* collection, if\n    // it exists, for the template\n    serializeData: function serializeData() {\n      // If we have a model, we serialize that\n      if (this.model) {\n        return this.serializeModel();\n      } // Otherwise, we serialize the collection,\n      // making it available under the `items` property\n\n\n      if (this.collection) {\n        return {\n          items: this.serializeCollection()\n        };\n      }\n    },\n    // Prepares the special `model` property of a view\n    // for being displayed in the template. Override this if\n    // you need a custom transformation for your view's model\n    serializeModel: function serializeModel() {\n      return this.model.attributes;\n    },\n    // Serialize a collection\n    serializeCollection: function serializeCollection() {\n      return _.map(this.collection.models, function (model) {\n        return model.attributes;\n      });\n    },\n    // Renders the data into the template\n    _renderHtml: function _renderHtml(template, data) {\n      return template(data);\n    },\n    // Attaches the content of a given view.\n    // This method can be overridden to optimize rendering,\n    // or to render in a non standard way.\n    //\n    // For example, using `innerHTML` instead of `$el.html`\n    //\n    // ```js\n    // attachElContent(html) {\n    //   this.el.innerHTML = html;\n    // }\n    // ```\n    attachElContent: function attachElContent(html) {\n      this.Dom.setContents(this.el, html, this.$el);\n    }\n  }; // Borrow event splitter from Backbone\n\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/; // Set event name to be namespaced using a unique index\n  // to generate a non colliding event namespace\n  // http://api.jquery.com/event.namespace/\n\n  var getNamespacedEventName = function getNamespacedEventName(eventName, namespace) {\n    var match = eventName.match(delegateEventSplitter);\n    return \"\".concat(match[1], \".\").concat(namespace, \" \").concat(match[2]);\n  }; // Add Feature flags here\n  // e.g. 'class' => false\n\n\n  var FEATURES = {\n    childViewEventPrefix: false,\n    triggersStopPropagation: true,\n    triggersPreventDefault: true,\n    DEV_MODE: false\n  };\n\n  function isEnabled(name) {\n    return !!FEATURES[name];\n  }\n\n  function setEnabled(name, state) {\n    return FEATURES[name] = state;\n  } // 'click:foo'\n\n\n  function buildViewTrigger(view, triggerDef) {\n    if (_.isString(triggerDef)) {\n      triggerDef = {\n        event: triggerDef\n      };\n    }\n\n    var eventName = triggerDef.event;\n    var shouldPreventDefault = !!triggerDef.preventDefault;\n\n    if (isEnabled('triggersPreventDefault')) {\n      shouldPreventDefault = triggerDef.preventDefault !== false;\n    }\n\n    var shouldStopPropagation = !!triggerDef.stopPropagation;\n\n    if (isEnabled('triggersStopPropagation')) {\n      shouldStopPropagation = triggerDef.stopPropagation !== false;\n    }\n\n    return function (event) {\n      if (shouldPreventDefault) {\n        event.preventDefault();\n      }\n\n      if (shouldStopPropagation) {\n        event.stopPropagation();\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      view.triggerMethod.apply(view, [eventName, view, event].concat(args));\n    };\n  }\n\n  var TriggersMixin = {\n    // Configure `triggers` to forward DOM events to view\n    // events. `triggers: {\"click .foo\": \"do:foo\"}`\n    _getViewTriggers: function _getViewTriggers(view, triggers) {\n      var _this = this; // Configure the triggers, prevent default\n      // action and stop propagation of DOM events\n\n\n      return _.reduce(triggers, function (events, value, key) {\n        key = getNamespacedEventName(key, \"trig\".concat(_this.cid));\n        events[key] = buildViewTrigger(view, value);\n        return events;\n      }, {});\n    }\n  }; // a given key for triggers and events\n  // swaps the @ui with the associated selector.\n  // Returns a new, non-mutated, parsed events hash.\n\n  var _normalizeUIKeys = function normalizeUIKeys(hash, ui) {\n    return _.reduce(hash, function (memo, val, key) {\n      var normalizedKey = _normalizeUIString(key, ui);\n\n      memo[normalizedKey] = val;\n      return memo;\n    }, {});\n  };\n\n  var uiRegEx = /@ui\\.[a-zA-Z-_$0-9]*/g; // utility method for parsing @ui. syntax strings\n  // into associated selector\n\n  var _normalizeUIString = function normalizeUIString(uiString, ui) {\n    return uiString.replace(uiRegEx, function (r) {\n      return ui[r.slice(4)];\n    });\n  }; // allows for the use of the @ui. syntax within\n  // a given value for regions\n  // swaps the @ui with the associated selector\n\n\n  var _normalizeUIValues = function normalizeUIValues(hash, ui, property) {\n    _.each(hash, function (val, key) {\n      if (_.isString(val)) {\n        hash[key] = _normalizeUIString(val, ui);\n      } else if (val) {\n        var propertyVal = val[property];\n\n        if (_.isString(propertyVal)) {\n          val[property] = _normalizeUIString(propertyVal, ui);\n        }\n      }\n    });\n\n    return hash;\n  };\n\n  var UIMixin = {\n    // normalize the keys of passed hash with the views `ui` selectors.\n    // `{\"@ui.foo\": \"bar\"}`\n    normalizeUIKeys: function normalizeUIKeys(hash) {\n      var uiBindings = this._getUIBindings();\n\n      return _normalizeUIKeys(hash, uiBindings);\n    },\n    // normalize the passed string with the views `ui` selectors.\n    // `\"@ui.bar\"`\n    normalizeUIString: function normalizeUIString(uiString) {\n      var uiBindings = this._getUIBindings();\n\n      return _normalizeUIString(uiString, uiBindings);\n    },\n    // normalize the values of passed hash with the views `ui` selectors.\n    // `{foo: \"@ui.bar\"}`\n    normalizeUIValues: function normalizeUIValues(hash, property) {\n      var uiBindings = this._getUIBindings();\n\n      return _normalizeUIValues(hash, uiBindings, property);\n    },\n    _getUIBindings: function _getUIBindings() {\n      var uiBindings = _.result(this, '_uiBindings');\n\n      return uiBindings || _.result(this, 'ui');\n    },\n    // This method binds the elements specified in the \"ui\" hash inside the view's code with\n    // the associated jQuery selectors.\n    _bindUIElements: function _bindUIElements() {\n      var _this = this;\n\n      if (!this.ui) {\n        return;\n      } // store the ui hash in _uiBindings so they can be reset later\n      // and so re-rendering the view will be able to find the bindings\n\n\n      if (!this._uiBindings) {\n        this._uiBindings = this.ui;\n      } // get the bindings result, as a function or otherwise\n\n\n      var bindings = _.result(this, '_uiBindings'); // empty the ui so we don't have anything to start with\n\n\n      this._ui = {}; // bind each of the selectors\n\n      _.each(bindings, function (selector, key) {\n        _this._ui[key] = _this.$(selector);\n      });\n\n      this.ui = this._ui;\n    },\n    _unbindUIElements: function _unbindUIElements() {\n      var _this2 = this;\n\n      if (!this.ui || !this._uiBindings) {\n        return;\n      } // delete all of the existing ui bindings\n\n\n      _.each(this.ui, function ($el, name) {\n        delete _this2.ui[name];\n      }); // reset the ui element to the original bindings configuration\n\n\n      this.ui = this._uiBindings;\n      delete this._uiBindings;\n      delete this._ui;\n    },\n    _getUI: function _getUI(name) {\n      return this._ui[name];\n    }\n  }; // DomApi\n\n  function _getEl(el) {\n    return el instanceof Backbone.$ ? el : Backbone.$(el);\n  } // Static setter\n\n\n  function setDomApi(mixin) {\n    this.prototype.Dom = _.extend({}, this.prototype.Dom, mixin);\n    return this;\n  }\n\n  var DomApi = {\n    // Returns a new HTML DOM node instance\n    createBuffer: function createBuffer() {\n      return document.createDocumentFragment();\n    },\n    // Returns the document element for a given DOM element\n    getDocumentEl: function getDocumentEl(el) {\n      return el.ownerDocument.documentElement;\n    },\n    // Lookup the `selector` string\n    // Selector may also be a DOM element\n    // Returns an array-like object of nodes\n    getEl: function getEl(selector) {\n      return _getEl(selector);\n    },\n    // Finds the `selector` string with the el\n    // Returns an array-like object of nodes\n    findEl: function findEl(el, selector) {\n      return _getEl(el).find(selector);\n    },\n    // Returns true if the el contains the node childEl\n    hasEl: function hasEl(el, childEl) {\n      return el.contains(childEl && childEl.parentNode);\n    },\n    // Detach `el` from the DOM without removing listeners\n    detachEl: function detachEl(el) {\n      var _$el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _getEl(el);\n\n      _$el.detach();\n    },\n    // Remove `oldEl` from the DOM and put `newEl` in its place\n    replaceEl: function replaceEl(newEl, oldEl) {\n      if (newEl === oldEl) {\n        return;\n      }\n\n      var parent = oldEl.parentNode;\n\n      if (!parent) {\n        return;\n      }\n\n      parent.replaceChild(newEl, oldEl);\n    },\n    // Swaps the location of `el1` and `el2` in the DOM\n    swapEl: function swapEl(el1, el2) {\n      if (el1 === el2) {\n        return;\n      }\n\n      var parent1 = el1.parentNode;\n      var parent2 = el2.parentNode;\n\n      if (!parent1 || !parent2) {\n        return;\n      }\n\n      var next1 = el1.nextSibling;\n      var next2 = el2.nextSibling;\n      parent1.insertBefore(el2, next1);\n      parent2.insertBefore(el1, next2);\n    },\n    // Replace the contents of `el` with the HTML string of `html`\n    setContents: function setContents(el, html) {\n      var _$el = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _getEl(el);\n\n      _$el.html(html);\n    },\n    // Takes the DOM node `el` and appends the DOM node `contents`\n    // to the end of the element's contents.\n    appendContents: function appendContents(el, contents) {\n      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref$_$el = _ref._$el,\n          _$el = _ref$_$el === void 0 ? _getEl(el) : _ref$_$el,\n          _ref$_$contents = _ref._$contents,\n          _$contents = _ref$_$contents === void 0 ? _getEl(contents) : _ref$_$contents;\n\n      _$el.append(_$contents);\n    },\n    // Does the el have child nodes\n    hasContents: function hasContents(el) {\n      return !!el && el.hasChildNodes();\n    },\n    // Remove the inner contents of `el` from the DOM while leaving\n    // `el` itself in the DOM.\n    detachContents: function detachContents(el) {\n      var _$el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _getEl(el);\n\n      _$el.contents().detach();\n    }\n  }; // ViewMixin\n  // - behaviors\n  // - childViewEventPrefix\n  // - childViewEvents\n  // - childViewTriggers\n  // - collectionEvents\n  // - modelEvents\n  // - triggers\n  // - ui\n\n  var ViewMixin = {\n    Dom: DomApi,\n    _isElAttached: function _isElAttached() {\n      return !!this.el && this.Dom.hasEl(this.Dom.getDocumentEl(this.el), this.el);\n    },\n    supportsRenderLifecycle: true,\n    supportsDestroyLifecycle: true,\n    _isDestroyed: false,\n    isDestroyed: function isDestroyed() {\n      return !!this._isDestroyed;\n    },\n    _isRendered: false,\n    isRendered: function isRendered() {\n      return !!this._isRendered;\n    },\n    _isAttached: false,\n    isAttached: function isAttached() {\n      return !!this._isAttached;\n    },\n    // Overriding Backbone.View's `delegateEvents` to handle\n    // `events` and `triggers`\n    delegateEvents: function delegateEvents(events) {\n      this._proxyBehaviorViewProperties();\n\n      this._buildEventProxies();\n\n      var combinedEvents = _.extend({}, this._getBehaviorEvents(), this._getEvents(events), this._getBehaviorTriggers(), this._getTriggers());\n\n      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n      return this;\n    },\n    // Allows Backbone.View events to utilize `@ui.` selectors\n    _getEvents: function _getEvents(events) {\n      if (events) {\n        return this.normalizeUIKeys(events);\n      }\n\n      if (!this.events) {\n        return;\n      }\n\n      return this.normalizeUIKeys(_.result(this, 'events'));\n    },\n    // Configure `triggers` to forward DOM events to view\n    // events. `triggers: {\"click .foo\": \"do:foo\"}`\n    _getTriggers: function _getTriggers() {\n      if (!this.triggers) {\n        return;\n      } // Allow `triggers` to be configured as a function\n\n\n      var triggers = this.normalizeUIKeys(_.result(this, 'triggers')); // Configure the triggers, prevent default\n      // action and stop propagation of DOM events\n\n      return this._getViewTriggers(this, triggers);\n    },\n    // Handle `modelEvents`, and `collectionEvents` configuration\n    delegateEntityEvents: function delegateEntityEvents() {\n      this._delegateEntityEvents(this.model, this.collection); // bind each behaviors model and collection events\n\n\n      this._delegateBehaviorEntityEvents();\n\n      return this;\n    },\n    // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n    undelegateEntityEvents: function undelegateEntityEvents() {\n      this._undelegateEntityEvents(this.model, this.collection); // unbind each behaviors model and collection events\n\n\n      this._undelegateBehaviorEntityEvents();\n\n      return this;\n    },\n    // Handle destroying the view and its children.\n    destroy: function destroy(options) {\n      if (this._isDestroyed || this._isDestroying) {\n        return this;\n      }\n\n      this._isDestroying = true;\n      var shouldTriggerDetach = this._isAttached && !this._disableDetachEvents;\n      this.triggerMethod('before:destroy', this, options);\n\n      if (shouldTriggerDetach) {\n        this.triggerMethod('before:detach', this);\n      } // unbind UI elements\n\n\n      this.unbindUIElements(); // remove the view from the DOM\n\n      this._removeElement();\n\n      if (shouldTriggerDetach) {\n        this._isAttached = false;\n        this.triggerMethod('detach', this);\n      } // remove children after the remove to prevent extra paints\n\n\n      this._removeChildren();\n\n      this._isDestroyed = true;\n      this._isRendered = false; // Destroy behaviors after _isDestroyed flag\n\n      this._destroyBehaviors(options);\n\n      this._deleteEntityEventHandlers();\n\n      this.triggerMethod('destroy', this, options);\n\n      this._triggerEventOnBehaviors('destroy', this, options);\n\n      this.stopListening();\n      return this;\n    },\n    // Equates to this.$el.remove\n    _removeElement: function _removeElement() {\n      this.$el.off().removeData();\n      this.Dom.detachEl(this.el, this.$el);\n    },\n    // This method binds the elements specified in the \"ui\" hash\n    bindUIElements: function bindUIElements() {\n      this._bindUIElements();\n\n      this._bindBehaviorUIElements();\n\n      return this;\n    },\n    // This method unbinds the elements specified in the \"ui\" hash\n    unbindUIElements: function unbindUIElements() {\n      this._unbindUIElements();\n\n      this._unbindBehaviorUIElements();\n\n      return this;\n    },\n    getUI: function getUI(name) {\n      return this._getUI(name);\n    },\n    // Cache `childViewEvents` and `childViewTriggers`\n    _buildEventProxies: function _buildEventProxies() {\n      this._childViewEvents = this.normalizeMethods(_.result(this, 'childViewEvents'));\n      this._childViewTriggers = _.result(this, 'childViewTriggers');\n      this._eventPrefix = this._getEventPrefix();\n    },\n    _getEventPrefix: function _getEventPrefix() {\n      var defaultPrefix = isEnabled('childViewEventPrefix') ? 'childview' : false;\n\n      var prefix = _.result(this, 'childViewEventPrefix', defaultPrefix);\n\n      return prefix === false ? prefix : prefix + ':';\n    },\n    _proxyChildViewEvents: function _proxyChildViewEvents(view) {\n      if (this._childViewEvents || this._childViewTriggers || this._eventPrefix) {\n        this.listenTo(view, 'all', this._childViewEventHandler);\n      }\n    },\n    _childViewEventHandler: function _childViewEventHandler(eventName) {\n      var childViewEvents = this._childViewEvents; // call collectionView childViewEvent if defined\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (childViewEvents && childViewEvents[eventName]) {\n        childViewEvents[eventName].apply(this, args);\n      } // use the parent view's proxyEvent handlers\n\n\n      var childViewTriggers = this._childViewTriggers; // Call the event with the proxy name on the parent layout\n\n      if (childViewTriggers && childViewTriggers[eventName]) {\n        this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n      }\n\n      if (this._eventPrefix) {\n        this.triggerMethod.apply(this, [this._eventPrefix + eventName].concat(args));\n      }\n    }\n  };\n\n  _.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TemplateRenderMixin, TriggersMixin, UIMixin);\n\n  function renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      view.triggerMethod('before:render', view);\n    }\n\n    view.render();\n    view._isRendered = true;\n\n    if (!view.supportsRenderLifecycle) {\n      view.triggerMethod('render', view);\n    }\n  }\n\n  function destroyView(view, disableDetachEvents) {\n    if (view.destroy) {\n      // Attach flag for public destroy function internal check\n      view._disableDetachEvents = disableDetachEvents;\n      view.destroy();\n      return;\n    } // Destroy for non-Marionette Views\n\n\n    if (!view.supportsDestroyLifecycle) {\n      view.triggerMethod('before:destroy', view);\n    }\n\n    var shouldTriggerDetach = view._isAttached && !disableDetachEvents;\n\n    if (shouldTriggerDetach) {\n      view.triggerMethod('before:detach', view);\n    }\n\n    view.remove();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      view.triggerMethod('detach', view);\n    }\n\n    view._isDestroyed = true;\n\n    if (!view.supportsDestroyLifecycle) {\n      view.triggerMethod('destroy', view);\n    }\n  } // Region\n\n\n  var classErrorName = 'RegionError';\n  var ClassOptions$1 = ['allowMissingEl', 'parentEl', 'replaceElement'];\n\n  var Region = function Region(options) {\n    this._setOptions(options, ClassOptions$1);\n\n    this.cid = _.uniqueId(this.cidPrefix); // getOption necessary because options.el may be passed as undefined\n\n    this._initEl = this.el = this.getOption('el'); // Handle when this.el is passed in as a $ wrapped element.\n\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n    this.$el = this._getEl(this.el);\n    this.initialize.apply(this, arguments);\n  };\n\n  Region.extend = extend;\n  Region.setDomApi = setDomApi; // Region Methods\n  // --------------\n\n  _.extend(Region.prototype, CommonMixin, {\n    Dom: DomApi,\n    cidPrefix: 'mnr',\n    replaceElement: false,\n    _isReplaced: false,\n    _isSwappingView: false,\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {},\n    // Displays a view instance inside of the region. If necessary handles calling the `render`\n    // method for you. Reads content directly from the `el` attribute.\n    show: function show(view, options) {\n      if (!this._ensureElement(options)) {\n        return;\n      }\n\n      view = this._getView(view, options);\n\n      if (view === this.currentView) {\n        return this;\n      }\n\n      if (view._isShown) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: 'View is already shown in a Region or CollectionView',\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      this._isSwappingView = !!this.currentView;\n      this.triggerMethod('before:show', this, view, options); // Assume an attached view is already in the region for pre-existing DOM\n\n      if (this.currentView || !view._isAttached) {\n        this.empty(options);\n      }\n\n      this._setupChildView(view);\n\n      this.currentView = view;\n      renderView(view);\n\n      this._attachView(view, options);\n\n      this.triggerMethod('show', this, view, options);\n      this._isSwappingView = false;\n      return this;\n    },\n    _getEl: function _getEl(el) {\n      if (!el) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: 'An \"el\" must be specified for a region.',\n          url: 'marionette.region.html#additional-options'\n        });\n      }\n\n      return this.getEl(el);\n    },\n    _setEl: function _setEl() {\n      this.$el = this._getEl(this.el);\n\n      if (this.$el.length) {\n        this.el = this.$el[0];\n      } // Make sure the $el contains only the el\n\n\n      if (this.$el.length > 1) {\n        this.$el = this.Dom.getEl(this.el);\n      }\n    },\n    // Set the `el` of the region and move any current view to the new `el`.\n    _setElement: function _setElement(el) {\n      if (el === this.el) {\n        return this;\n      }\n\n      var shouldReplace = this._isReplaced;\n\n      this._restoreEl();\n\n      this.el = el;\n\n      this._setEl();\n\n      if (this.currentView) {\n        var view = this.currentView;\n\n        if (shouldReplace) {\n          this._replaceEl(view);\n        } else {\n          this.attachHtml(view);\n        }\n      }\n\n      return this;\n    },\n    _setupChildView: function _setupChildView(view) {\n      monitorViewEvents(view);\n\n      this._proxyChildViewEvents(view); // We need to listen for if a view is destroyed in a way other than through the region.\n      // If this happens we need to remove the reference to the currentView since once a view\n      // has been destroyed we can not reuse it.\n\n\n      view.on('destroy', this._empty, this);\n    },\n    _proxyChildViewEvents: function _proxyChildViewEvents(view) {\n      var parentView = this._parentView;\n\n      if (!parentView) {\n        return;\n      }\n\n      parentView._proxyChildViewEvents(view);\n    },\n    // If the regions parent view is not monitoring its attach/detach events\n    _shouldDisableMonitoring: function _shouldDisableMonitoring() {\n      return this._parentView && this._parentView.monitorViewEvents === false;\n    },\n    _isElAttached: function _isElAttached() {\n      return this.Dom.hasEl(this.Dom.getDocumentEl(this.el), this.el);\n    },\n    _attachView: function _attachView(view) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          replaceElement = _ref.replaceElement;\n\n      var shouldTriggerAttach = !view._isAttached && this._isElAttached() && !this._shouldDisableMonitoring();\n      var shouldReplaceEl = typeof replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!replaceElement;\n\n      if (shouldTriggerAttach) {\n        view.triggerMethod('before:attach', view);\n      }\n\n      if (shouldReplaceEl) {\n        this._replaceEl(view);\n      } else {\n        this.attachHtml(view);\n      }\n\n      if (shouldTriggerAttach) {\n        view._isAttached = true;\n        view.triggerMethod('attach', view);\n      } // Corresponds that view is shown in a marionette Region or CollectionView\n\n\n      view._isShown = true;\n    },\n    _ensureElement: function _ensureElement() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!_.isObject(this.el)) {\n        this._setEl();\n      }\n\n      if (!this.$el || this.$el.length === 0) {\n        var allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n        if (allowMissingEl) {\n          return false;\n        } else {\n          throw new MarionetteError({\n            name: classErrorName,\n            message: \"An \\\"el\\\" must exist in DOM for this region \".concat(this.cid),\n            url: 'marionette.region.html#additional-options'\n          });\n        }\n      }\n\n      return true;\n    },\n    _getView: function _getView(view) {\n      if (!view) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.',\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      if (view._isDestroyed) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: \"View (cid: \\\"\".concat(view.cid, \"\\\") has already been destroyed and cannot be used.\"),\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      if (view instanceof Backbone.View) {\n        return view;\n      }\n\n      var viewOptions = this._getViewOptions(view);\n\n      return new View(viewOptions);\n    },\n    // This allows for a template or a static string to be\n    // used as a template\n    _getViewOptions: function _getViewOptions(viewOptions) {\n      if (_.isFunction(viewOptions)) {\n        return {\n          template: viewOptions\n        };\n      }\n\n      if (_.isObject(viewOptions)) {\n        return viewOptions;\n      }\n\n      var template = function template() {\n        return viewOptions;\n      };\n\n      return {\n        template: template\n      };\n    },\n    // Override this method to change how the region finds the DOM element that it manages. Return\n    // a jQuery selector object scoped to a provided parent el or the document if none exists.\n    getEl: function getEl(el) {\n      var context = _.result(this, 'parentEl');\n\n      if (context && _.isString(el)) {\n        return this.Dom.findEl(context, el);\n      }\n\n      return this.Dom.getEl(el);\n    },\n    _replaceEl: function _replaceEl(view) {\n      // Always restore the el to ensure the regions el is present before replacing\n      this._restoreEl();\n\n      view.on('before:destroy', this._restoreEl, this);\n      this.Dom.replaceEl(view.el, this.el);\n      this._isReplaced = true;\n    },\n    // Restore the region's element in the DOM.\n    _restoreEl: function _restoreEl() {\n      // There is nothing to replace\n      if (!this._isReplaced) {\n        return;\n      }\n\n      var view = this.currentView;\n\n      if (!view) {\n        return;\n      }\n\n      this._detachView(view);\n\n      this._isReplaced = false;\n    },\n    // Check to see if the region's el was replaced.\n    isReplaced: function isReplaced() {\n      return !!this._isReplaced;\n    },\n    // Check to see if a view is being swapped by another\n    isSwappingView: function isSwappingView() {\n      return !!this._isSwappingView;\n    },\n    // Override this method to change how the new view is appended to the `$el` that the\n    // region is managing\n    attachHtml: function attachHtml(view) {\n      this.Dom.appendContents(this.el, view.el, {\n        _$el: this.$el,\n        _$contents: view.$el\n      });\n    },\n    // Destroy the current view, if there is one. If there is no current view,\n    // it will detach any html inside the region's `el`.\n    empty: function empty() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        allowMissingEl: true\n      };\n      var view = this.currentView; // If there is no view in the region we should only detach current html\n\n      if (!view) {\n        if (this._ensureElement(options)) {\n          this.detachHtml();\n        }\n\n        return this;\n      }\n\n      this._empty(view, true);\n\n      return this;\n    },\n    _empty: function _empty(view, shouldDestroy) {\n      view.off('destroy', this._empty, this);\n      this.triggerMethod('before:empty', this, view);\n\n      this._restoreEl();\n\n      delete this.currentView;\n\n      if (!view._isDestroyed) {\n        if (shouldDestroy) {\n          this.removeView(view);\n        } else {\n          this._detachView(view);\n        }\n\n        view._isShown = false;\n\n        this._stopChildViewEvents(view);\n      }\n\n      this.triggerMethod('empty', this, view);\n    },\n    _stopChildViewEvents: function _stopChildViewEvents(view) {\n      var parentView = this._parentView;\n\n      if (!parentView) {\n        return;\n      }\n\n      this._parentView.stopListening(view);\n    },\n    // Non-Marionette safe view.destroy\n    destroyView: function destroyView$1(view) {\n      if (view._isDestroyed) {\n        return view;\n      }\n\n      destroyView(view, this._shouldDisableMonitoring());\n      return view;\n    },\n    // Override this method to determine what happens when the view\n    // is removed from the region when the view is not being detached\n    removeView: function removeView(view) {\n      this.destroyView(view);\n    },\n    // Empties the Region without destroying the view\n    // Returns the detached view\n    detachView: function detachView() {\n      var view = this.currentView;\n\n      if (!view) {\n        return;\n      }\n\n      this._empty(view);\n\n      return view;\n    },\n    _detachView: function _detachView(view) {\n      var shouldTriggerDetach = view._isAttached && !this._shouldDisableMonitoring();\n      var shouldRestoreEl = this._isReplaced;\n\n      if (shouldTriggerDetach) {\n        view.triggerMethod('before:detach', view);\n      }\n\n      if (shouldRestoreEl) {\n        this.Dom.replaceEl(this.el, view.el);\n      } else {\n        this.detachHtml();\n      }\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        view.triggerMethod('detach', view);\n      }\n    },\n    // Override this method to change how the region detaches current content\n    detachHtml: function detachHtml() {\n      this.Dom.detachContents(this.el, this.$el);\n    },\n    // Checks whether a view is currently present within the region. Returns `true` if there is\n    // and `false` if no view is present.\n    hasView: function hasView() {\n      return !!this.currentView;\n    },\n    // Reset the region by destroying any existing view and clearing out the cached `$el`.\n    // The next time a view is shown via this region, the region will re-query the DOM for\n    // the region's `el`.\n    reset: function reset(options) {\n      this.empty(options);\n      this.el = this._initEl;\n      delete this.$el;\n      return this;\n    },\n    _isDestroyed: false,\n    isDestroyed: function isDestroyed() {\n      return this._isDestroyed;\n    },\n    // Destroy the region, remove any child view\n    // and remove the region from any associated view\n    destroy: function destroy(options) {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:destroy', this, options);\n      this._isDestroyed = true;\n      this.reset(options);\n\n      if (this._name) {\n        this._parentView._removeReferences(this._name);\n      }\n\n      delete this._parentView;\n      delete this._name;\n      this.triggerMethod('destroy', this, options);\n      this.stopListening();\n      return this;\n    }\n  });\n\n  function buildRegion(definition, defaults) {\n    if (definition instanceof Region) {\n      return definition;\n    }\n\n    if (_.isString(definition)) {\n      return buildRegionFromObject(defaults, {\n        el: definition\n      });\n    }\n\n    if (_.isFunction(definition)) {\n      return buildRegionFromObject(defaults, {\n        regionClass: definition\n      });\n    }\n\n    if (_.isObject(definition)) {\n      return buildRegionFromObject(defaults, definition);\n    }\n\n    throw new MarionetteError({\n      message: 'Improper region configuration type.',\n      url: 'marionette.region.html#defining-regions'\n    });\n  }\n\n  function buildRegionFromObject(defaults, definition) {\n    var options = _.extend({}, defaults, definition);\n\n    var RegionClass = options.regionClass;\n    delete options.regionClass;\n    return new RegionClass(options);\n  } // - regions\n  // - regionClass\n\n\n  var RegionsMixin = {\n    regionClass: Region,\n    // Internal method to initialize the regions that have been defined in a\n    // `regions` attribute on this View.\n    _initRegions: function _initRegions() {\n      // init regions hash\n      this.regions = this.regions || {};\n      this._regions = {};\n      this.addRegions(_.result(this, 'regions'));\n    },\n    // Internal method to re-initialize all of the regions by updating\n    // the `el` that they point to\n    _reInitRegions: function _reInitRegions() {\n      _invoke(this._regions, 'reset');\n    },\n    // Add a single region, by name, to the View\n    addRegion: function addRegion(name, definition) {\n      var regions = {};\n      regions[name] = definition;\n      return this.addRegions(regions)[name];\n    },\n    // Add multiple regions as a {name: definition, name2: def2} object literal\n    addRegions: function addRegions(regions) {\n      // If there's nothing to add, stop here.\n      if (_.isEmpty(regions)) {\n        return;\n      } // Normalize region selectors hash to allow\n      // a user to use the @ui. syntax.\n\n\n      regions = this.normalizeUIValues(regions, 'el'); // Add the regions definitions to the regions property\n\n      this.regions = _.extend({}, this.regions, regions);\n      return this._addRegions(regions);\n    },\n    // internal method to build and add regions\n    _addRegions: function _addRegions(regionDefinitions) {\n      var _this = this;\n\n      var defaults = {\n        regionClass: this.regionClass,\n        parentEl: _.partial(_.result, this, 'el')\n      };\n      return _.reduce(regionDefinitions, function (regions, definition, name) {\n        regions[name] = buildRegion(definition, defaults);\n\n        _this._addRegion(regions[name], name);\n\n        return regions;\n      }, {});\n    },\n    _addRegion: function _addRegion(region, name) {\n      this.triggerMethod('before:add:region', this, name, region);\n      region._parentView = this;\n      region._name = name;\n      this._regions[name] = region;\n      this.triggerMethod('add:region', this, name, region);\n    },\n    // Remove a single region from the View, by name\n    removeRegion: function removeRegion(name) {\n      var region = this._regions[name];\n\n      this._removeRegion(region, name);\n\n      return region;\n    },\n    // Remove all regions from the View\n    removeRegions: function removeRegions() {\n      var regions = this._getRegions();\n\n      _.each(this._regions, this._removeRegion.bind(this));\n\n      return regions;\n    },\n    _removeRegion: function _removeRegion(region, name) {\n      this.triggerMethod('before:remove:region', this, name, region);\n      region.destroy();\n      this.triggerMethod('remove:region', this, name, region);\n    },\n    // Called in a region's destroy\n    _removeReferences: function _removeReferences(name) {\n      delete this.regions[name];\n      delete this._regions[name];\n    },\n    // Empty all regions in the region manager, but\n    // leave them attached\n    emptyRegions: function emptyRegions() {\n      var regions = this.getRegions();\n\n      _invoke(regions, 'empty');\n\n      return regions;\n    },\n    // Checks to see if view contains region\n    // Accepts the region name\n    // hasRegion('main')\n    hasRegion: function hasRegion(name) {\n      return !!this.getRegion(name);\n    },\n    // Provides access to regions\n    // Accepts the region name\n    // getRegion('main')\n    getRegion: function getRegion(name) {\n      if (!this._isRendered) {\n        this.render();\n      }\n\n      return this._regions[name];\n    },\n    _getRegions: function _getRegions() {\n      return _.clone(this._regions);\n    },\n    // Get all regions\n    getRegions: function getRegions() {\n      if (!this._isRendered) {\n        this.render();\n      }\n\n      return this._getRegions();\n    },\n    showChildView: function showChildView(name, view, options) {\n      var region = this.getRegion(name);\n      region.show(view, options);\n      return view;\n    },\n    detachChildView: function detachChildView(name) {\n      return this.getRegion(name).detachView();\n    },\n    getChildView: function getChildView(name) {\n      return this.getRegion(name).currentView;\n    }\n  }; // Static setter for the renderer\n\n  function setRenderer(renderer) {\n    this.prototype._renderHtml = renderer;\n    return this;\n  } // View\n\n\n  var ClassOptions$2 = ['behaviors', 'childViewEventPrefix', 'childViewEvents', 'childViewTriggers', 'collectionEvents', 'events', 'modelEvents', 'regionClass', 'regions', 'template', 'templateContext', 'triggers', 'ui']; // Used by _getImmediateChildren\n\n  function childReducer(children, region) {\n    if (region.currentView) {\n      children.push(region.currentView);\n    }\n\n    return children;\n  } // The standard view. Includes view events, automatic rendering\n  // templates, nested views, and more.\n\n\n  var View = Backbone.View.extend({\n    constructor: function constructor(options) {\n      this._setOptions(options, ClassOptions$2);\n\n      monitorViewEvents(this);\n\n      this._initBehaviors();\n\n      this._initRegions();\n\n      Backbone.View.prototype.constructor.apply(this, arguments);\n      this.delegateEntityEvents();\n\n      this._triggerEventOnBehaviors('initialize', this, options);\n    },\n    // Overriding Backbone.View's `setElement` to handle\n    // if an el was previously defined. If so, the view might be\n    // rendered or attached on setElement.\n    setElement: function setElement() {\n      Backbone.View.prototype.setElement.apply(this, arguments);\n      this._isRendered = this.Dom.hasContents(this.el);\n      this._isAttached = this._isElAttached();\n\n      if (this._isRendered) {\n        this.bindUIElements();\n      }\n\n      return this;\n    },\n    // If a template is available, renders it into the view's `el`\n    // Re-inits regions and binds UI.\n    render: function render() {\n      var template = this.getTemplate();\n\n      if (template === false || this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:render', this); // If this is not the first render call, then we need to\n      // re-initialize the `el` for each region\n\n      if (this._isRendered) {\n        this._reInitRegions();\n      }\n\n      this._renderTemplate(template);\n\n      this.bindUIElements();\n      this._isRendered = true;\n      this.triggerMethod('render', this);\n      return this;\n    },\n    // called by ViewMixin destroy\n    _removeChildren: function _removeChildren() {\n      this.removeRegions();\n    },\n    _getImmediateChildren: function _getImmediateChildren() {\n      return _.reduce(this._regions, childReducer, []);\n    }\n  }, {\n    setRenderer: setRenderer,\n    setDomApi: setDomApi\n  });\n\n  _.extend(View.prototype, ViewMixin, RegionsMixin); // shut down child views.\n\n\n  var Container = function Container() {\n    this._init();\n  }; // Mix in methods from Underscore, for iteration, and other\n  // collection related features.\n  // Borrowing this code from Backbone.Collection:\n  // https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\n\n\n  var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', 'last', 'without', 'isEmpty', 'pluck', 'reduce', 'partition'];\n\n  _.each(methods, function (method) {\n    Container.prototype[method] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _[method].apply(_, [this._views].concat(args));\n    };\n  });\n\n  function stringComparator(comparator, view) {\n    return view.model && view.model.get(comparator);\n  } // Container Methods\n  // -----------------\n\n\n  _.extend(Container.prototype, {\n    // Initializes an empty container\n    _init: function _init() {\n      this._views = [];\n      this._viewsByCid = {};\n      this._indexByModel = {};\n\n      this._updateLength();\n    },\n    // Add a view to this container. Stores the view\n    // by `cid` and makes it searchable by the model\n    // cid (and model itself). Additionally it stores\n    // the view by index in the _views array\n    _add: function _add(view) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._views.length;\n\n      this._addViewIndexes(view); // add to end by default\n\n\n      this._views.splice(index, 0, view);\n\n      this._updateLength();\n    },\n    _addViewIndexes: function _addViewIndexes(view) {\n      // store the view\n      this._viewsByCid[view.cid] = view; // index it by model\n\n      if (view.model) {\n        this._indexByModel[view.model.cid] = view;\n      }\n    },\n    // Sort (mutate) and return the array of the child views.\n    _sort: function _sort(comparator, context) {\n      if (typeof comparator === 'string') {\n        comparator = _.partial(stringComparator, comparator);\n        return this._sortBy(comparator);\n      }\n\n      if (comparator.length === 1) {\n        return this._sortBy(comparator.bind(context));\n      }\n\n      return this._views.sort(comparator.bind(context));\n    },\n    // Makes `_.sortBy` mutate the array to match `this._views.sort`\n    _sortBy: function _sortBy(comparator) {\n      var sortedViews = _.sortBy(this._views, comparator);\n\n      this._set(sortedViews);\n\n      return sortedViews;\n    },\n    // Replace array contents without overwriting the reference.\n    // Should not add/remove views\n    _set: function _set(views, shouldReset) {\n      this._views.length = 0;\n\n      this._views.push.apply(this._views, views.slice(0));\n\n      if (shouldReset) {\n        this._viewsByCid = {};\n        this._indexByModel = {};\n\n        _.each(views, this._addViewIndexes.bind(this));\n\n        this._updateLength();\n      }\n    },\n    // Swap views by index\n    _swap: function _swap(view1, view2) {\n      var view1Index = this.findIndexByView(view1);\n      var view2Index = this.findIndexByView(view2);\n\n      if (view1Index === -1 || view2Index === -1) {\n        return;\n      }\n\n      var swapView = this._views[view1Index];\n      this._views[view1Index] = this._views[view2Index];\n      this._views[view2Index] = swapView;\n    },\n    // Find a view by the model that was attached to it.\n    // Uses the model's `cid` to find it.\n    findByModel: function findByModel(model) {\n      return this.findByModelCid(model.cid);\n    },\n    // Find a view by the `cid` of the model that was attached to it.\n    findByModelCid: function findByModelCid(modelCid) {\n      return this._indexByModel[modelCid];\n    },\n    // Find a view by index.\n    findByIndex: function findByIndex(index) {\n      return this._views[index];\n    },\n    // Find the index of a view instance\n    findIndexByView: function findIndexByView(view) {\n      return this._views.indexOf(view);\n    },\n    // Retrieve a view by its `cid` directly\n    findByCid: function findByCid(cid) {\n      return this._viewsByCid[cid];\n    },\n    hasView: function hasView(view) {\n      return !!this.findByCid(view.cid);\n    },\n    // Remove a view and clean up index references.\n    _remove: function _remove(view) {\n      if (!this._viewsByCid[view.cid]) {\n        return;\n      } // delete model index\n\n\n      if (view.model) {\n        delete this._indexByModel[view.model.cid];\n      } // remove the view from the container\n\n\n      delete this._viewsByCid[view.cid];\n      var index = this.findIndexByView(view);\n\n      this._views.splice(index, 1);\n\n      this._updateLength();\n    },\n    // Update the `.length` attribute on this container\n    _updateLength: function _updateLength() {\n      this.length = this._views.length;\n    }\n  }); // Collection View\n\n\n  var classErrorName$1 = 'CollectionViewError';\n  var ClassOptions$3 = ['behaviors', 'childView', 'childViewContainer', 'childViewEventPrefix', 'childViewEvents', 'childViewOptions', 'childViewTriggers', 'collectionEvents', 'emptyView', 'emptyViewOptions', 'events', 'modelEvents', 'sortWithCollection', 'template', 'templateContext', 'triggers', 'ui', 'viewComparator', 'viewFilter']; // A view that iterates over a Backbone.Collection\n  // and renders an individual child view for each model.\n\n  var CollectionView = Backbone.View.extend({\n    // flag for maintaining the sorted order of the collection\n    sortWithCollection: true,\n    // constructor\n    constructor: function constructor(options) {\n      this._setOptions(options, ClassOptions$3);\n\n      monitorViewEvents(this);\n\n      this._initChildViewStorage();\n\n      this._initBehaviors();\n\n      Backbone.View.prototype.constructor.apply(this, arguments); // Init empty region\n\n      this.getEmptyRegion();\n      this.delegateEntityEvents();\n\n      this._triggerEventOnBehaviors('initialize', this, options);\n    },\n    // Internal method to set up the `children` object for storing all of the child views\n    // `_children` represents all child views\n    // `children` represents only views filtered to be shown\n    _initChildViewStorage: function _initChildViewStorage() {\n      this._children = new Container();\n      this.children = new Container();\n    },\n    // Create an region to show the emptyView\n    getEmptyRegion: function getEmptyRegion() {\n      var $emptyEl = this.$container || this.$el;\n\n      if (this._emptyRegion && !this._emptyRegion.isDestroyed()) {\n        this._emptyRegion._setElement($emptyEl[0]);\n\n        return this._emptyRegion;\n      }\n\n      this._emptyRegion = new Region({\n        el: $emptyEl[0],\n        replaceElement: false\n      });\n      this._emptyRegion._parentView = this;\n      return this._emptyRegion;\n    },\n    // Configured the initial events that the collection view binds to.\n    _initialEvents: function _initialEvents() {\n      if (this._isRendered) {\n        return;\n      }\n\n      this.listenTo(this.collection, {\n        'sort': this._onCollectionSort,\n        'reset': this._onCollectionReset,\n        'update': this._onCollectionUpdate\n      });\n    },\n    // Internal method. This checks for any changes in the order of the collection.\n    // If the index of any view doesn't match, it will re-sort.\n    _onCollectionSort: function _onCollectionSort(collection, _ref) {\n      var add = _ref.add,\n          merge = _ref.merge,\n          remove = _ref.remove;\n\n      if (!this.sortWithCollection || this.viewComparator === false) {\n        return;\n      } // If the data is changing we will handle the sort later in `_onCollectionUpdate`\n\n\n      if (add || remove || merge) {\n        return;\n      } // If the only thing happening here is sorting, sort.\n\n\n      this.sort();\n    },\n    _onCollectionReset: function _onCollectionReset() {\n      this._destroyChildren();\n\n      this._addChildModels(this.collection.models);\n\n      this.sort();\n    },\n    // Handle collection update model additions and  removals\n    _onCollectionUpdate: function _onCollectionUpdate(collection, options) {\n      var changes = options.changes; // Remove first since it'll be a shorter array lookup.\n\n      var removedViews = changes.removed.length && this._removeChildModels(changes.removed);\n\n      this._addedViews = changes.added.length && this._addChildModels(changes.added);\n\n      this._detachChildren(removedViews);\n\n      this.sort(); // Destroy removed child views after all of the render is complete\n\n      this._removeChildViews(removedViews);\n    },\n    _removeChildModels: function _removeChildModels(models) {\n      var _this = this;\n\n      return _.reduce(models, function (views, model) {\n        var removeView = _this._removeChildModel(model);\n\n        if (removeView) {\n          views.push(removeView);\n        }\n\n        return views;\n      }, []);\n    },\n    _removeChildModel: function _removeChildModel(model) {\n      var view = this._children.findByModel(model);\n\n      if (view) {\n        this._removeChild(view);\n      }\n\n      return view;\n    },\n    _removeChild: function _removeChild(view) {\n      this.triggerMethod('before:remove:child', this, view);\n\n      this.children._remove(view);\n\n      this._children._remove(view);\n\n      this.triggerMethod('remove:child', this, view);\n    },\n    // Added views are returned for consistency with _removeChildModels\n    _addChildModels: function _addChildModels(models) {\n      return _.map(models, this._addChildModel.bind(this));\n    },\n    _addChildModel: function _addChildModel(model) {\n      var view = this._createChildView(model);\n\n      this._addChild(view);\n\n      return view;\n    },\n    _createChildView: function _createChildView(model) {\n      var ChildView = this._getChildView(model);\n\n      var childViewOptions = this._getChildViewOptions(model);\n\n      var view = this.buildChildView(model, ChildView, childViewOptions);\n      return view;\n    },\n    _addChild: function _addChild(view, index) {\n      this.triggerMethod('before:add:child', this, view);\n\n      this._setupChildView(view);\n\n      this._children._add(view, index);\n\n      this.children._add(view, index);\n\n      this.triggerMethod('add:child', this, view);\n    },\n    // Retrieve the `childView` class\n    // The `childView` property can be either a view class or a function that\n    // returns a view class. If it is a function, it will receive the model that\n    // will be passed to the view instance (created from the returned view class)\n    _getChildView: function _getChildView(child) {\n      var childView = this.childView;\n\n      if (!childView) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: 'A \"childView\" must be specified',\n          url: 'marionette.collectionview.html#collectionviews-childview'\n        });\n      }\n\n      childView = this._getView(childView, child);\n\n      if (!childView) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: '\"childView\" must be a view class or a function that returns a view class',\n          url: 'marionette.collectionview.html#collectionviews-childview'\n        });\n      }\n\n      return childView;\n    },\n    // First check if the `view` is a view class (the common case)\n    // Then check if it's a function (which we assume that returns a view class)\n    _getView: function _getView(view, child) {\n      if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n        return view;\n      } else if (_.isFunction(view)) {\n        return view.call(this, child);\n      }\n    },\n    _getChildViewOptions: function _getChildViewOptions(child) {\n      if (_.isFunction(this.childViewOptions)) {\n        return this.childViewOptions(child);\n      }\n\n      return this.childViewOptions;\n    },\n    // Build a `childView` for a model in the collection.\n    // Override to customize the build\n    buildChildView: function buildChildView(child, ChildViewClass, childViewOptions) {\n      var options = _.extend({\n        model: child\n      }, childViewOptions);\n\n      return new ChildViewClass(options);\n    },\n    _setupChildView: function _setupChildView(view) {\n      monitorViewEvents(view); // We need to listen for if a view is destroyed in a way other\n      // than through the CollectionView.\n      // If this happens we need to remove the reference to the view\n      // since once a view has been destroyed we can not reuse it.\n\n      view.on('destroy', this.removeChildView, this); // set up the child view event forwarding\n\n      this._proxyChildViewEvents(view);\n    },\n    // used by ViewMixin's `_childViewEventHandler`\n    _getImmediateChildren: function _getImmediateChildren() {\n      return this.children._views;\n    },\n    // Overriding Backbone.View's `setElement` to handle\n    // if an el was previously defined. If so, the view might be\n    // attached on setElement.\n    setElement: function setElement() {\n      Backbone.View.prototype.setElement.apply(this, arguments);\n      this._isAttached = this._isElAttached();\n      return this;\n    },\n    // Render children views.\n    render: function render() {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:render', this);\n\n      this._destroyChildren();\n\n      if (this.collection) {\n        this._addChildModels(this.collection.models);\n\n        this._initialEvents();\n      }\n\n      var template = this.getTemplate();\n\n      if (template) {\n        this._renderTemplate(template);\n\n        this.bindUIElements();\n      }\n\n      this._getChildViewContainer();\n\n      this.sort();\n      this._isRendered = true;\n      this.triggerMethod('render', this);\n      return this;\n    },\n    // Get a container within the template to add the children within\n    _getChildViewContainer: function _getChildViewContainer() {\n      var childViewContainer = _.result(this, 'childViewContainer');\n\n      this.$container = childViewContainer ? this.$(childViewContainer) : this.$el;\n\n      if (!this.$container.length) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: \"The specified \\\"childViewContainer\\\" was not found: \".concat(childViewContainer),\n          url: 'marionette.collectionview.html#defining-the-childviewcontainer'\n        });\n      }\n    },\n    // Sorts the children then filters and renders the results.\n    sort: function sort() {\n      this._sortChildren();\n\n      this.filter();\n      return this;\n    },\n    // Sorts views by viewComparator and sets the children to the new order\n    _sortChildren: function _sortChildren() {\n      if (!this._children.length) {\n        return;\n      }\n\n      var viewComparator = this.getComparator();\n\n      if (!viewComparator) {\n        return;\n      } // If children are sorted prevent added to end perf\n\n\n      delete this._addedViews;\n      this.triggerMethod('before:sort', this);\n\n      this._children._sort(viewComparator, this);\n\n      this.triggerMethod('sort', this);\n    },\n    // Sets the view's `viewComparator` and applies the sort if the view is ready.\n    // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n    setComparator: function setComparator(comparator) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          preventRender = _ref2.preventRender;\n\n      var comparatorChanged = this.viewComparator !== comparator;\n      var shouldSort = comparatorChanged && !preventRender;\n      this.viewComparator = comparator;\n\n      if (shouldSort) {\n        this.sort();\n      }\n\n      return this;\n    },\n    // Clears the `viewComparator` and follows the same rules for rendering as `setComparator`.\n    removeComparator: function removeComparator(options) {\n      return this.setComparator(null, options);\n    },\n    // If viewComparator is overriden it will be returned here.\n    // Additionally override this function to provide custom\n    // viewComparator logic\n    getComparator: function getComparator() {\n      if (this.viewComparator) {\n        return this.viewComparator;\n      }\n\n      if (!this.sortWithCollection || this.viewComparator === false || !this.collection) {\n        return false;\n      }\n\n      return this._viewComparator;\n    },\n    // Default internal view comparator that order the views by\n    // the order of the collection\n    _viewComparator: function _viewComparator(view) {\n      return this.collection.indexOf(view.model);\n    },\n    // This method filters the children views and renders the results\n    filter: function filter() {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this._filterChildren();\n\n      this._renderChildren();\n\n      return this;\n    },\n    _filterChildren: function _filterChildren() {\n      var _this2 = this;\n\n      if (!this._children.length) {\n        return;\n      }\n\n      var viewFilter = this._getFilter();\n\n      if (!viewFilter) {\n        var shouldReset = this.children.length !== this._children.length;\n\n        this.children._set(this._children._views, shouldReset);\n\n        return;\n      } // If children are filtered prevent added to end perf\n\n\n      delete this._addedViews;\n      this.triggerMethod('before:filter', this);\n      var attachViews = [];\n      var detachViews = [];\n\n      _.each(this._children._views, function (view, key, children) {\n        (viewFilter.call(_this2, view, key, children) ? attachViews : detachViews).push(view);\n      });\n\n      this._detachChildren(detachViews); // reset children\n\n\n      this.children._set(attachViews, true);\n\n      this.triggerMethod('filter', this, attachViews, detachViews);\n    },\n    // This method returns a function for the viewFilter\n    _getFilter: function _getFilter() {\n      var viewFilter = this.getFilter();\n\n      if (!viewFilter) {\n        return false;\n      }\n\n      if (_.isFunction(viewFilter)) {\n        return viewFilter;\n      } // Support filter predicates `{ fooFlag: true }`\n\n\n      if (_.isObject(viewFilter)) {\n        var matcher = _.matches(viewFilter);\n\n        return function (view) {\n          return matcher(view.model && view.model.attributes);\n        };\n      } // Filter by model attribute\n\n\n      if (_.isString(viewFilter)) {\n        return function (view) {\n          return view.model && view.model.get(viewFilter);\n        };\n      }\n\n      throw new MarionetteError({\n        name: classErrorName$1,\n        message: '\"viewFilter\" must be a function, predicate object literal, a string indicating a model attribute, or falsy',\n        url: 'marionette.collectionview.html#defining-the-viewfilter'\n      });\n    },\n    // Override this function to provide custom\n    // viewFilter logic\n    getFilter: function getFilter() {\n      return this.viewFilter;\n    },\n    // Sets the view's `viewFilter` and applies the filter if the view is ready.\n    // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n    setFilter: function setFilter(filter) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          preventRender = _ref3.preventRender;\n\n      var filterChanged = this.viewFilter !== filter;\n      var shouldRender = filterChanged && !preventRender;\n      this.viewFilter = filter;\n\n      if (shouldRender) {\n        this.filter();\n      }\n\n      return this;\n    },\n    // Clears the `viewFilter` and follows the same rules for rendering as `setFilter`.\n    removeFilter: function removeFilter(options) {\n      return this.setFilter(null, options);\n    },\n    _detachChildren: function _detachChildren(detachingViews) {\n      _.each(detachingViews, this._detachChildView.bind(this));\n    },\n    _detachChildView: function _detachChildView(view) {\n      var shouldTriggerDetach = view._isAttached && this.monitorViewEvents !== false;\n\n      if (shouldTriggerDetach) {\n        view.triggerMethod('before:detach', view);\n      }\n\n      this.detachHtml(view);\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        view.triggerMethod('detach', view);\n      }\n\n      view._isShown = false;\n    },\n    // Override this method to change how the collectionView detaches a child view\n    detachHtml: function detachHtml(view) {\n      this.Dom.detachEl(view.el, view.$el);\n    },\n    _renderChildren: function _renderChildren() {\n      // If there are unrendered views prevent add to end perf\n      if (this._hasUnrenderedViews) {\n        delete this._addedViews;\n        delete this._hasUnrenderedViews;\n      }\n\n      var views = this._addedViews || this.children._views;\n      this.triggerMethod('before:render:children', this, views);\n\n      if (this.isEmpty()) {\n        this._showEmptyView();\n      } else {\n        this._destroyEmptyView();\n\n        var els = this._getBuffer(views);\n\n        this._attachChildren(els, views);\n      }\n\n      delete this._addedViews;\n      this.triggerMethod('render:children', this, views);\n    },\n    // Renders each view and creates a fragment buffer from them\n    _getBuffer: function _getBuffer(views) {\n      var _this3 = this;\n\n      var elBuffer = this.Dom.createBuffer();\n\n      _.each(views, function (view) {\n        renderView(view); // corresponds that view is shown in a Region or CollectionView\n\n        view._isShown = true;\n\n        _this3.Dom.appendContents(elBuffer, view.el, {\n          _$contents: view.$el\n        });\n      });\n\n      return elBuffer;\n    },\n    _attachChildren: function _attachChildren(els, views) {\n      var shouldTriggerAttach = this._isAttached && this.monitorViewEvents !== false;\n      views = shouldTriggerAttach ? views : [];\n\n      _.each(views, function (view) {\n        if (view._isAttached) {\n          return;\n        }\n\n        view.triggerMethod('before:attach', view);\n      });\n\n      this.attachHtml(els, this.$container);\n\n      _.each(views, function (view) {\n        if (view._isAttached) {\n          return;\n        }\n\n        view._isAttached = true;\n        view.triggerMethod('attach', view);\n      });\n    },\n    // Override this method to do something other than `.append`.\n    // You can attach any HTML at this point including the els.\n    attachHtml: function attachHtml(els, $container) {\n      this.Dom.appendContents($container[0], els, {\n        _$el: $container\n      });\n    },\n    isEmpty: function isEmpty() {\n      return !this.children.length;\n    },\n    _showEmptyView: function _showEmptyView() {\n      var EmptyView = this._getEmptyView();\n\n      if (!EmptyView) {\n        return;\n      }\n\n      var options = this._getEmptyViewOptions();\n\n      var emptyRegion = this.getEmptyRegion();\n      emptyRegion.show(new EmptyView(options));\n    },\n    // Retrieve the empty view class\n    _getEmptyView: function _getEmptyView() {\n      var emptyView = this.emptyView;\n\n      if (!emptyView) {\n        return;\n      }\n\n      return this._getView(emptyView);\n    },\n    // Remove the emptyView\n    _destroyEmptyView: function _destroyEmptyView() {\n      var emptyRegion = this.getEmptyRegion(); // Only empty if a view is show so the region\n      // doesn't detach any other unrelated HTML\n\n      if (emptyRegion.hasView()) {\n        emptyRegion.empty();\n      }\n    },\n    //\n    _getEmptyViewOptions: function _getEmptyViewOptions() {\n      var emptyViewOptions = this.emptyViewOptions || this.childViewOptions;\n\n      if (_.isFunction(emptyViewOptions)) {\n        return emptyViewOptions.call(this);\n      }\n\n      return emptyViewOptions;\n    },\n    swapChildViews: function swapChildViews(view1, view2) {\n      if (!this._children.hasView(view1) || !this._children.hasView(view2)) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: 'Both views must be children of the collection view to swap.',\n          url: 'marionette.collectionview.html#swapping-child-views'\n        });\n      }\n\n      this._children._swap(view1, view2);\n\n      this.Dom.swapEl(view1.el, view2.el); // If the views are not filtered the same, refilter\n\n      if (this.children.hasView(view1) !== this.children.hasView(view2)) {\n        this.filter();\n      } else {\n        this.children._swap(view1, view2);\n      }\n\n      return this;\n    },\n    // Render the child's view and add it to the HTML for the collection view at a given index, based on the current sort\n    addChildView: function addChildView(view, index) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!view || view._isDestroyed) {\n        return view;\n      }\n\n      if (view._isShown) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: 'View is already shown in a Region or CollectionView',\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      if (_.isObject(index)) {\n        options = index;\n      } // If options has defined index we should use it\n\n\n      if (options.index != null) {\n        index = options.index;\n      }\n\n      if (!this._isRendered) {\n        this.render();\n      }\n\n      this._addChild(view, index);\n\n      if (options.preventRender) {\n        this._hasUnrenderedViews = true;\n        return view;\n      }\n\n      var hasIndex = typeof index !== 'undefined';\n      var isAddedToEnd = !hasIndex || index >= this._children.length; // Only cache views if added to the end and there is no unrendered views\n\n      if (isAddedToEnd && !this._hasUnrenderedViews) {\n        this._addedViews = [view];\n      }\n\n      if (hasIndex) {\n        this._renderChildren();\n      } else {\n        this.sort();\n      }\n\n      return view;\n    },\n    // Detach a view from the children.  Best used when adding a\n    // childView from `addChildView`\n    detachChildView: function detachChildView(view) {\n      this.removeChildView(view, {\n        shouldDetach: true\n      });\n      return view;\n    },\n    // Remove the child view and destroy it.  Best used when adding a\n    // childView from `addChildView`\n    // The options argument is for internal use only\n    removeChildView: function removeChildView(view, options) {\n      if (!view) {\n        return view;\n      }\n\n      this._removeChildView(view, options);\n\n      this._removeChild(view);\n\n      if (this.isEmpty()) {\n        this._showEmptyView();\n      }\n\n      return view;\n    },\n    _removeChildViews: function _removeChildViews(views) {\n      _.each(views, this._removeChildView.bind(this));\n    },\n    _removeChildView: function _removeChildView(view) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          shouldDetach = _ref4.shouldDetach;\n\n      view.off('destroy', this.removeChildView, this);\n\n      if (shouldDetach) {\n        this._detachChildView(view);\n      } else {\n        this._destroyChildView(view);\n      }\n\n      this.stopListening(view);\n    },\n    _destroyChildView: function _destroyChildView(view) {\n      if (view._isDestroyed) {\n        return;\n      }\n\n      var shouldDisableEvents = this.monitorViewEvents === false;\n      destroyView(view, shouldDisableEvents);\n    },\n    // called by ViewMixin destroy\n    _removeChildren: function _removeChildren() {\n      this._destroyChildren();\n\n      var emptyRegion = this.getEmptyRegion();\n      emptyRegion.destroy();\n      delete this._addedViews;\n    },\n    // Destroy the child views that this collection view is holding on to, if any\n    _destroyChildren: function _destroyChildren() {\n      if (!this._children.length) {\n        return;\n      }\n\n      this.triggerMethod('before:destroy:children', this);\n\n      if (this.monitorViewEvents === false) {\n        this.Dom.detachContents(this.el, this.$el);\n      }\n\n      this._removeChildViews(this._children._views); // After all children have been destroyed re-init the container\n\n\n      this._children._init();\n\n      this.children._init();\n\n      this.triggerMethod('destroy:children', this);\n    }\n  }, {\n    setDomApi: setDomApi,\n    setRenderer: setRenderer\n  });\n\n  _.extend(CollectionView.prototype, ViewMixin); // Behavior\n\n\n  var ClassOptions$4 = ['collectionEvents', 'events', 'modelEvents', 'triggers', 'ui'];\n\n  var Behavior = function Behavior(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n\n    this._setOptions(options, ClassOptions$4);\n\n    this.cid = _.uniqueId(this.cidPrefix); // Construct an internal UI hash using the behaviors UI\n    // hash combined and overridden by the view UI hash.\n    // This allows the user to use UI hash elements defined\n    // in the parent view as well as those defined in the behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override\n    // a selector under an UI key.\n\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui')); // Proxy view triggers\n\n    this.listenTo(view, 'all', this.triggerMethod);\n    this.initialize.apply(this, arguments);\n  };\n\n  Behavior.extend = extend; // Behavior Methods\n  // --------------\n\n  _.extend(Behavior.prototype, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin, {\n    cidPrefix: 'mnb',\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {},\n    // proxy behavior $ method to the view\n    // this is useful for doing jquery DOM lookups\n    // scoped to behaviors view.\n    $: function $() {\n      return this.view.$.apply(this.view, arguments);\n    },\n    // Stops the behavior from listening to events.\n    destroy: function destroy() {\n      this.stopListening();\n\n      this.view._removeBehavior(this);\n\n      this._deleteEntityEventHandlers();\n\n      return this;\n    },\n    proxyViewProperties: function proxyViewProperties() {\n      this.$el = this.view.$el;\n      this.el = this.view.el;\n      return this;\n    },\n    bindUIElements: function bindUIElements() {\n      this._bindUIElements();\n\n      return this;\n    },\n    unbindUIElements: function unbindUIElements() {\n      this._unbindUIElements();\n\n      return this;\n    },\n    getUI: function getUI(name) {\n      return this._getUI(name);\n    },\n    // Handle `modelEvents`, and `collectionEvents` configuration\n    delegateEntityEvents: function delegateEntityEvents() {\n      this._delegateEntityEvents(this.view.model, this.view.collection);\n\n      return this;\n    },\n    undelegateEntityEvents: function undelegateEntityEvents() {\n      this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n      return this;\n    },\n    _getEvents: function _getEvents() {\n      var _this = this;\n\n      if (!this.events) {\n        return;\n      } // Normalize behavior events hash to allow\n      // a user to use the @ui. syntax.\n\n\n      var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events')); // binds the handler to the behavior and builds a unique eventName\n\n      return _.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n        if (!_.isFunction(behaviorHandler)) {\n          behaviorHandler = _this[behaviorHandler];\n        }\n\n        if (!behaviorHandler) {\n          return events;\n        }\n\n        key = getNamespacedEventName(key, _this.cid);\n        events[key] = behaviorHandler.bind(_this);\n        return events;\n      }, {});\n    },\n    // Internal method to build all trigger handlers for a given behavior\n    _getTriggers: function _getTriggers() {\n      if (!this.triggers) {\n        return;\n      } // Normalize behavior triggers hash to allow\n      // a user to use the @ui. syntax.\n\n\n      var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n      return this._getViewTriggers(this.view, behaviorTriggers);\n    }\n  }); // Application\n\n\n  var ClassOptions$5 = ['channelName', 'radioEvents', 'radioRequests', 'region', 'regionClass'];\n\n  var Application = function Application(options) {\n    this._setOptions(options, ClassOptions$5);\n\n    this.cid = _.uniqueId(this.cidPrefix);\n\n    this._initRegion();\n\n    this._initRadio();\n\n    this.initialize.apply(this, arguments);\n  };\n\n  Application.extend = extend; // Application Methods\n  // --------------\n\n  _.extend(Application.prototype, CommonMixin, DestroyMixin, RadioMixin, {\n    cidPrefix: 'mna',\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {},\n    // Kick off all of the application's processes.\n    start: function start(options) {\n      this.triggerMethod('before:start', this, options);\n      this.triggerMethod('start', this, options);\n      return this;\n    },\n    regionClass: Region,\n    _initRegion: function _initRegion() {\n      var region = this.region;\n\n      if (!region) {\n        return;\n      }\n\n      var defaults = {\n        regionClass: this.regionClass\n      };\n      this._region = buildRegion(region, defaults);\n    },\n    getRegion: function getRegion() {\n      return this._region;\n    },\n    showView: function showView(view) {\n      var region = this.getRegion();\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      region.show.apply(region, [view].concat(args));\n      return view;\n    },\n    getView: function getView() {\n      return this.getRegion().currentView;\n    }\n  });\n\n  var bindEvents$1 = proxy(bindEvents);\n  var unbindEvents$1 = proxy(unbindEvents);\n  var bindRequests$1 = proxy(bindRequests);\n  var unbindRequests$1 = proxy(unbindRequests);\n  var mergeOptions$1 = proxy(mergeOptions);\n  var getOption$1 = proxy(getOption);\n  var normalizeMethods$1 = proxy(normalizeMethods);\n  var triggerMethod$1 = proxy(triggerMethod); // Configuration\n\n  var setDomApi$1 = function setDomApi(mixin) {\n    CollectionView.setDomApi(mixin);\n    Region.setDomApi(mixin);\n    View.setDomApi(mixin);\n  };\n\n  var setRenderer$1 = function setRenderer(renderer) {\n    CollectionView.setRenderer(renderer);\n    View.setRenderer(renderer);\n  };\n\n  var backbone_marionette = {\n    View: View,\n    CollectionView: CollectionView,\n    MnObject: MarionetteObject,\n    Object: MarionetteObject,\n    Region: Region,\n    Behavior: Behavior,\n    Application: Application,\n    isEnabled: isEnabled,\n    setEnabled: setEnabled,\n    monitorViewEvents: monitorViewEvents,\n    Events: Events,\n    extend: extend,\n    DomApi: DomApi,\n    VERSION: version\n  };\n  exports.Application = Application;\n  exports.Behavior = Behavior;\n  exports.CollectionView = CollectionView;\n  exports.DomApi = DomApi;\n  exports.Events = Events;\n  exports.MnObject = MarionetteObject;\n  exports.Region = Region;\n  exports.VERSION = version;\n  exports.View = View;\n  exports.bindEvents = bindEvents$1;\n  exports.bindRequests = bindRequests$1;\n  exports.default = backbone_marionette;\n  exports.extend = extend;\n  exports.getOption = getOption$1;\n  exports.isEnabled = isEnabled;\n  exports.mergeOptions = mergeOptions$1;\n  exports.monitorViewEvents = monitorViewEvents;\n  exports.normalizeMethods = normalizeMethods$1;\n  exports.setDomApi = setDomApi$1;\n  exports.setEnabled = setEnabled;\n  exports.setRenderer = setRenderer$1;\n  exports.triggerMethod = triggerMethod$1;\n  exports.unbindEvents = unbindEvents$1;\n  exports.unbindRequests = unbindRequests$1;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n\nthis && this.Marionette && (this.Mn = this.Marionette);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n(function () {\n  // Baseline setup\n  // --------------\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self || typeof global == 'object' && global.global === global && global || this || {}; // Save the previous value of the `_` variable.\n\n  var previousUnderscore = root._; // Save bytes in the minified (but not gzipped) version:\n\n  var ArrayProto = Array.prototype,\n      ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null; // Create quick reference variables for speed access to core prototypes.\n\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty; // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create; // Naked function reference for surrogate-prototype-swapping.\n\n  var Ctor = function () {}; // Create a safe reference to the Underscore object for use below.\n\n\n  var _ = function (obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  }; // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n\n\n  if ( true && !exports.nodeType) {\n    if ( true && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n\n    exports._ = _;\n  } else {\n    root._ = _;\n  } // Current version.\n\n\n  _.VERSION = '1.9.1'; // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n\n  var optimizeCb = function (func, context, argCount) {\n    if (context === void 0) return func;\n\n    switch (argCount == null ? 3 : argCount) {\n      case 1:\n        return function (value) {\n          return func.call(context, value);\n        };\n      // The 2-argument case is omitted because we’re not using it.\n\n      case 3:\n        return function (value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n\n      case 4:\n        return function (accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n    }\n\n    return function () {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee; // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n\n  var cb = function (value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  }; // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n\n\n  _.iteratee = builtinIteratee = function (value, context) {\n    return cb(value, context, Infinity);\n  }; // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n\n\n  var restArguments = function (func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function () {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n\n      switch (startIndex) {\n        case 0:\n          return func.call(this, rest);\n\n        case 1:\n          return func.call(this, arguments[0], rest);\n\n        case 2:\n          return func.call(this, arguments[0], arguments[1], rest);\n      }\n\n      var args = Array(startIndex + 1);\n\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  }; // An internal function for creating a new object that inherits from another.\n\n\n  var baseCreate = function (prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor();\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function (key) {\n    return function (obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function (obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  };\n\n  var deepGet = function (obj, path) {\n    var length = path.length;\n\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n\n    return length ? obj : void 0;\n  }; // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n\n\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n\n  var isArrayLike = function (collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  }; // Collection Functions\n  // --------------------\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n\n\n  _.each = _.forEach = function (obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n\n    return obj;\n  }; // Return the results of applying the iteratee to each element.\n\n\n  _.map = _.collect = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n\n    return results;\n  }; // Create a reducing function iterating left or right.\n\n\n  var createReduce = function (dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function (obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n\n      return memo;\n    };\n\n    return function (obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  }; // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n\n\n  _.reduce = _.foldl = _.inject = createReduce(1); // The right-associative version of reduce, also known as `foldr`.\n\n  _.reduceRight = _.foldr = createReduce(-1); // Return the first value which passes a truth test. Aliased as `detect`.\n\n  _.find = _.detect = function (obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  }; // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n\n\n  _.filter = _.select = function (obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n\n    _.each(obj, function (value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n\n    return results;\n  }; // Return all the elements for which a truth test fails.\n\n\n  _.reject = function (obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  }; // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n\n\n  _.every = _.all = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n\n    return true;\n  }; // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n\n\n  _.some = _.any = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n\n    return false;\n  }; // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n\n\n  _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  }; // Invoke a method (with arguments) on every item in a collection.\n\n\n  _.invoke = restArguments(function (obj, path, args) {\n    var contextPath, func;\n\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n\n    return _.map(obj, function (context) {\n      var method = func;\n\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n\n        if (context == null) return void 0;\n        method = context[path];\n      }\n\n      return method == null ? method : method.apply(context, args);\n    });\n  }); // Convenience version of a common use case of `map`: fetching a property.\n\n  _.pluck = function (obj, key) {\n    return _.map(obj, _.property(key));\n  }; // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n\n\n  _.where = function (obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  }; // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n\n\n  _.findWhere = function (obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  }; // Return the maximum element (or element-based computation).\n\n\n  _.max = function (obj, iteratee, context) {\n    var result = -Infinity,\n        lastComputed = -Infinity,\n        value,\n        computed;\n\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n\n      _.each(obj, function (v, index, list) {\n        computed = iteratee(v, index, list);\n\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n\n    return result;\n  }; // Return the minimum element (or element-based computation).\n\n\n  _.min = function (obj, iteratee, context) {\n    var result = Infinity,\n        lastComputed = Infinity,\n        value,\n        computed;\n\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n\n      _.each(obj, function (v, index, list) {\n        computed = iteratee(v, index, list);\n\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n\n    return result;\n  }; // Shuffle a collection.\n\n\n  _.shuffle = function (obj) {\n    return _.sample(obj, Infinity);\n  }; // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n\n\n  _.sample = function (obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n\n    return sample.slice(0, n);\n  }; // Sort the object's values by a criterion produced by an iteratee.\n\n\n  _.sortBy = function (obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function (value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function (left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n\n      return left.index - right.index;\n    }), 'value');\n  }; // An internal function used for aggregate \"group by\" operations.\n\n\n  var group = function (behavior, partition) {\n    return function (obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n\n      _.each(obj, function (value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n\n      return result;\n    };\n  }; // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n\n\n  _.groupBy = group(function (result, value, key) {\n    if (has(result, key)) result[key].push(value);else result[key] = [value];\n  }); // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n\n  _.indexBy = group(function (result, value, key) {\n    result[key] = value;\n  }); // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n\n  _.countBy = group(function (result, value, key) {\n    if (has(result, key)) result[key]++;else result[key] = 1;\n  });\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g; // Safely create a real, live array from anything iterable.\n\n  _.toArray = function (obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  }; // Return the number of elements in an object.\n\n\n  _.size = function (obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  }; // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n\n\n  _.partition = group(function (result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true); // Array Functions\n  // ---------------\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n\n  _.first = _.head = _.take = function (array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  }; // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n\n\n  _.initial = function (array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  }; // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n\n\n  _.last = function (array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  }; // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n\n\n  _.rest = _.tail = _.drop = function (array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  }; // Trim out all falsy values from an array.\n\n\n  _.compact = function (array) {\n    return _.filter(array, Boolean);\n  }; // Internal implementation of a recursive `flatten` function.\n\n\n  var flatten = function (input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0,\n              len = value.length;\n\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n\n    return output;\n  }; // Flatten out an array, either recursively (by default), or just one level.\n\n\n  _.flatten = function (array, shallow) {\n    return flatten(array, shallow, false);\n  }; // Return a version of the array that does not contain the specified value(s).\n\n\n  _.without = restArguments(function (array, otherArrays) {\n    return _.difference(array, otherArrays);\n  }); // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n\n  _.uniq = _.unique = function (array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n\n    return result;\n  }; // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n\n\n  _.union = restArguments(function (arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  }); // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n\n  _.intersection = function (array) {\n    var result = [];\n    var argsLength = arguments.length;\n\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n\n      if (j === argsLength) result.push(item);\n    }\n\n    return result;\n  }; // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n\n\n  _.difference = restArguments(function (array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function (value) {\n      return !_.contains(rest, value);\n    });\n  }); // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n\n  _.unzip = function (array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n\n    return result;\n  }; // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n\n\n  _.zip = restArguments(_.unzip); // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n\n  _.object = function (list, values) {\n    var result = {};\n\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n\n    return result;\n  }; // Generator function to create the findIndex and findLastIndex functions.\n\n\n  var createPredicateIndexFinder = function (dir) {\n    return function (array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n\n      return -1;\n    };\n  }; // Returns the first index on an array-like that passes a predicate test.\n\n\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1); // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n\n  _.sortedIndex = function (array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0,\n        high = getLength(array);\n\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;\n    }\n\n    return low;\n  }; // Generator function to create the indexOf and lastIndexOf functions.\n\n\n  var createIndexFinder = function (dir, predicateFind, sortedIndex) {\n    return function (array, item, idx) {\n      var i = 0,\n          length = getLength(array);\n\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n\n      return -1;\n    };\n  }; // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n\n\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex); // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n\n  _.range = function (start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  }; // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n\n\n  _.chunk = function (array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0,\n        length = array.length;\n\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n\n    return result;\n  }; // Function (ahem) Functions\n  // ------------------\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n\n\n  var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  }; // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n\n\n  _.bind = restArguments(function (func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function (callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  }); // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n\n  _.partial = restArguments(function (func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n\n    var bound = function () {\n      var position = 0,\n          length = boundArgs.length;\n      var args = Array(length);\n\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n\n      while (position < arguments.length) args.push(arguments[position++]);\n\n      return executeBound(func, bound, this, this, args);\n    };\n\n    return bound;\n  });\n  _.partial.placeholder = _; // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n\n  _.bindAll = restArguments(function (obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  }); // Memoize an expensive function by storing its results.\n\n  _.memoize = function (func, hasher) {\n    var memoize = function (key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n\n    memoize.cache = {};\n    return memoize;\n  }; // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n\n\n  _.delay = restArguments(function (func, wait, args) {\n    return setTimeout(function () {\n      return func.apply(null, args);\n    }, wait);\n  }); // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n\n  _.defer = _.partial(_.delay, _, 1); // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n\n  _.throttle = function (func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function () {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function () {\n      var now = _.now();\n\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    };\n\n    throttled.cancel = function () {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }; // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n\n\n  _.debounce = function (func, wait, immediate) {\n    var timeout, result;\n\n    var later = function (context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function (args) {\n      if (timeout) clearTimeout(timeout);\n\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function () {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  }; // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n\n\n  _.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n  }; // Returns a negated version of the passed-in predicate.\n\n\n  _.negate = function (predicate) {\n    return function () {\n      return !predicate.apply(this, arguments);\n    };\n  }; // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n\n\n  _.compose = function () {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n\n      while (i--) result = args[i].call(this, result);\n\n      return result;\n    };\n  }; // Returns a function that will only be executed on and after the Nth call.\n\n\n  _.after = function (times, func) {\n    return function () {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }; // Returns a function that will only be executed up to (but not including) the Nth call.\n\n\n  _.before = function (times, func) {\n    var memo;\n    return function () {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n\n      if (times <= 1) func = null;\n      return memo;\n    };\n  }; // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n\n\n  _.once = _.partial(_.before, 2);\n  _.restArguments = restArguments; // Object Functions\n  // ----------------\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n\n  var hasEnumBug = !{\n    toString: null\n  }.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function (obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.\n\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }; // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n\n\n  _.keys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n\n    for (var key in obj) if (has(obj, key)) keys.push(key); // Ahem, IE < 9.\n\n\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }; // Retrieve all the property names of an object.\n\n\n  _.allKeys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n\n    for (var key in obj) keys.push(key); // Ahem, IE < 9.\n\n\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }; // Retrieve the values of an object's properties.\n\n\n  _.values = function (obj) {\n    var keys = _.keys(obj);\n\n    var length = keys.length;\n    var values = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n\n    return values;\n  }; // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n\n\n  _.mapObject = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n\n    return results;\n  }; // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n\n\n  _.pairs = function (obj) {\n    var keys = _.keys(obj);\n\n    var length = keys.length;\n    var pairs = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n\n    return pairs;\n  }; // Invert the keys and values of an object. The values must be serializable.\n\n\n  _.invert = function (obj) {\n    var result = {};\n\n    var keys = _.keys(obj);\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n\n    return result;\n  }; // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n\n\n  _.functions = _.methods = function (obj) {\n    var names = [];\n\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n\n    return names.sort();\n  }; // An internal function for creating assigner functions.\n\n\n  var createAssigner = function (keysFunc, defaults) {\n    return function (obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n\n      return obj;\n    };\n  }; // Extend a given object with all the properties in passed-in object(s).\n\n\n  _.extend = createAssigner(_.allKeys); // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n  _.extendOwn = _.assign = createAssigner(_.keys); // Returns the first key on an object that passes a predicate test.\n\n  _.findKey = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var keys = _.keys(obj),\n        key;\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  }; // Internal pick helper function to determine if `obj` has key `key`.\n\n\n  var keyInObj = function (value, key, obj) {\n    return key in obj;\n  }; // Return a copy of the object only containing the whitelisted properties.\n\n\n  _.pick = restArguments(function (obj, keys) {\n    var result = {},\n        iteratee = keys[0];\n    if (obj == null) return result;\n\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n\n    return result;\n  }); // Return a copy of the object without the blacklisted properties.\n\n  _.omit = restArguments(function (obj, keys) {\n    var iteratee = keys[0],\n        context;\n\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n\n      iteratee = function (value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n\n    return _.pick(obj, iteratee, context);\n  }); // Fill in a given object with default properties.\n\n  _.defaults = createAssigner(_.allKeys, true); // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n\n  _.create = function (prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  }; // Create a (shallow-cloned) duplicate of an object.\n\n\n  _.clone = function (obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  }; // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n\n\n  _.tap = function (obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  }; // Returns whether an object has a given set of `key:value` pairs.\n\n\n  _.isMatch = function (object, attrs) {\n    var keys = _.keys(attrs),\n        length = keys.length;\n\n    if (object == null) return !length;\n    var obj = Object(object);\n\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n\n    return true;\n  }; // Internal recursive comparison function for `isEqual`.\n\n\n  var eq, deepEq;\n\n  eq = function (a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n    if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n    if (a !== a) return b !== b; // Exhaust primitive checks\n\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  }; // Internal recursive comparison function for `isEqual`.\n\n\n  deepEq = function (a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.\n\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n\n      var aCtor = a.constructor,\n          bCtor = b.constructor;\n\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n        return false;\n      }\n    } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n\n\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    } // Add the first object to the stack of traversed objects.\n\n\n    aStack.push(a);\n    bStack.push(b); // Recursively compare objects and arrays.\n\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a),\n          key;\n\n      length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n      if (_.keys(b).length !== length) return false;\n\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    } // Remove the first object from the stack of traversed objects.\n\n\n    aStack.pop();\n    bStack.pop();\n    return true;\n  }; // Perform a deep comparison to check if two objects are equal.\n\n\n  _.isEqual = function (a, b) {\n    return eq(a, b);\n  }; // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n\n\n  _.isEmpty = function (obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  }; // Is a given value a DOM element?\n\n\n  _.isElement = function (obj) {\n    return !!(obj && obj.nodeType === 1);\n  }; // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n\n\n  _.isArray = nativeIsArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n  }; // Is a given variable an object?\n\n\n  _.isObject = function (obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }; // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n\n\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function (name) {\n    _['is' + name] = function (obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  }); // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n\n\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function (obj) {\n      return has(obj, 'callee');\n    };\n  } // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n\n\n  var nodelist = root.document && root.document.childNodes;\n\n  if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function (obj) {\n      return typeof obj == 'function' || false;\n    };\n  } // Is a given object a finite number?\n\n\n  _.isFinite = function (obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  }; // Is the given value `NaN`?\n\n\n  _.isNaN = function (obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  }; // Is a given value a boolean?\n\n\n  _.isBoolean = function (obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  }; // Is a given value equal to null?\n\n\n  _.isNull = function (obj) {\n    return obj === null;\n  }; // Is a given variable undefined?\n\n\n  _.isUndefined = function (obj) {\n    return obj === void 0;\n  }; // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n\n\n  _.has = function (obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n\n    var length = path.length;\n\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n\n      obj = obj[key];\n    }\n\n    return !!length;\n  }; // Utility Functions\n  // -----------------\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n\n\n  _.noConflict = function () {\n    root._ = previousUnderscore;\n    return this;\n  }; // Keep the identity function around for default iteratees.\n\n\n  _.identity = function (value) {\n    return value;\n  }; // Predicate-generating functions. Often useful outside of Underscore.\n\n\n  _.constant = function (value) {\n    return function () {\n      return value;\n    };\n  };\n\n  _.noop = function () {}; // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n\n\n  _.property = function (path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n\n    return function (obj) {\n      return deepGet(obj, path);\n    };\n  }; // Generates a function for a given object that returns a given property.\n\n\n  _.propertyOf = function (obj) {\n    if (obj == null) {\n      return function () {};\n    }\n\n    return function (path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  }; // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n\n\n  _.matcher = _.matches = function (attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function (obj) {\n      return _.isMatch(obj, attrs);\n    };\n  }; // Run a function **n** times.\n\n\n  _.times = function (n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n\n    return accum;\n  }; // Return a random integer between min and max (inclusive).\n\n\n  _.random = function (min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    return min + Math.floor(Math.random() * (max - min + 1));\n  }; // A (possibly faster) way to get the current timestamp as an integer.\n\n\n  _.now = Date.now || function () {\n    return new Date().getTime();\n  }; // List of HTML entities for escaping.\n\n\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n\n  var unescapeMap = _.invert(escapeMap); // Functions for escaping and unescaping strings to/from HTML interpolation.\n\n\n  var createEscaper = function (map) {\n    var escaper = function (match) {\n      return map[match];\n    }; // Regexes for identifying a key that needs to be escaped.\n\n\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function (string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap); // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n\n  _.result = function (obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n\n    return obj;\n  }; // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n\n\n  var idCounter = 0;\n\n  _.uniqueId = function (prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  }; // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n\n\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  }; // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n\n  var noMatch = /(.)^/; // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function (match) {\n    return '\\\\' + escapes[match];\n  }; // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n\n\n  _.template = function (text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings); // Combine delimiters into one regular expression via alternation.\n\n    var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g'); // Compile the template source, escaping string literals appropriately.\n\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      } // Adobe VMs need the match returned to produce the correct offset.\n\n\n      return match;\n    });\n    source += \"';\\n\"; // If a variable is not specified, place data values in local scope.\n\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n    source = \"var __t,__p='',__j=Array.prototype.join,\" + \"print=function(){__p+=__j.call(arguments,'');};\\n\" + source + 'return __p;\\n';\n    var render;\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function (data) {\n      return render.call(this, data, _);\n    }; // Provide the compiled source as a convenience for precompilation.\n\n\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n    return template;\n  }; // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n\n\n  _.chain = function (obj) {\n    var instance = _(obj);\n\n    instance._chain = true;\n    return instance;\n  }; // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  // Helper function to continue chaining intermediate results.\n\n\n  var chainResult = function (instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  }; // Add your own custom functions to the Underscore object.\n\n\n  _.mixin = function (obj) {\n    _.each(_.functions(obj), function (name) {\n      var func = _[name] = obj[name];\n\n      _.prototype[name] = function () {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n\n    return _;\n  }; // Add all of the Underscore functions to the wrapper object.\n\n\n  _.mixin(_); // Add all mutator Array functions to the wrapper.\n\n\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n    var method = ArrayProto[name];\n\n    _.prototype[name] = function () {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  }); // Add all accessor Array functions to the wrapper.\n\n\n  _.each(['concat', 'join', 'slice'], function (name) {\n    var method = ArrayProto[name];\n\n    _.prototype[name] = function () {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  }); // Extracts the result from a wrapped and chained object.\n\n\n  _.prototype.value = function () {\n    return this._wrapped;\n  }; // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n\n\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function () {\n    return String(this._wrapped);\n  }; // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return _;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(44), __webpack_require__(45)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUuanM/NDQ5OCJdLCJuYW1lcyI6WyJyb290Iiwic2VsZiIsImdsb2JhbCIsInByZXZpb3VzVW5kZXJzY29yZSIsIl8iLCJBcnJheVByb3RvIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJPYmpQcm90byIsIk9iamVjdCIsIlN5bWJvbFByb3RvIiwiU3ltYm9sIiwicHVzaCIsInNsaWNlIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdGl2ZUlzQXJyYXkiLCJpc0FycmF5IiwibmF0aXZlS2V5cyIsImtleXMiLCJuYXRpdmVDcmVhdGUiLCJjcmVhdGUiLCJDdG9yIiwib2JqIiwiX3dyYXBwZWQiLCJleHBvcnRzIiwibm9kZVR5cGUiLCJtb2R1bGUiLCJWRVJTSU9OIiwib3B0aW1pemVDYiIsImZ1bmMiLCJjb250ZXh0IiwiYXJnQ291bnQiLCJ2YWx1ZSIsImNhbGwiLCJpbmRleCIsImNvbGxlY3Rpb24iLCJhY2N1bXVsYXRvciIsImFwcGx5IiwiYXJndW1lbnRzIiwiYnVpbHRpbkl0ZXJhdGVlIiwiY2IiLCJpdGVyYXRlZSIsImlkZW50aXR5IiwiaXNGdW5jdGlvbiIsImlzT2JqZWN0IiwibWF0Y2hlciIsInByb3BlcnR5IiwiSW5maW5pdHkiLCJyZXN0QXJndW1lbnRzIiwic3RhcnRJbmRleCIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJyZXN0IiwiYXJncyIsImJhc2VDcmVhdGUiLCJyZXN1bHQiLCJzaGFsbG93UHJvcGVydHkiLCJrZXkiLCJoYXMiLCJwYXRoIiwiZGVlcEdldCIsImkiLCJNQVhfQVJSQVlfSU5ERVgiLCJwb3ciLCJnZXRMZW5ndGgiLCJpc0FycmF5TGlrZSIsImVhY2giLCJmb3JFYWNoIiwibWFwIiwiY29sbGVjdCIsInJlc3VsdHMiLCJjdXJyZW50S2V5IiwiY3JlYXRlUmVkdWNlIiwiZGlyIiwicmVkdWNlciIsIm1lbW8iLCJpbml0aWFsIiwicmVkdWNlIiwiZm9sZGwiLCJpbmplY3QiLCJyZWR1Y2VSaWdodCIsImZvbGRyIiwiZmluZCIsImRldGVjdCIsInByZWRpY2F0ZSIsImtleUZpbmRlciIsImZpbmRJbmRleCIsImZpbmRLZXkiLCJmaWx0ZXIiLCJzZWxlY3QiLCJsaXN0IiwicmVqZWN0IiwibmVnYXRlIiwiZXZlcnkiLCJhbGwiLCJzb21lIiwiYW55IiwiY29udGFpbnMiLCJpbmNsdWRlcyIsImluY2x1ZGUiLCJpdGVtIiwiZnJvbUluZGV4IiwiZ3VhcmQiLCJ2YWx1ZXMiLCJpbmRleE9mIiwiaW52b2tlIiwiY29udGV4dFBhdGgiLCJtZXRob2QiLCJwbHVjayIsIndoZXJlIiwiYXR0cnMiLCJmaW5kV2hlcmUiLCJsYXN0Q29tcHV0ZWQiLCJjb21wdXRlZCIsInYiLCJtaW4iLCJzaHVmZmxlIiwic2FtcGxlIiwibiIsInJhbmRvbSIsImNsb25lIiwibGFzdCIsInJhbmQiLCJ0ZW1wIiwic29ydEJ5IiwiY3JpdGVyaWEiLCJzb3J0IiwibGVmdCIsInJpZ2h0IiwiYSIsImIiLCJncm91cCIsImJlaGF2aW9yIiwicGFydGl0aW9uIiwiZ3JvdXBCeSIsImluZGV4QnkiLCJjb3VudEJ5IiwicmVTdHJTeW1ib2wiLCJ0b0FycmF5IiwiaXNTdHJpbmciLCJtYXRjaCIsInNpemUiLCJwYXNzIiwiZmlyc3QiLCJoZWFkIiwidGFrZSIsImFycmF5IiwidGFpbCIsImRyb3AiLCJjb21wYWN0IiwiQm9vbGVhbiIsImZsYXR0ZW4iLCJpbnB1dCIsInNoYWxsb3ciLCJzdHJpY3QiLCJvdXRwdXQiLCJpZHgiLCJpc0FyZ3VtZW50cyIsImoiLCJsZW4iLCJ3aXRob3V0Iiwib3RoZXJBcnJheXMiLCJkaWZmZXJlbmNlIiwidW5pcSIsInVuaXF1ZSIsImlzU29ydGVkIiwiaXNCb29sZWFuIiwic2VlbiIsInVuaW9uIiwiYXJyYXlzIiwiaW50ZXJzZWN0aW9uIiwiYXJnc0xlbmd0aCIsInVuemlwIiwiemlwIiwib2JqZWN0IiwiY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIiLCJmaW5kTGFzdEluZGV4Iiwic29ydGVkSW5kZXgiLCJsb3ciLCJoaWdoIiwibWlkIiwiZmxvb3IiLCJjcmVhdGVJbmRleEZpbmRlciIsInByZWRpY2F0ZUZpbmQiLCJpc05hTiIsImxhc3RJbmRleE9mIiwicmFuZ2UiLCJzdGFydCIsInN0b3AiLCJzdGVwIiwiY2VpbCIsImNodW5rIiwiY291bnQiLCJleGVjdXRlQm91bmQiLCJzb3VyY2VGdW5jIiwiYm91bmRGdW5jIiwiY2FsbGluZ0NvbnRleHQiLCJiaW5kIiwiVHlwZUVycm9yIiwiYm91bmQiLCJjYWxsQXJncyIsImNvbmNhdCIsInBhcnRpYWwiLCJib3VuZEFyZ3MiLCJwbGFjZWhvbGRlciIsInBvc2l0aW9uIiwiYmluZEFsbCIsIkVycm9yIiwibWVtb2l6ZSIsImhhc2hlciIsImNhY2hlIiwiYWRkcmVzcyIsImRlbGF5Iiwid2FpdCIsInNldFRpbWVvdXQiLCJkZWZlciIsInRocm90dGxlIiwib3B0aW9ucyIsInRpbWVvdXQiLCJwcmV2aW91cyIsImxhdGVyIiwibGVhZGluZyIsIm5vdyIsInRocm90dGxlZCIsInJlbWFpbmluZyIsImNsZWFyVGltZW91dCIsInRyYWlsaW5nIiwiY2FuY2VsIiwiZGVib3VuY2UiLCJpbW1lZGlhdGUiLCJkZWJvdW5jZWQiLCJjYWxsTm93Iiwid3JhcCIsIndyYXBwZXIiLCJjb21wb3NlIiwiYWZ0ZXIiLCJ0aW1lcyIsImJlZm9yZSIsIm9uY2UiLCJoYXNFbnVtQnVnIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJub25FbnVtZXJhYmxlUHJvcHMiLCJjb2xsZWN0Tm9uRW51bVByb3BzIiwibm9uRW51bUlkeCIsImNvbnN0cnVjdG9yIiwicHJvdG8iLCJwcm9wIiwiYWxsS2V5cyIsIm1hcE9iamVjdCIsInBhaXJzIiwiaW52ZXJ0IiwiZnVuY3Rpb25zIiwibWV0aG9kcyIsIm5hbWVzIiwiY3JlYXRlQXNzaWduZXIiLCJrZXlzRnVuYyIsImRlZmF1bHRzIiwic291cmNlIiwibCIsImV4dGVuZCIsImV4dGVuZE93biIsImFzc2lnbiIsImtleUluT2JqIiwicGljayIsIm9taXQiLCJTdHJpbmciLCJwcm9wcyIsInRhcCIsImludGVyY2VwdG9yIiwiaXNNYXRjaCIsImVxIiwiZGVlcEVxIiwiYVN0YWNrIiwiYlN0YWNrIiwidHlwZSIsImNsYXNzTmFtZSIsInZhbHVlT2YiLCJhcmVBcnJheXMiLCJhQ3RvciIsImJDdG9yIiwicG9wIiwiaXNFcXVhbCIsImlzRW1wdHkiLCJpc0VsZW1lbnQiLCJuYW1lIiwibm9kZWxpc3QiLCJkb2N1bWVudCIsImNoaWxkTm9kZXMiLCJJbnQ4QXJyYXkiLCJpc0Zpbml0ZSIsImlzU3ltYm9sIiwicGFyc2VGbG9hdCIsImlzTnVtYmVyIiwiaXNOdWxsIiwiaXNVbmRlZmluZWQiLCJub0NvbmZsaWN0IiwiY29uc3RhbnQiLCJub29wIiwicHJvcGVydHlPZiIsIm1hdGNoZXMiLCJhY2N1bSIsIkRhdGUiLCJnZXRUaW1lIiwiZXNjYXBlTWFwIiwidW5lc2NhcGVNYXAiLCJjcmVhdGVFc2NhcGVyIiwiZXNjYXBlciIsImpvaW4iLCJ0ZXN0UmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZVJlZ2V4cCIsInN0cmluZyIsInRlc3QiLCJyZXBsYWNlIiwiZXNjYXBlIiwidW5lc2NhcGUiLCJmYWxsYmFjayIsImlkQ291bnRlciIsInVuaXF1ZUlkIiwicHJlZml4IiwiaWQiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiZXNjYXBlUmVnRXhwIiwiZXNjYXBlQ2hhciIsInRlbXBsYXRlIiwidGV4dCIsInNldHRpbmdzIiwib2xkU2V0dGluZ3MiLCJvZmZzZXQiLCJ2YXJpYWJsZSIsInJlbmRlciIsIkZ1bmN0aW9uIiwiZSIsImRhdGEiLCJhcmd1bWVudCIsImNoYWluIiwiaW5zdGFuY2UiLCJfY2hhaW4iLCJjaGFpblJlc3VsdCIsIm1peGluIiwidG9KU09OIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7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QUFsQixFQUE0QmUsU0FBNUIsQ0FBUCxDQUFsQjtBQUNELEtBRkQ7QUFHRCxHQUxELEVBdG5EVSxDQTZuRFY7OztBQUNBbkMsR0FBQyxDQUFDRyxTQUFGLENBQVkwQixLQUFaLEdBQW9CLFlBQVc7QUFDN0IsV0FBTyxLQUFLVCxRQUFaO0FBQ0QsR0FGRCxDQTluRFUsQ0Frb0RWO0FBQ0E7OztBQUNBcEIsR0FBQyxDQUFDRyxTQUFGLENBQVkrUSxPQUFaLEdBQXNCbFIsQ0FBQyxDQUFDRyxTQUFGLENBQVltVixNQUFaLEdBQXFCdFYsQ0FBQyxDQUFDRyxTQUFGLENBQVkwQixLQUF2RDs7QUFFQTdCLEdBQUMsQ0FBQ0csU0FBRixDQUFZTyxRQUFaLEdBQXVCLFlBQVc7QUFDaEMsV0FBTzZQLE1BQU0sQ0FBQyxLQUFLblAsUUFBTixDQUFiO0FBQ0QsR0FGRCxDQXRvRFUsQ0Ewb0RWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFJLElBQUosRUFBK0M7QUFDN0NtVSxxQ0FBcUIsRUFBZixtQ0FBbUIsWUFBVztBQUNsQyxhQUFPdlYsQ0FBUDtBQUNELEtBRks7QUFBQSxvR0FBTjtBQUdEO0FBQ0YsQ0F0cERBLEdBQUQsQyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgIFVuZGVyc2NvcmUuanMgMS45LjFcbi8vICAgICBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuLy8gICAgIChjKSAyMDA5LTIwMTggSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLy8gQmFzZWxpbmUgc2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCAoYHNlbGZgKSBpbiB0aGUgYnJvd3NlciwgYGdsb2JhbGBcbiAgLy8gb24gdGhlIHNlcnZlciwgb3IgYHRoaXNgIGluIHNvbWUgdmlydHVhbCBtYWNoaW5lcy4gV2UgdXNlIGBzZWxmYFxuICAvLyBpbnN0ZWFkIG9mIGB3aW5kb3dgIGZvciBgV2ViV29ya2VyYCBzdXBwb3J0LlxuICB2YXIgcm9vdCA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYuc2VsZiA9PT0gc2VsZiAmJiBzZWxmIHx8XG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbC5nbG9iYWwgPT09IGdsb2JhbCAmJiBnbG9iYWwgfHxcbiAgICAgICAgICAgIHRoaXMgfHxcbiAgICAgICAgICAgIHt9O1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIFN5bWJvbFByb3RvID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2wucHJvdG90eXBlIDogbnVsbDtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyIHB1c2ggPSBBcnJheVByb3RvLnB1c2gsXG4gICAgICBzbGljZSA9IEFycmF5UHJvdG8uc2xpY2UsXG4gICAgICB0b1N0cmluZyA9IE9ialByb3RvLnRvU3RyaW5nLFxuICAgICAgaGFzT3duUHJvcGVydHkgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhciBuYXRpdmVJc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICAgIG5hdGl2ZUtleXMgPSBPYmplY3Qua2V5cyxcbiAgICAgIG5hdGl2ZUNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZWlyIG9sZCBtb2R1bGUgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIC8vIChgbm9kZVR5cGVgIGlzIGNoZWNrZWQgdG8gZW5zdXJlIHRoYXQgYG1vZHVsZWBcbiAgLy8gYW5kIGBleHBvcnRzYCBhcmUgbm90IEhUTUwgZWxlbWVudHMuKVxuICBpZiAodHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgIWV4cG9ydHMubm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfO1xuICAgIH1cbiAgICBleHBvcnRzLl8gPSBfO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuXyA9IF87XG4gIH1cblxuICAvLyBDdXJyZW50IHZlcnNpb24uXG4gIF8uVkVSU0lPTiA9ICcxLjkuMSc7XG5cbiAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGVmZmljaWVudCAoZm9yIGN1cnJlbnQgZW5naW5lcykgdmVyc2lvblxuICAvLyBvZiB0aGUgcGFzc2VkLWluIGNhbGxiYWNrLCB0byBiZSByZXBlYXRlZGx5IGFwcGxpZWQgaW4gb3RoZXIgVW5kZXJzY29yZVxuICAvLyBmdW5jdGlvbnMuXG4gIHZhciBvcHRpbWl6ZUNiID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSByZXR1cm4gZnVuYztcbiAgICBzd2l0Y2ggKGFyZ0NvdW50ID09IG51bGwgPyAzIDogYXJnQ291bnQpIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIC8vIFRoZSAyLWFyZ3VtZW50IGNhc2UgaXMgb21pdHRlZCBiZWNhdXNlIHdl4oCZcmUgbm90IHVzaW5nIGl0LlxuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGJ1aWx0aW5JdGVyYXRlZTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBlYWNoXG4gIC8vIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXIgYGlkZW50aXR5YCxcbiAgLy8gYW4gYXJiaXRyYXJ5IGNhbGxiYWNrLCBhIHByb3BlcnR5IG1hdGNoZXIsIG9yIGEgcHJvcGVydHkgYWNjZXNzb3IuXG4gIHZhciBjYiA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChfLml0ZXJhdGVlICE9PSBidWlsdGluSXRlcmF0ZWUpIHJldHVybiBfLml0ZXJhdGVlKHZhbHVlLCBjb250ZXh0KTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpICYmICFfLmlzQXJyYXkodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG5cbiAgLy8gRXh0ZXJuYWwgd3JhcHBlciBmb3Igb3VyIGNhbGxiYWNrIGdlbmVyYXRvci4gVXNlcnMgbWF5IGN1c3RvbWl6ZVxuICAvLyBgXy5pdGVyYXRlZWAgaWYgdGhleSB3YW50IGFkZGl0aW9uYWwgcHJlZGljYXRlL2l0ZXJhdGVlIHNob3J0aGFuZCBzdHlsZXMuXG4gIC8vIFRoaXMgYWJzdHJhY3Rpb24gaGlkZXMgdGhlIGludGVybmFsLW9ubHkgYXJnQ291bnQgYXJndW1lbnQuXG4gIF8uaXRlcmF0ZWUgPSBidWlsdGluSXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIFNvbWUgZnVuY3Rpb25zIHRha2UgYSB2YXJpYWJsZSBudW1iZXIgb2YgYXJndW1lbnRzLCBvciBhIGZldyBleHBlY3RlZFxuICAvLyBhcmd1bWVudHMgYXQgdGhlIGJlZ2lubmluZyBhbmQgdGhlbiBhIHZhcmlhYmxlIG51bWJlciBvZiB2YWx1ZXMgdG8gb3BlcmF0ZVxuICAvLyBvbi4gVGhpcyBoZWxwZXIgYWNjdW11bGF0ZXMgYWxsIHJlbWFpbmluZyBhcmd1bWVudHMgcGFzdCB0aGUgZnVuY3Rpb27igJlzXG4gIC8vIGFyZ3VtZW50IGxlbmd0aCAob3IgYW4gZXhwbGljaXQgYHN0YXJ0SW5kZXhgKSwgaW50byBhbiBhcnJheSB0aGF0IGJlY29tZXNcbiAgLy8gdGhlIGxhc3QgYXJndW1lbnQuIFNpbWlsYXIgdG8gRVM24oCZcyBcInJlc3QgcGFyYW1ldGVyXCIuXG4gIHZhciByZXN0QXJndW1lbnRzID0gZnVuY3Rpb24oZnVuYywgc3RhcnRJbmRleCkge1xuICAgIHN0YXJ0SW5kZXggPSBzdGFydEluZGV4ID09IG51bGwgPyBmdW5jLmxlbmd0aCAtIDEgOiArc3RhcnRJbmRleDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5tYXgoYXJndW1lbnRzLmxlbmd0aCAtIHN0YXJ0SW5kZXgsIDApLFxuICAgICAgICAgIHJlc3QgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICByZXN0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCArIHN0YXJ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChzdGFydEluZGV4KSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCByZXN0KTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3VtZW50c1swXSwgcmVzdCk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgcmVzdCk7XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KHN0YXJ0SW5kZXggKyAxKTtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHN0YXJ0SW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgYXJnc1tzdGFydEluZGV4XSA9IHJlc3Q7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG4gIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBzaGFsbG93UHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqID09IG51bGwgPyB2b2lkIDAgOiBvYmpba2V5XTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYXMgPSBmdW5jdGlvbihvYmosIHBhdGgpIHtcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHBhdGgpO1xuICB9XG5cbiAgdmFyIGRlZXBHZXQgPSBmdW5jdGlvbihvYmosIHBhdGgpIHtcbiAgICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgICAgb2JqID0gb2JqW3BhdGhbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoID8gb2JqIDogdm9pZCAwO1xuICB9O1xuXG4gIC8vIEhlbHBlciBmb3IgY29sbGVjdGlvbiBtZXRob2RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29sbGVjdGlvblxuICAvLyBzaG91bGQgYmUgaXRlcmF0ZWQgYXMgYW4gYXJyYXkgb3IgYXMgYW4gb2JqZWN0LlxuICAvLyBSZWxhdGVkOiBodHRwOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aFxuICAvLyBBdm9pZHMgYSB2ZXJ5IG5hc3R5IGlPUyA4IEpJVCBidWcgb24gQVJNLTY0LiAjMjA5NFxuICB2YXIgTUFYX0FSUkFZX0lOREVYID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcbiAgdmFyIGdldExlbmd0aCA9IHNoYWxsb3dQcm9wZXJ0eSgnbGVuZ3RoJyk7XG4gIHZhciBpc0FycmF5TGlrZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pO1xuICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCA8PSBNQVhfQVJSQVlfSU5ERVg7XG4gIH07XG5cbiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cbiAgLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbFxuICAvLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLlxuICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIHJlZHVjaW5nIGZ1bmN0aW9uIGl0ZXJhdGluZyBsZWZ0IG9yIHJpZ2h0LlxuICB2YXIgY3JlYXRlUmVkdWNlID0gZnVuY3Rpb24oZGlyKSB7XG4gICAgLy8gV3JhcCBjb2RlIHRoYXQgcmVhc3NpZ25zIGFyZ3VtZW50IHZhcmlhYmxlcyBpbiBhIHNlcGFyYXRlIGZ1bmN0aW9uIHRoYW5cbiAgICAvLyB0aGUgb25lIHRoYXQgYWNjZXNzZXMgYGFyZ3VtZW50cy5sZW5ndGhgIHRvIGF2b2lkIGEgcGVyZiBoaXQuICgjMTk5MSlcbiAgICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGluaXRpYWwpIHtcbiAgICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoIWluaXRpYWwpIHtcbiAgICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGRpcjtcbiAgICAgIH1cbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgICAgbWVtbyA9IGl0ZXJhdGVlKG1lbW8sIG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID49IDM7XG4gICAgICByZXR1cm4gcmVkdWNlcihvYmosIG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQsIDQpLCBtZW1vLCBpbml0aWFsKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCxcbiAgLy8gb3IgYGZvbGRsYC5cbiAgXy5yZWR1Y2UgPSBfLmZvbGRsID0gXy5pbmplY3QgPSBjcmVhdGVSZWR1Y2UoMSk7XG5cbiAgLy8gVGhlIHJpZ2h0LWFzc29jaWF0aXZlIHZlcnNpb24gb2YgcmVkdWNlLCBhbHNvIGtub3duIGFzIGBmb2xkcmAuXG4gIF8ucmVkdWNlUmlnaHQgPSBfLmZvbGRyID0gY3JlYXRlUmVkdWNlKC0xKTtcblxuICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuXG4gIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIga2V5RmluZGVyID0gaXNBcnJheUxpa2Uob2JqKSA/IF8uZmluZEluZGV4IDogXy5maW5kS2V5O1xuICAgIHZhciBrZXkgPSBrZXlGaW5kZXIob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIGlmIChrZXkgIT09IHZvaWQgMCAmJiBrZXkgIT09IC0xKSByZXR1cm4gb2JqW2tleV07XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgc2VsZWN0YC5cbiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuXG4gIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm5lZ2F0ZShjYihwcmVkaWNhdGUpKSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFsbGAuXG4gIF8uZXZlcnkgPSBfLmFsbCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgaWYgKCFwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbnlgLlxuICBfLnNvbWUgPSBfLmFueSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgaWYgKHByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiBpdGVtICh1c2luZyBgPT09YCkuXG4gIC8vIEFsaWFzZWQgYXMgYGluY2x1ZGVzYCBhbmQgYGluY2x1ZGVgLlxuICBfLmNvbnRhaW5zID0gXy5pbmNsdWRlcyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgaXRlbSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gXy52YWx1ZXMob2JqKTtcbiAgICBpZiAodHlwZW9mIGZyb21JbmRleCAhPSAnbnVtYmVyJyB8fCBndWFyZCkgZnJvbUluZGV4ID0gMDtcbiAgICByZXR1cm4gXy5pbmRleE9mKG9iaiwgaXRlbSwgZnJvbUluZGV4KSA+PSAwO1xuICB9O1xuXG4gIC8vIEludm9rZSBhIG1ldGhvZCAod2l0aCBhcmd1bWVudHMpIG9uIGV2ZXJ5IGl0ZW0gaW4gYSBjb2xsZWN0aW9uLlxuICBfLmludm9rZSA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBwYXRoLCBhcmdzKSB7XG4gICAgdmFyIGNvbnRleHRQYXRoLCBmdW5jO1xuICAgIGlmIChfLmlzRnVuY3Rpb24ocGF0aCkpIHtcbiAgICAgIGZ1bmMgPSBwYXRoO1xuICAgIH0gZWxzZSBpZiAoXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xuICAgICAgcGF0aCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgdmFyIG1ldGhvZCA9IGZ1bmM7XG4gICAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICBpZiAoY29udGV4dFBhdGggJiYgY29udGV4dFBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgY29udGV4dCA9IGRlZXBHZXQoY29udGV4dCwgY29udGV4dFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0ID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgICAgIG1ldGhvZCA9IGNvbnRleHRbcGF0aF07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0aG9kID09IG51bGwgPyBtZXRob2QgOiBtZXRob2QuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXG4gIF8ucGx1Y2sgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBfLm1hcChvYmosIF8ucHJvcGVydHkoa2V5KSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmlsdGVyYDogc2VsZWN0aW5nIG9ubHkgb2JqZWN0c1xuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLndoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubWF0Y2hlcihhdHRycykpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbmRgOiBnZXR0aW5nIHRoZSBmaXJzdCBvYmplY3RcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5maW5kV2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmluZChvYmosIF8ubWF0Y2hlcihhdHRycykpO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWF4aW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5tYXggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IC1JbmZpbml0eSwgbGFzdENvbXB1dGVkID0gLUluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgfHwgdHlwZW9mIGl0ZXJhdGVlID09ICdudW1iZXInICYmIHR5cGVvZiBvYmpbMF0gIT0gJ29iamVjdCcgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHYsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodiwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPiBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IC1JbmZpbml0eSAmJiByZXN1bHQgPT09IC1JbmZpbml0eSkge1xuICAgICAgICAgIHJlc3VsdCA9IHY7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsIHx8IHR5cGVvZiBpdGVyYXRlZSA9PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqWzBdICE9ICdvYmplY3QnICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlIDwgcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2LCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHYsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkIDwgbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdjtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24uXG4gIF8uc2h1ZmZsZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLnNhbXBsZShvYmosIEluZmluaXR5KTtcbiAgfTtcblxuICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGEgY29sbGVjdGlvbiB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgLy8gSWYgKipuKiogaXMgbm90IHNwZWNpZmllZCwgcmV0dXJucyBhIHNpbmdsZSByYW5kb20gZWxlbWVudC5cbiAgLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgbWFwYC5cbiAgXy5zYW1wbGUgPSBmdW5jdGlvbihvYmosIG4sIGd1YXJkKSB7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICAgIH1cbiAgICB2YXIgc2FtcGxlID0gaXNBcnJheUxpa2Uob2JqKSA/IF8uY2xvbmUob2JqKSA6IF8udmFsdWVzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChzYW1wbGUpO1xuICAgIG4gPSBNYXRoLm1heChNYXRoLm1pbihuLCBsZW5ndGgpLCAwKTtcbiAgICB2YXIgbGFzdCA9IGxlbmd0aCAtIDE7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG47IGluZGV4KyspIHtcbiAgICAgIHZhciByYW5kID0gXy5yYW5kb20oaW5kZXgsIGxhc3QpO1xuICAgICAgdmFyIHRlbXAgPSBzYW1wbGVbaW5kZXhdO1xuICAgICAgc2FtcGxlW2luZGV4XSA9IHNhbXBsZVtyYW5kXTtcbiAgICAgIHNhbXBsZVtyYW5kXSA9IHRlbXA7XG4gICAgfVxuICAgIHJldHVybiBzYW1wbGUuc2xpY2UoMCwgbik7XG4gIH07XG5cbiAgLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdGVlLlxuICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSwgbGlzdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBpbmRleDogaW5kZXgrKyxcbiAgICAgICAgY3JpdGVyaWE6IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGxpc3QpXG4gICAgICB9O1xuICAgIH0pLnNvcnQoZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYTtcbiAgICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgICBpZiAoYSAhPT0gYikge1xuICAgICAgICBpZiAoYSA+IGIgfHwgYSA9PT0gdm9pZCAwKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnQuaW5kZXggLSByaWdodC5pbmRleDtcbiAgICB9KSwgJ3ZhbHVlJyk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBmb3IgYWdncmVnYXRlIFwiZ3JvdXAgYnlcIiBvcGVyYXRpb25zLlxuICB2YXIgZ3JvdXAgPSBmdW5jdGlvbihiZWhhdmlvciwgcGFydGl0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBwYXJ0aXRpb24gPyBbW10sIFtdXSA6IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCB2YWx1ZSwga2V5KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChoYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTsgZWxzZSByZXN1bHRba2V5XSA9IFt2YWx1ZV07XG4gIH0pO1xuXG4gIC8vIEluZGV4ZXMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiwgc2ltaWxhciB0byBgZ3JvdXBCeWAsIGJ1dCBmb3JcbiAgLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLlxuICBfLmluZGV4QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICAvLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3NcbiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gIC8vIGNyaXRlcmlvbi5cbiAgXy5jb3VudEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldKys7IGVsc2UgcmVzdWx0W2tleV0gPSAxO1xuICB9KTtcblxuICB2YXIgcmVTdHJTeW1ib2wgPSAvW15cXHVkODAwLVxcdWRmZmZdfFtcXHVkODAwLVxcdWRiZmZdW1xcdWRjMDAtXFx1ZGZmZl18W1xcdWQ4MDAtXFx1ZGZmZl0vZztcbiAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKF8uaXNTdHJpbmcob2JqKSkge1xuICAgICAgLy8gS2VlcCBzdXJyb2dhdGUgcGFpciBjaGFyYWN0ZXJzIHRvZ2V0aGVyXG4gICAgICByZXR1cm4gb2JqLm1hdGNoKHJlU3RyU3ltYm9sKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBzYXRpc2Z5IHRoZSBnaXZlblxuICAvLyBwcmVkaWNhdGUsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG4gIF8ucGFydGl0aW9uID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwgcGFzcykge1xuICAgIHJlc3VsdFtwYXNzID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICB9LCB0cnVlKTtcblxuICAvLyBBcnJheSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYGhlYWRgIGFuZCBgdGFrZWAuIFRoZSAqKmd1YXJkKiogY2hlY2tcbiAgLy8gYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLmZpcnN0ID0gXy5oZWFkID0gXy50YWtlID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoIDwgMSkgcmV0dXJuIG4gPT0gbnVsbCA/IHZvaWQgMCA6IFtdO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcbiAgICByZXR1cm4gXy5pbml0aWFsKGFycmF5LCBhcnJheS5sZW5ndGggLSBuKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi5cbiAgXy5pbml0aWFsID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIChuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbikpKTtcbiAgfTtcblxuICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8IDEpIHJldHVybiBuID09IG51bGwgPyB2b2lkIDAgOiBbXTtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIF8ucmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIEJvb2xlYW4pO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgc3RyaWN0LCBvdXRwdXQpIHtcbiAgICBvdXRwdXQgPSBvdXRwdXQgfHwgW107XG4gICAgdmFyIGlkeCA9IG91dHB1dC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChpbnB1dCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmIChfLmlzQXJyYXkodmFsdWUpIHx8IF8uaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICAvLyBGbGF0dGVuIGN1cnJlbnQgbGV2ZWwgb2YgYXJyYXkgb3IgYXJndW1lbnRzIG9iamVjdC5cbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcbiAgICAgICAgICB2YXIgaiA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoaiA8IGxlbikgb3V0cHV0W2lkeCsrXSA9IHZhbHVlW2orK107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgc3RyaWN0LCBvdXRwdXQpO1xuICAgICAgICAgIGlkeCA9IG91dHB1dC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCkge1xuICAgICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gRmxhdHRlbiBvdXQgYW4gYXJyYXksIGVpdGhlciByZWN1cnNpdmVseSAoYnkgZGVmYXVsdCksIG9yIGp1c3Qgb25lIGxldmVsLlxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xuICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBmYWxzZSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuXG4gIF8ud2l0aG91dCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIG90aGVyQXJyYXlzKSB7XG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgb3RoZXJBcnJheXMpO1xuICB9KTtcblxuICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxuICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIFRoZSBmYXN0ZXIgYWxnb3JpdGhtIHdpbGwgbm90IHdvcmsgd2l0aCBhbiBpdGVyYXRlZSBpZiB0aGUgaXRlcmF0ZWVcbiAgLy8gaXMgbm90IGEgb25lLXRvLW9uZSBmdW5jdGlvbiwgc28gcHJvdmlkaW5nIGFuIGl0ZXJhdGVlIHdpbGwgZGlzYWJsZVxuICAvLyB0aGUgZmFzdGVyIGFsZ29yaXRobS5cbiAgLy8gQWxpYXNlZCBhcyBgdW5pcXVlYC5cbiAgXy51bmlxID0gXy51bmlxdWUgPSBmdW5jdGlvbihhcnJheSwgaXNTb3J0ZWQsIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKCFfLmlzQm9vbGVhbihpc1NvcnRlZCkpIHtcbiAgICAgIGNvbnRleHQgPSBpdGVyYXRlZTtcbiAgICAgIGl0ZXJhdGVlID0gaXNTb3J0ZWQ7XG4gICAgICBpc1NvcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXRlcmF0ZWUgIT0gbnVsbCkgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBzZWVuID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaV0sXG4gICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlLCBpLCBhcnJheSkgOiB2YWx1ZTtcbiAgICAgIGlmIChpc1NvcnRlZCAmJiAhaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IGNvbXB1dGVkKSByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKHNlZW4sIGNvbXB1dGVkKSkge1xuICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFfLmNvbnRhaW5zKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2ZcbiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8udW5pb24gPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5cykge1xuICAgIHJldHVybiBfLnVuaXEoZmxhdHRlbihhcnJheXMsIHRydWUsIHRydWUpKTtcbiAgfSk7XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgICAgaWYgKF8uY29udGFpbnMocmVzdWx0LCBpdGVtKSkgY29udGludWU7XG4gICAgICB2YXIgajtcbiAgICAgIGZvciAoaiA9IDE7IGogPCBhcmdzTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKGFyZ3VtZW50c1tqXSwgaXRlbSkpIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGogPT09IGFyZ3NMZW5ndGgpIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFRha2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBvbmUgYXJyYXkgYW5kIGEgbnVtYmVyIG9mIG90aGVyIGFycmF5cy5cbiAgLy8gT25seSB0aGUgZWxlbWVudHMgcHJlc2VudCBpbiBqdXN0IHRoZSBmaXJzdCBhcnJheSB3aWxsIHJlbWFpbi5cbiAgXy5kaWZmZXJlbmNlID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheSwgcmVzdCkge1xuICAgIHJlc3QgPSBmbGF0dGVuKHJlc3QsIHRydWUsIHRydWUpO1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gQ29tcGxlbWVudCBvZiBfLnppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuICAvLyBlYWNoIGFycmF5J3MgZWxlbWVudHMgb24gc2hhcmVkIGluZGljZXMuXG4gIF8udW56aXAgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSAmJiBfLm1heChhcnJheSwgZ2V0TGVuZ3RoKS5sZW5ndGggfHwgMDtcbiAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBfLnBsdWNrKGFycmF5LCBpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci5cbiAgXy56aXAgPSByZXN0QXJndW1lbnRzKF8udW56aXApO1xuXG4gIC8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWBcbiAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mXG4gIC8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy4gUGFzc2luZyBieSBwYWlycyBpcyB0aGUgcmV2ZXJzZSBvZiBfLnBhaXJzLlxuICBfLm9iamVjdCA9IGZ1bmN0aW9uKGxpc3QsIHZhbHVlcykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGxpc3QpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1bMF1dID0gbGlzdFtpXVsxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBmaW5kSW5kZXggYW5kIGZpbmRMYXN0SW5kZXggZnVuY3Rpb25zLlxuICB2YXIgY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIgPSBmdW5jdGlvbihkaXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICAgICAgdmFyIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0LlxuICBfLmZpbmRJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKDEpO1xuICBfLmZpbmRMYXN0SW5kZXggPSBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcigtMSk7XG5cbiAgLy8gVXNlIGEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IHRoZSBzbWFsbGVzdCBpbmRleCBhdCB3aGljaFxuICAvLyBhbiBvYmplY3Qgc2hvdWxkIGJlIGluc2VydGVkIHNvIGFzIHRvIG1haW50YWluIG9yZGVyLiBVc2VzIGJpbmFyeSBzZWFyY2guXG4gIF8uc29ydGVkSW5kZXggPSBmdW5jdGlvbihhcnJheSwgb2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIHZhciB2YWx1ZSA9IGl0ZXJhdGVlKG9iaik7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICB2YXIgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVttaWRdKSA8IHZhbHVlKSBsb3cgPSBtaWQgKyAxOyBlbHNlIGhpZ2ggPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG4gIH07XG5cbiAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgaW5kZXhPZiBhbmQgbGFzdEluZGV4T2YgZnVuY3Rpb25zLlxuICB2YXIgY3JlYXRlSW5kZXhGaW5kZXIgPSBmdW5jdGlvbihkaXIsIHByZWRpY2F0ZUZpbmQsIHNvcnRlZEluZGV4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBpZHgpIHtcbiAgICAgIHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICAgIGlmICh0eXBlb2YgaWR4ID09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChkaXIgPiAwKSB7XG4gICAgICAgICAgaSA9IGlkeCA+PSAwID8gaWR4IDogTWF0aC5tYXgoaWR4ICsgbGVuZ3RoLCBpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZW5ndGggPSBpZHggPj0gMCA/IE1hdGgubWluKGlkeCArIDEsIGxlbmd0aCkgOiBpZHggKyBsZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNvcnRlZEluZGV4ICYmIGlkeCAmJiBsZW5ndGgpIHtcbiAgICAgICAgaWR4ID0gc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pO1xuICAgICAgICByZXR1cm4gYXJyYXlbaWR4XSA9PT0gaXRlbSA/IGlkeCA6IC0xO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0gIT09IGl0ZW0pIHtcbiAgICAgICAgaWR4ID0gcHJlZGljYXRlRmluZChzbGljZS5jYWxsKGFycmF5LCBpLCBsZW5ndGgpLCBfLmlzTmFOKTtcbiAgICAgICAgcmV0dXJuIGlkeCA+PSAwID8gaWR4ICsgaSA6IC0xO1xuICAgICAgfVxuICAgICAgZm9yIChpZHggPSBkaXIgPiAwID8gaSA6IGxlbmd0aCAtIDE7IGlkeCA+PSAwICYmIGlkeCA8IGxlbmd0aDsgaWR4ICs9IGRpcikge1xuICAgICAgICBpZiAoYXJyYXlbaWR4XSA9PT0gaXRlbSkgcmV0dXJuIGlkeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbiAgLy8gb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS5cbiAgLy8gSWYgdGhlIGFycmF5IGlzIGxhcmdlIGFuZCBhbHJlYWR5IGluIHNvcnQgb3JkZXIsIHBhc3MgYHRydWVgXG4gIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG4gIF8uaW5kZXhPZiA9IGNyZWF0ZUluZGV4RmluZGVyKDEsIF8uZmluZEluZGV4LCBfLnNvcnRlZEluZGV4KTtcbiAgXy5sYXN0SW5kZXhPZiA9IGNyZWF0ZUluZGV4RmluZGVyKC0xLCBfLmZpbmRMYXN0SW5kZXgpO1xuXG4gIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2ZcbiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKHN0b3AgPT0gbnVsbCkge1xuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIGlmICghc3RlcCkge1xuICAgICAgc3RlcCA9IHN0b3AgPCBzdGFydCA/IC0xIDogMTtcbiAgICB9XG5cbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCksIDApO1xuICAgIHZhciByYW5nZSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrLCBzdGFydCArPSBzdGVwKSB7XG4gICAgICByYW5nZVtpZHhdID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIC8vIENodW5rIGEgc2luZ2xlIGFycmF5IGludG8gbXVsdGlwbGUgYXJyYXlzLCBlYWNoIGNvbnRhaW5pbmcgYGNvdW50YCBvciBmZXdlclxuICAvLyBpdGVtcy5cbiAgXy5jaHVuayA9IGZ1bmN0aW9uKGFycmF5LCBjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsIHx8IGNvdW50IDwgMSkgcmV0dXJuIFtdO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goc2xpY2UuY2FsbChhcnJheSwgaSwgaSArPSBjb3VudCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGV4ZWN1dGUgYSBmdW5jdGlvbiBhcyBhIGNvbnN0cnVjdG9yXG4gIC8vIG9yIGEgbm9ybWFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgdmFyIGV4ZWN1dGVCb3VuZCA9IGZ1bmN0aW9uKHNvdXJjZUZ1bmMsIGJvdW5kRnVuYywgY29udGV4dCwgY2FsbGluZ0NvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoIShjYWxsaW5nQ29udGV4dCBpbnN0YW5jZW9mIGJvdW5kRnVuYykpIHJldHVybiBzb3VyY2VGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIHZhciBzZWxmID0gYmFzZUNyZWF0ZShzb3VyY2VGdW5jLnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IHNvdXJjZUZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgaWYgKF8uaXNPYmplY3QocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZlxuICAvLyBhdmFpbGFibGUuXG4gIF8uYmluZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJncykge1xuICAgIGlmICghXy5pc0Z1bmN0aW9uKGZ1bmMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdCaW5kIG11c3QgYmUgY2FsbGVkIG9uIGEgZnVuY3Rpb24nKTtcbiAgICB2YXIgYm91bmQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGNhbGxBcmdzKSB7XG4gICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCBjb250ZXh0LCB0aGlzLCBhcmdzLmNvbmNhdChjYWxsQXJncykpO1xuICAgIH0pO1xuICAgIHJldHVybiBib3VuZDtcbiAgfSk7XG5cbiAgLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0c1xuICAvLyBhcmd1bWVudHMgcHJlLWZpbGxlZCwgd2l0aG91dCBjaGFuZ2luZyBpdHMgZHluYW1pYyBgdGhpc2AgY29udGV4dC4gXyBhY3RzXG4gIC8vIGFzIGEgcGxhY2Vob2xkZXIgYnkgZGVmYXVsdCwgYWxsb3dpbmcgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyB0byBiZVxuICAvLyBwcmUtZmlsbGVkLiBTZXQgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgZm9yIGEgY3VzdG9tIHBsYWNlaG9sZGVyIGFyZ3VtZW50LlxuICBfLnBhcnRpYWwgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIGJvdW5kQXJncykge1xuICAgIHZhciBwbGFjZWhvbGRlciA9IF8ucGFydGlhbC5wbGFjZWhvbGRlcjtcbiAgICB2YXIgYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IDAsIGxlbmd0aCA9IGJvdW5kQXJncy5sZW5ndGg7XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFyZ3NbaV0gPSBib3VuZEFyZ3NbaV0gPT09IHBsYWNlaG9sZGVyID8gYXJndW1lbnRzW3Bvc2l0aW9uKytdIDogYm91bmRBcmdzW2ldO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XG4gICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCB0aGlzLCB0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIHJldHVybiBib3VuZDtcbiAgfSk7XG5cbiAgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyID0gXztcblxuICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHNcbiAgLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzXG4gIC8vIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC5cbiAgXy5iaW5kQWxsID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICBrZXlzID0gZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpO1xuICAgIHZhciBpbmRleCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChpbmRleCA8IDEpIHRocm93IG5ldyBFcnJvcignYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcycpO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07XG4gICAgICBvYmpba2V5XSA9IF8uYmluZChvYmpba2V5XSwgb2JqKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vaXplID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgY2FjaGUgPSBtZW1vaXplLmNhY2hlO1xuICAgICAgdmFyIGFkZHJlc3MgPSAnJyArIChoYXNoZXIgPyBoYXNoZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleSk7XG4gICAgICBpZiAoIWhhcyhjYWNoZSwgYWRkcmVzcykpIGNhY2hlW2FkZHJlc3NdID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGNhY2hlW2FkZHJlc3NdO1xuICAgIH07XG4gICAgbWVtb2l6ZS5jYWNoZSA9IHt9O1xuICAgIHJldHVybiBtZW1vaXplO1xuICB9O1xuXG4gIC8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHNcbiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLlxuICBfLmRlbGF5ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCB3YWl0KTtcbiAgfSk7XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBfLnBhcnRpYWwoXy5kZWxheSwgXywgMSk7XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciB0aW1lb3V0LCBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IF8ubm93KCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIHRocm90dGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdyA9IF8ubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHRocm90dGxlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHByZXZpb3VzID0gMDtcbiAgICAgIHRpbWVvdXQgPSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiB0aHJvdHRsZWQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgdmFyIHRpbWVvdXQsIHJlc3VsdDtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKGNvbnRleHQsIGFyZ3MpIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKGFyZ3MpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcblxuICAgIHZhciBkZWJvdW5jZWQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgIHZhciBjYWxsTm93ID0gIXRpbWVvdXQ7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgICAgaWYgKGNhbGxOb3cpIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gXy5kZWxheShsYXRlciwgd2FpdCwgdGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICBkZWJvdW5jZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIF8ucGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLlxuICBfLm5lZ2F0ZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3RhcnQgPSBhcmdzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGkgPSBzdGFydDtcbiAgICAgIHZhciByZXN1bHQgPSBhcmdzW3N0YXJ0XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgd2hpbGUgKGktLSkgcmVzdWx0ID0gYXJnc1tpXS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIG9uIGFuZCBhZnRlciB0aGUgTnRoIGNhbGwuXG4gIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzIDwgMSkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIHVwIHRvIChidXQgbm90IGluY2x1ZGluZykgdGhlIE50aCBjYWxsLlxuICBfLmJlZm9yZSA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgdmFyIG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPiAwKSB7XG4gICAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBfLnBhcnRpYWwoXy5iZWZvcmUsIDIpO1xuXG4gIF8ucmVzdEFyZ3VtZW50cyA9IHJlc3RBcmd1bWVudHM7XG5cbiAgLy8gT2JqZWN0IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gS2V5cyBpbiBJRSA8IDkgdGhhdCB3b24ndCBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC5cbiAgdmFyIGhhc0VudW1CdWcgPSAhe3RvU3RyaW5nOiBudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcblxuICB2YXIgY29sbGVjdE5vbkVudW1Qcm9wcyA9IGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIHZhciBub25FbnVtSWR4ID0gbm9uRW51bWVyYWJsZVByb3BzLmxlbmd0aDtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7XG4gICAgdmFyIHByb3RvID0gXy5pc0Z1bmN0aW9uKGNvbnN0cnVjdG9yKSAmJiBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgfHwgT2JqUHJvdG87XG5cbiAgICAvLyBDb25zdHJ1Y3RvciBpcyBhIHNwZWNpYWwgY2FzZS5cbiAgICB2YXIgcHJvcCA9ICdjb25zdHJ1Y3Rvcic7XG4gICAgaWYgKGhhcyhvYmosIHByb3ApICYmICFfLmNvbnRhaW5zKGtleXMsIHByb3ApKSBrZXlzLnB1c2gocHJvcCk7XG5cbiAgICB3aGlsZSAobm9uRW51bUlkeC0tKSB7XG4gICAgICBwcm9wID0gbm9uRW51bWVyYWJsZVByb3BzW25vbkVudW1JZHhdO1xuICAgICAgaWYgKHByb3AgaW4gb2JqICYmIG9ialtwcm9wXSAhPT0gcHJvdG9bcHJvcF0gJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIHtcbiAgICAgICAga2V5cy5wdXNoKHByb3ApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2AuXG4gIF8ua2V5cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gW107XG4gICAgaWYgKG5hdGl2ZUtleXMpIHJldHVybiBuYXRpdmVLZXlzKG9iaik7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoaGFzKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgLy8gQWhlbSwgSUUgPCA5LlxuICAgIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgYWxsIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QuXG4gIF8uYWxsS2V5cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gW107XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgICAvLyBBaGVtLCBJRSA8IDkuXG4gICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSB0aGUgdmFsdWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuXG4gIF8udmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHZhbHVlcyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVzW2ldID0gb2JqW2tleXNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudCBvZiB0aGUgb2JqZWN0LlxuICAvLyBJbiBjb250cmFzdCB0byBfLm1hcCBpdCByZXR1cm5zIGFuIG9iamVjdC5cbiAgXy5tYXBPYmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHMgPSB7fTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgcmVzdWx0c1tjdXJyZW50S2V5XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIC8vIFRoZSBvcHBvc2l0ZSBvZiBfLm9iamVjdC5cbiAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBwYWlycyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcGFpcnNbaV0gPSBba2V5c1tpXSwgb2JqW2tleXNbaV1dXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhaXJzO1xuICB9O1xuXG4gIC8vIEludmVydCB0aGUga2V5cyBhbmQgdmFsdWVzIG9mIGFuIG9iamVjdC4gVGhlIHZhbHVlcyBtdXN0IGJlIHNlcmlhbGl6YWJsZS5cbiAgXy5pbnZlcnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W29ialtrZXlzW2ldXV0gPSBrZXlzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC5cbiAgLy8gQWxpYXNlZCBhcyBgbWV0aG9kc2AuXG4gIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYXNzaWduZXIgZnVuY3Rpb25zLlxuICB2YXIgY3JlYXRlQXNzaWduZXIgPSBmdW5jdGlvbihrZXlzRnVuYywgZGVmYXVsdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmIChkZWZhdWx0cykgb2JqID0gT2JqZWN0KG9iaik7XG4gICAgICBpZiAobGVuZ3RoIDwgMiB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXG4gICAgICAgICAgICBrZXlzID0ga2V5c0Z1bmMoc291cmNlKSxcbiAgICAgICAgICAgIGwgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoIWRlZmF1bHRzIHx8IG9ialtrZXldID09PSB2b2lkIDApIG9ialtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgfTtcblxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cbiAgXy5leHRlbmQgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMpO1xuXG4gIC8vIEFzc2lnbnMgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIG93biBwcm9wZXJ0aWVzIGluIHRoZSBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuICAvLyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnbilcbiAgXy5leHRlbmRPd24gPSBfLmFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKF8ua2V5cyk7XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3Qga2V5IG9uIGFuIG9iamVjdCB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0LlxuICBfLmZpbmRLZXkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKSwga2V5O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKHByZWRpY2F0ZShvYmpba2V5XSwga2V5LCBvYmopKSByZXR1cm4ga2V5O1xuICAgIH1cbiAgfTtcblxuICAvLyBJbnRlcm5hbCBwaWNrIGhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgYG9iamAgaGFzIGtleSBga2V5YC5cbiAgdmFyIGtleUluT2JqID0gZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqKSB7XG4gICAgcmV0dXJuIGtleSBpbiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge30sIGl0ZXJhdGVlID0ga2V5c1swXTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwga2V5c1sxXSk7XG4gICAgICBrZXlzID0gXy5hbGxLZXlzKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0ga2V5SW5PYmo7XG4gICAgICBrZXlzID0gZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgb2JqID0gT2JqZWN0KG9iaik7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgaWYgKGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iaikpIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuXG4gIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIHZhciBpdGVyYXRlZSA9IGtleXNbMF0sIGNvbnRleHQ7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGl0ZXJhdGVlID0gXy5uZWdhdGUoaXRlcmF0ZWUpO1xuICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkgY29udGV4dCA9IGtleXNbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBfLm1hcChmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSksIFN0cmluZyk7XG4gICAgICBpdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKGtleXMsIGtleSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gXy5waWNrKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpO1xuICB9KTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzLCB0cnVlKTtcblxuICAvLyBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGdpdmVuIHByb3RvdHlwZSBvYmplY3QuXG4gIC8vIElmIGFkZGl0aW9uYWwgcHJvcGVydGllcyBhcmUgcHJvdmlkZWQgdGhlbiB0aGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4gIC8vIGNyZWF0ZWQgb2JqZWN0LlxuICBfLmNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSwgcHJvcHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgIGlmIChwcm9wcykgXy5leHRlbmRPd24ocmVzdWx0LCBwcm9wcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uaXNNYXRjaCA9IGZ1bmN0aW9uKG9iamVjdCwgYXR0cnMpIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhhdHRycyksIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuICFsZW5ndGg7XG4gICAgdmFyIG9iaiA9IE9iamVjdChvYmplY3QpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICB2YXIgZXEsIGRlZXBFcTtcbiAgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICAgIC8vIGBudWxsYCBvciBgdW5kZWZpbmVkYCBvbmx5IGVxdWFsIHRvIGl0c2VsZiAoc3RyaWN0IGNvbXBhcmlzb24pLlxuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICBpZiAoYSAhPT0gYSkgcmV0dXJuIGIgIT09IGI7XG4gICAgLy8gRXhoYXVzdCBwcmltaXRpdmUgY2hlY2tzXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgYTtcbiAgICBpZiAodHlwZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBkZWVwRXEoYSwgYiwgYVN0YWNrLCBiU3RhY2spO1xuICB9O1xuXG4gIC8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuXG4gIGRlZXBFcSA9IGZ1bmN0aW9uKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICByZXR1cm4gJycgKyBhID09PSAnJyArIGI7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAvLyBPYmplY3QoTmFOKSBpcyBlcXVpdmFsZW50IHRvIE5hTi5cbiAgICAgICAgaWYgKCthICE9PSArYSkgcmV0dXJuICtiICE9PSArYjtcbiAgICAgICAgLy8gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvciBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgIHJldHVybiArYSA9PT0gK2I7XG4gICAgICBjYXNlICdbb2JqZWN0IFN5bWJvbF0nOlxuICAgICAgICByZXR1cm4gU3ltYm9sUHJvdG8udmFsdWVPZi5jYWxsKGEpID09PSBTeW1ib2xQcm90by52YWx1ZU9mLmNhbGwoYik7XG4gICAgfVxuXG4gICAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICBpZiAoIWFyZUFycmF5cykge1xuICAgICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcyBvciBgQXJyYXlgc1xuICAgICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cbiAgICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmlzRnVuY3Rpb24oYkN0b3IpICYmIGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cblxuICAgIC8vIEluaXRpYWxpemluZyBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAvLyBJdCdzIGRvbmUgaGVyZSBzaW5jZSB3ZSBvbmx5IG5lZWQgdGhlbSBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzIGNvbXBhcmlzb24uXG4gICAgYVN0YWNrID0gYVN0YWNrIHx8IFtdO1xuICAgIGJTdGFjayA9IGJTdGFjayB8fCBbXTtcbiAgICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09PSBhKSByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT09IGI7XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpO1xuICAgIGJTdGFjay5wdXNoKGIpO1xuXG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgaWYgKGFyZUFycmF5cykge1xuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmICghZXEoYVtsZW5ndGhdLCBiW2xlbmd0aF0sIGFTdGFjaywgYlN0YWNrKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKGEpLCBrZXk7XG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzIGJlZm9yZSBjb21wYXJpbmcgZGVlcCBlcXVhbGl0eS5cbiAgICAgIGlmIChfLmtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXJcbiAgICAgICAga2V5ID0ga2V5c1tsZW5ndGhdO1xuICAgICAgICBpZiAoIShoYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLlxuICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGVxKGEsIGIpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5P1xuICAvLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopICYmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikgfHwgXy5pc0FyZ3VtZW50cyhvYmopKSkgcmV0dXJuIG9iai5sZW5ndGggPT09IDA7XG4gICAgcmV0dXJuIF8ua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4gIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5XG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfTtcblxuICAvLyBBZGQgc29tZSBpc1R5cGUgbWV0aG9kczogaXNBcmd1bWVudHMsIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc051bWJlciwgaXNEYXRlLCBpc1JlZ0V4cCwgaXNFcnJvciwgaXNNYXAsIGlzV2Vha01hcCwgaXNTZXQsIGlzV2Vha1NldC5cbiAgXy5lYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnLCAnRXJyb3InLCAnU3ltYm9sJywgJ01hcCcsICdXZWFrTWFwJywgJ1NldCcsICdXZWFrU2V0J10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSA8IDkpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBoYXMob2JqLCAnY2FsbGVlJyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS4gV29yayBhcm91bmQgc29tZSB0eXBlb2YgYnVncyBpbiBvbGQgdjgsXG4gIC8vIElFIDExICgjMTYyMSksIFNhZmFyaSA4ICgjMTkyOSksIGFuZCBQaGFudG9tSlMgKCMyMjM2KS5cbiAgdmFyIG5vZGVsaXN0ID0gcm9vdC5kb2N1bWVudCAmJiByb290LmRvY3VtZW50LmNoaWxkTm9kZXM7XG4gIGlmICh0eXBlb2YgLy4vICE9ICdmdW5jdGlvbicgJiYgdHlwZW9mIEludDhBcnJheSAhPSAnb2JqZWN0JyAmJiB0eXBlb2Ygbm9kZWxpc3QgIT0gJ2Z1bmN0aW9uJykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJyB8fCBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyP1xuICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICFfLmlzU3ltYm9sKG9iaikgJiYgaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbiAgfTtcblxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/XG4gIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIGlzTmFOKG9iaik7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIHBhdGgpIHtcbiAgICBpZiAoIV8uaXNBcnJheShwYXRoKSkge1xuICAgICAgcmV0dXJuIGhhcyhvYmosIHBhdGgpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHBhdGhbaV07XG4gICAgICBpZiAob2JqID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iaiA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gISFsZW5ndGg7XG4gIH07XG5cbiAgLy8gVXRpbGl0eSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSdW4gVW5kZXJzY29yZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzXG4gIC8vIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcm9vdC5fID0gcHJldmlvdXNVbmRlcnNjb3JlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRlZXMuXG4gIF8uaWRlbnRpdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvLyBQcmVkaWNhdGUtZ2VuZXJhdGluZyBmdW5jdGlvbnMuIE9mdGVuIHVzZWZ1bCBvdXRzaWRlIG9mIFVuZGVyc2NvcmUuXG4gIF8uY29uc3RhbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICB9O1xuXG4gIF8ubm9vcCA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBwYXNzZWQgYW4gb2JqZWN0LCB3aWxsIHRyYXZlcnNlIHRoYXQgb2JqZWN04oCZc1xuICAvLyBwcm9wZXJ0aWVzIGRvd24gdGhlIGdpdmVuIGBwYXRoYCwgc3BlY2lmaWVkIGFzIGFuIGFycmF5IG9mIGtleXMgb3IgaW5kZXhlcy5cbiAgXy5wcm9wZXJ0eSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBpZiAoIV8uaXNBcnJheShwYXRoKSkge1xuICAgICAgcmV0dXJuIHNoYWxsb3dQcm9wZXJ0eShwYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIGRlZXBHZXQob2JqLCBwYXRoKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlcyBhIGZ1bmN0aW9uIGZvciBhIGdpdmVuIG9iamVjdCB0aGF0IHJldHVybnMgYSBnaXZlbiBwcm9wZXJ0eS5cbiAgXy5wcm9wZXJ0eU9mID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXt9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuICFfLmlzQXJyYXkocGF0aCkgPyBvYmpbcGF0aF0gOiBkZWVwR2V0KG9iaiwgcGF0aCk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2ZcbiAgLy8gYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ubWF0Y2hlciA9IF8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgYXR0cnMgPSBfLmV4dGVuZE93bih7fSwgYXR0cnMpO1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmlzTWF0Y2gob2JqLCBhdHRycyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy5cbiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGFjY3VtID0gQXJyYXkoTWF0aC5tYXgoMCwgbikpO1xuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0ZWUoaSk7XG4gICAgcmV0dXJuIGFjY3VtO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSkuXG4gIF8ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICBpZiAobWF4ID09IG51bGwpIHtcbiAgICAgIG1heCA9IG1pbjtcbiAgICAgIG1pbiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICB9O1xuXG4gIC8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci5cbiAgXy5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG5cbiAgLy8gTGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy5cbiAgdmFyIGVzY2FwZU1hcCA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmI3gyNzsnLFxuICAgICdgJzogJyYjeDYwOydcbiAgfTtcbiAgdmFyIHVuZXNjYXBlTWFwID0gXy5pbnZlcnQoZXNjYXBlTWFwKTtcblxuICAvLyBGdW5jdGlvbnMgZm9yIGVzY2FwaW5nIGFuZCB1bmVzY2FwaW5nIHN0cmluZ3MgdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXG4gIHZhciBjcmVhdGVFc2NhcGVyID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGVzY2FwZXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgcmV0dXJuIG1hcFttYXRjaF07XG4gICAgfTtcbiAgICAvLyBSZWdleGVzIGZvciBpZGVudGlmeWluZyBhIGtleSB0aGF0IG5lZWRzIHRvIGJlIGVzY2FwZWQuXG4gICAgdmFyIHNvdXJjZSA9ICcoPzonICsgXy5rZXlzKG1hcCkuam9pbignfCcpICsgJyknO1xuICAgIHZhciB0ZXN0UmVnZXhwID0gUmVnRXhwKHNvdXJjZSk7XG4gICAgdmFyIHJlcGxhY2VSZWdleHAgPSBSZWdFeHAoc291cmNlLCAnZycpO1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZyA9PSBudWxsID8gJycgOiAnJyArIHN0cmluZztcbiAgICAgIHJldHVybiB0ZXN0UmVnZXhwLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlcGxhY2VSZWdleHAsIGVzY2FwZXIpIDogc3RyaW5nO1xuICAgIH07XG4gIH07XG4gIF8uZXNjYXBlID0gY3JlYXRlRXNjYXBlcihlc2NhcGVNYXApO1xuICBfLnVuZXNjYXBlID0gY3JlYXRlRXNjYXBlcih1bmVzY2FwZU1hcCk7XG5cbiAgLy8gVHJhdmVyc2VzIHRoZSBjaGlsZHJlbiBvZiBgb2JqYCBhbG9uZyBgcGF0aGAuIElmIGEgY2hpbGQgaXMgYSBmdW5jdGlvbiwgaXRcbiAgLy8gaXMgaW52b2tlZCB3aXRoIGl0cyBwYXJlbnQgYXMgY29udGV4dC4gUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpbmFsXG4gIC8vIGNoaWxkLCBvciBgZmFsbGJhY2tgIGlmIGFueSBjaGlsZCBpcyB1bmRlZmluZWQuXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqLCBwYXRoLCBmYWxsYmFjaykge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSBwYXRoID0gW3BhdGhdO1xuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgcmV0dXJuIF8uaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjay5jYWxsKG9iaikgOiBmYWxsYmFjaztcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHByb3AgPSBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtwYXRoW2ldXTtcbiAgICAgIGlmIChwcm9wID09PSB2b2lkIDApIHtcbiAgICAgICAgcHJvcCA9IGZhbGxiYWNrO1xuICAgICAgICBpID0gbGVuZ3RoOyAvLyBFbnN1cmUgd2UgZG9uJ3QgY29udGludWUgaXRlcmF0aW5nLlxuICAgICAgfVxuICAgICAgb2JqID0gXy5pc0Z1bmN0aW9uKHByb3ApID8gcHJvcC5jYWxsKG9iaikgOiBwcm9wO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGU6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGU6IC88JT0oW1xcc1xcU10rPyklPi9nLFxuICAgIGVzY2FwZTogLzwlLShbXFxzXFxTXSs/KSU+L2dcbiAgfTtcblxuICAvLyBXaGVuIGN1c3RvbWl6aW5nIGB0ZW1wbGF0ZVNldHRpbmdzYCwgaWYgeW91IGRvbid0IHdhbnQgdG8gZGVmaW5lIGFuXG4gIC8vIGludGVycG9sYXRpb24sIGV2YWx1YXRpb24gb3IgZXNjYXBpbmcgcmVnZXgsIHdlIG5lZWQgb25lIHRoYXQgaXNcbiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXG4gIHZhciBub01hdGNoID0gLyguKV4vO1xuXG4gIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhXG4gIC8vIHN0cmluZyBsaXRlcmFsLlxuICB2YXIgZXNjYXBlcyA9IHtcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlUmVnRXhwID0gL1xcXFx8J3xcXHJ8XFxufFxcdTIwMjh8XFx1MjAyOS9nO1xuXG4gIHZhciBlc2NhcGVDaGFyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07XG4gIH07XG5cbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuICAvLyBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgLy8gTkI6IGBvbGRTZXR0aW5nc2Agb25seSBleGlzdHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICBfLnRlbXBsYXRlID0gZnVuY3Rpb24odGV4dCwgc2V0dGluZ3MsIG9sZFNldHRpbmdzKSB7XG4gICAgaWYgKCFzZXR0aW5ncyAmJiBvbGRTZXR0aW5ncykgc2V0dGluZ3MgPSBvbGRTZXR0aW5ncztcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBSZWdFeHAoW1xuICAgICAgKHNldHRpbmdzLmVzY2FwZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuaW50ZXJwb2xhdGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZVxuICAgIF0uam9pbignfCcpICsgJ3wkJywgJ2cnKTtcblxuICAgIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc291cmNlID0gXCJfX3ArPSdcIjtcbiAgICB0ZXh0LnJlcGxhY2UobWF0Y2hlciwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZSwgaW50ZXJwb2xhdGUsIGV2YWx1YXRlLCBvZmZzZXQpIHtcbiAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCBlc2NhcGVDaGFyKTtcbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgICAgfVxuXG4gICAgICAvLyBBZG9iZSBWTXMgbmVlZCB0aGUgbWF0Y2ggcmV0dXJuZWQgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBvZmZzZXQuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIC8vIElmIGEgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZCwgcGxhY2UgZGF0YSB2YWx1ZXMgaW4gbG9jYWwgc2NvcGUuXG4gICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcblxuICAgIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gICAgdmFyIHJlbmRlcjtcbiAgICB0cnkge1xuICAgICAgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonLCAnXycsIHNvdXJjZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIHZhciB0ZW1wbGF0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTtcbiAgICB9O1xuXG4gICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLlxuICAgIHZhciBhcmd1bWVudCA9IHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonO1xuICAgIHRlbXBsYXRlLnNvdXJjZSA9ICdmdW5jdGlvbignICsgYXJndW1lbnQgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9O1xuXG4gIC8vIEFkZCBhIFwiY2hhaW5cIiBmdW5jdGlvbi4gU3RhcnQgY2hhaW5pbmcgYSB3cmFwcGVkIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLmNoYWluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGluc3RhbmNlID0gXyhvYmopO1xuICAgIGluc3RhbmNlLl9jaGFpbiA9IHRydWU7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIC8vIE9PUFxuICAvLyAtLS0tLS0tLS0tLS0tLS1cbiAgLy8gSWYgVW5kZXJzY29yZSBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgaXQgcmV0dXJucyBhIHdyYXBwZWQgb2JqZWN0IHRoYXRcbiAgLy8gY2FuIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCB0aGVcbiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC5cblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gIHZhciBjaGFpblJlc3VsdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBvYmopIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgXy5lYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIF87XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICAgIGlmICgobmFtZSA9PT0gJ3NoaWZ0JyB8fCBuYW1lID09PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTtcbiAgICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBvYmopO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEFkZCBhbGwgYWNjZXNzb3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gIF8ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuICAvLyBzdWNoIGFzIGFyaXRobWV0aWMgYW5kIEpTT04gc3RyaW5naWZpY2F0aW9uLlxuICBfLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7XG5cbiAgXy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMuX3dyYXBwZWQpO1xuICB9O1xuXG4gIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnNcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXG4gIC8vIHByYWN0aWNlIGZvciBBTUQgcmVnaXN0cmF0aW9uIGlzIHRvIGJlIGFub255bW91cywgdW5kZXJzY29yZSByZWdpc3RlcnNcbiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXNcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXG4gIC8vIGFuIEFNRCBsb2FkIHJlcXVlc3QuIFRob3NlIGNhc2VzIGNvdWxkIGdlbmVyYXRlIGFuIGVycm9yIHdoZW4gYW5cbiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZSgndW5kZXJzY29yZScsIFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG59KCkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns "function" for HTML <object> elements\n    // (i.e., `typeof document.createElement( "object" ) === "function"`).\n    // We don\'t want to classify *any* DOM node as a function.\n    return typeof obj === "function" && typeof obj.nodeType !== "number";\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvaXNGdW5jdGlvbi5qcz9iMzhlIl0sIm5hbWVzIjpbImRlZmluZSIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEI7O0FBRUEsU0FBTyxTQUFTQyxVQUFULENBQXFCQyxHQUFyQixFQUEyQjtBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQU8sT0FBT0EsR0FBUCxLQUFlLFVBQWYsSUFBNkIsT0FBT0EsR0FBRyxDQUFDQyxRQUFYLEtBQXdCLFFBQTVEO0FBQ0gsR0FQRjtBQVNBLENBWks7QUFBQSxvR0FBTiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.4.0\n//     (c) 2010-2019 Jeremy Ashkenas and DocumentCloud\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n(function (factory) {\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self || typeof global == 'object' && global.global === global && global; // Set up Backbone appropriately for the environment. Start with AMD.\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(29), __webpack_require__(5), exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else { var _, $; }\n})(function (root, Backbone, _, $) {\n  // Initial Setup\n  // -------------\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone; // Create a local reference to a common array method we'll want to use later.\n\n  var slice = Array.prototype.slice; // Current version of the library. Keep in sync with `package.json`.\n\n  Backbone.VERSION = '1.4.0'; // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n\n  Backbone.$ = $; // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n\n  Backbone.noConflict = function () {\n    root.Backbone = previousBackbone;\n    return this;\n  }; // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n\n\n  Backbone.emulateHTTP = false; // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n\n  Backbone.emulateJSON = false; // Backbone.Events\n  // ---------------\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n\n  var Events = Backbone.Events = {}; // Regular expression used to split event strings.\n\n  var eventSplitter = /\\s+/; // A private global variable to share between listeners and listenees.\n\n  var _listening; // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n\n\n  var eventsApi = function (iteratee, events, name, callback, opts) {\n    var i = 0,\n        names;\n\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n\n      for (names = _.keys(name); i < names.length; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n\n    return events;\n  }; // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n\n\n  Events.on = function (name, callback, context) {\n    this._events = eventsApi(onApi, this._events || {}, name, callback, {\n      context: context,\n      ctx: this,\n      listening: _listening\n    });\n\n    if (_listening) {\n      var listeners = this._listeners || (this._listeners = {});\n      listeners[_listening.id] = _listening; // Allow the listening to use a counter, instead of tracking\n      // callbacks for library interop\n\n      _listening.interop = false;\n    }\n\n    return this;\n  }; // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n\n\n  Events.listenTo = function (obj, name, callback) {\n    if (!obj) return this;\n\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = _listening = listeningTo[id]; // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n\n    if (!listening) {\n      this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = _listening = listeningTo[id] = new Listening(this, obj);\n    } // Bind callbacks on obj.\n\n\n    var error = tryCatchOn(obj, name, callback, this);\n    _listening = void 0;\n    if (error) throw error; // If the target obj is not Backbone.Events, track events manually.\n\n    if (listening.interop) listening.on(name, callback);\n    return this;\n  }; // The reducing API that adds a callback to the `events` object.\n\n\n  var onApi = function (events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context,\n          ctx = options.ctx,\n          listening = options.listening;\n      if (listening) listening.count++;\n      handlers.push({\n        callback: callback,\n        context: context,\n        ctx: context || ctx,\n        listening: listening\n      });\n    }\n\n    return events;\n  }; // An try-catch guarded #on function, to prevent poisoning the global\n  // `_listening` variable.\n\n\n  var tryCatchOn = function (obj, name, callback, context) {\n    try {\n      obj.on(name, callback, context);\n    } catch (e) {\n      return e;\n    }\n  }; // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n\n\n  Events.off = function (name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  }; // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n\n\n  Events.stopListening = function (obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]]; // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n\n      if (!listening) break;\n      listening.obj.off(name, callback, this);\n      if (listening.interop) listening.off(name, callback);\n    }\n\n    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;\n    return this;\n  }; // The reducing API that removes a callback from the `events` object.\n\n\n  var offApi = function (events, name, callback, options) {\n    if (!events) return;\n    var context = options.context,\n        listeners = options.listeners;\n    var i = 0,\n        names; // Delete all event listeners and \"drop\" events.\n\n    if (!name && !context && !callback) {\n      for (names = _.keys(listeners); i < names.length; i++) {\n        listeners[names[i]].cleanup();\n      }\n\n      return;\n    }\n\n    names = name ? [name] : _.keys(events);\n\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name]; // Bail out if there are no events stored.\n\n      if (!handlers) break; // Find any remaining events.\n\n      var remaining = [];\n\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n\n        if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {\n          remaining.push(handler);\n        } else {\n          var listening = handler.listening;\n          if (listening) listening.off(name, callback);\n        }\n      } // Replace events if there are any remaining.  Otherwise, clean up.\n\n\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n\n    return events;\n  }; // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n\n\n  Events.once = function (name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, this.off.bind(this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  }; // Inversion-of-control versions of `once`.\n\n\n  Events.listenToOnce = function (obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, this.stopListening.bind(this, obj));\n    return this.listenTo(obj, events);\n  }; // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n\n\n  var onceMap = function (map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function () {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n\n      once._callback = callback;\n    }\n\n    return map;\n  }; // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n\n\n  Events.trigger = function (name) {\n    if (!this._events) return this;\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  }; // Handles triggering the appropriate event callbacks.\n\n\n  var triggerApi = function (objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n\n    return objEvents;\n  }; // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n\n\n  var triggerEvents = function (events, args) {\n    var ev,\n        i = -1,\n        l = events.length,\n        a1 = args[0],\n        a2 = args[1],\n        a3 = args[2];\n\n    switch (args.length) {\n      case 0:\n        while (++i < l) (ev = events[i]).callback.call(ev.ctx);\n\n        return;\n\n      case 1:\n        while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1);\n\n        return;\n\n      case 2:\n        while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n        return;\n\n      case 3:\n        while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n        return;\n\n      default:\n        while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);\n\n        return;\n    }\n  }; // A listening class that tracks and cleans up memory bindings\n  // when all callbacks have been offed.\n\n\n  var Listening = function (listener, obj) {\n    this.id = listener._listenId;\n    this.listener = listener;\n    this.obj = obj;\n    this.interop = true;\n    this.count = 0;\n    this._events = void 0;\n  };\n\n  Listening.prototype.on = Events.on; // Offs a callback (or several).\n  // Uses an optimized counter if the listenee uses Backbone.Events.\n  // Otherwise, falls back to manual tracking to support events\n  // library interop.\n\n  Listening.prototype.off = function (name, callback) {\n    var cleanup;\n\n    if (this.interop) {\n      this._events = eventsApi(offApi, this._events, name, callback, {\n        context: void 0,\n        listeners: void 0\n      });\n      cleanup = !this._events;\n    } else {\n      this.count--;\n      cleanup = this.count === 0;\n    }\n\n    if (cleanup) this.cleanup();\n  }; // Cleans up memory bindings between the listener and the listenee.\n\n\n  Listening.prototype.cleanup = function () {\n    delete this.listener._listeningTo[this.obj._listenId];\n    if (!this.interop) delete this.obj._listeners[this.id];\n  }; // Aliases for backwards compatibility.\n\n\n  Events.bind = Events.on;\n  Events.unbind = Events.off; // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n\n  _.extend(Backbone, Events); // Backbone.Model\n  // --------------\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n\n\n  var Model = Backbone.Model = function (attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.preinitialize.apply(this, arguments);\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n\n    var defaults = _.result(this, 'defaults');\n\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  }; // Attach all inheritable methods to the Model prototype.\n\n\n  _.extend(Model.prototype, Events, {\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n    // The value returned during the last failed validation.\n    validationError: null,\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n    // preinitialize is an empty function by default. You can override it with a function\n    // or object.  preinitialize will run before any instantiation logic is run in the Model.\n    preinitialize: function () {},\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function () {},\n    // Return a copy of the model's `attributes` object.\n    toJSON: function (options) {\n      return _.clone(this.attributes);\n    },\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function () {\n      return Backbone.sync.apply(this, arguments);\n    },\n    // Get the value of an attribute.\n    get: function (attr) {\n      return this.attributes[attr];\n    },\n    // Get the HTML-escaped value of an attribute.\n    escape: function (attr) {\n      return _.escape(this.get(attr));\n    },\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function (attr) {\n      return this.get(attr) != null;\n    },\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function (attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function (key, val, options) {\n      if (key == null) return this; // Handle both `\"key\", value` and `{key: value}` -style arguments.\n\n      var attrs;\n\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {}); // Run validation.\n\n      if (!this._validate(attrs, options)) return false; // Extract attributes and options.\n\n      var unset = options.unset;\n      var silent = options.silent;\n      var changes = [];\n      var changing = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev = this._previousAttributes; // For each `set` attribute, update or delete the current value.\n\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n\n        unset ? delete current[attr] : current[attr] = val;\n      } // Update the `id`.\n\n\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute); // Trigger all relevant attribute changes.\n\n      if (!silent) {\n        if (changes.length) this._pending = options;\n\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      } // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n\n\n      if (changing) return this;\n\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function (attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {\n        unset: true\n      }));\n    },\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function (options) {\n      var attrs = {};\n\n      for (var key in this.attributes) attrs[key] = void 0;\n\n      return this.set(attrs, _.extend({}, options, {\n        unset: true\n      }));\n    },\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function (attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function (diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      var hasChanged;\n\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n        hasChanged = true;\n      }\n\n      return hasChanged ? changed : false;\n    },\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function (attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function () {\n      return _.clone(this._previousAttributes);\n    },\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function (options) {\n      options = _.extend({\n        parse: true\n      }, options);\n      var model = this;\n      var success = options.success;\n\n      options.success = function (resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function (key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({\n        validate: true,\n        parse: true\n      }, options);\n      var wait = options.wait; // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      } // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n\n\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n\n      options.success = function (resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n\n      wrapError(this, options); // Set temporary attributes if `{wait: true}` to properly find new ids.\n\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n      var method = this.isNew() ? 'create' : options.patch ? 'patch' : 'update';\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options); // Restore attributes.\n\n      this.attributes = attributes;\n      return xhr;\n    },\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function (options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function () {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function (resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n\n      if (!wait) destroy();\n      return xhr;\n    },\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function () {\n      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function (resp, options) {\n      return resp;\n    },\n    // Create a new model with identical attributes to this one.\n    clone: function () {\n      return new this.constructor(this.attributes);\n    },\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function () {\n      return !this.has(this.idAttribute);\n    },\n    // Check if the model is currently in a valid state.\n    isValid: function (options) {\n      return this._validate({}, _.extend({}, options, {\n        validate: true\n      }));\n    },\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function (attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {\n        validationError: error\n      }));\n      return false;\n    }\n  }); // Backbone.Collection\n  // -------------------\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n\n\n  var Collection = Backbone.Collection = function (models, options) {\n    options || (options = {});\n    this.preinitialize.apply(this, arguments);\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n\n    this._reset();\n\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({\n      silent: true\n    }, options));\n  }; // Default options for `Collection#set`.\n\n\n  var setOptions = {\n    add: true,\n    remove: true,\n    merge: true\n  };\n  var addOptions = {\n    add: true,\n    remove: false\n  }; // Splices `insert` into `array` at index `at`.\n\n  var splice = function (array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  }; // Define the Collection's inheritable methods.\n\n\n  _.extend(Collection.prototype, Events, {\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n    // preinitialize is an empty function by default. You can override it with a function\n    // or object.  preinitialize will run before any instantiation logic is run in the Collection.\n    preinitialize: function () {},\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function () {},\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function (options) {\n      return this.map(function (model) {\n        return model.toJSON(options);\n      });\n    },\n    // Proxy `Backbone.sync` by default.\n    sync: function () {\n      return Backbone.sync.apply(this, arguments);\n    },\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function (models, options) {\n      return this.set(models, _.extend({\n        merge: false\n      }, options, addOptions));\n    },\n    // Remove a model, or a list of models from the set.\n    remove: function (models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var removed = this._removeModels(models, options);\n\n      if (!options.silent && removed.length) {\n        options.changes = {\n          added: [],\n          merged: [],\n          removed: removed\n        };\n        this.trigger('update', this, options);\n      }\n\n      return singular ? removed[0] : removed;\n    },\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function (models, options) {\n      if (models == null) return;\n      options = _.extend({}, setOptions, options);\n\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null; // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n\n      var model, i;\n\n      for (i = 0; i < models.length; i++) {\n        model = models[i]; // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n\n        var existing = this.get(model);\n\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n\n          models[i] = existing; // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n\n          if (model) {\n            toAdd.push(model);\n\n            this._addReference(model, options);\n\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      } // Remove stale models.\n\n\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n\n        if (toRemove.length) this._removeModels(toRemove, options);\n      } // See if sorting is needed, update `length` and splice in new models.\n\n\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function (m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      } // Silently sort the collection if appropriate.\n\n\n      if (sort) this.sort({\n        silent: true\n      }); // Unless silenced, it's time to fire all appropriate add/sort/update events.\n\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n\n        if (sort || orderChanged) this.trigger('sort', this, options);\n\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      } // Return the added (or merged) model (or models).\n\n\n      return singular ? models[0] : models;\n    },\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function (models, options) {\n      options = options ? _.clone(options) : {};\n\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n\n      options.previousModels = this.models;\n\n      this._reset();\n\n      models = this.add(models, _.extend({\n        silent: true\n      }, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n    // Add a model to the end of the collection.\n    push: function (model, options) {\n      return this.add(model, _.extend({\n        at: this.length\n      }, options));\n    },\n    // Remove a model from the end of the collection.\n    pop: function (options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n    // Add a model to the beginning of the collection.\n    unshift: function (model, options) {\n      return this.add(model, _.extend({\n        at: 0\n      }, options));\n    },\n    // Remove a model from the beginning of the collection.\n    shift: function (options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n    // Slice out a sub-array of models from the collection.\n    slice: function () {\n      return slice.apply(this.models, arguments);\n    },\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function (obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] || this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj)] || obj.cid && this._byId[obj.cid];\n    },\n    // Returns `true` if the model is in the collection.\n    has: function (obj) {\n      return this.get(obj) != null;\n    },\n    // Get the model at the given index.\n    at: function (index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function (attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function (attrs) {\n      return this.where(attrs, true);\n    },\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function (options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = comparator.bind(this); // Run sort based on type of `comparator`.\n\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n    // Pluck an attribute from each model in the collection.\n    pluck: function (attr) {\n      return this.map(attr + '');\n    },\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function (options) {\n      options = _.extend({\n        parse: true\n      }, options);\n      var success = options.success;\n      var collection = this;\n\n      options.success = function (resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function (model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n\n      options.success = function (m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n\n      model.save(null, options);\n      return model;\n    },\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function (resp, options) {\n      return resp;\n    },\n    // Create a new collection with an identical list of models as this one.\n    clone: function () {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n    // Define how to uniquely identify models in the collection.\n    modelId: function (attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n    // Get an iterator of all models in this collection.\n    values: function () {\n      return new CollectionIterator(this, ITERATOR_VALUES);\n    },\n    // Get an iterator of all model IDs in this collection.\n    keys: function () {\n      return new CollectionIterator(this, ITERATOR_KEYS);\n    },\n    // Get an iterator of all [ID, model] tuples in this collection.\n    entries: function () {\n      return new CollectionIterator(this, ITERATOR_KEYSVALUES);\n    },\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function () {\n      this.length = 0;\n      this.models = [];\n      this._byId = {};\n    },\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function (attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n    // Internal method called by both remove and set.\n    _removeModels: function (models, options) {\n      var removed = [];\n\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--; // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n\n        this._removeReference(model, options);\n      }\n\n      return removed;\n    },\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function (model) {\n      return model instanceof Model;\n    },\n    // Internal method to create a model's ties to a collection.\n    _addReference: function (model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function (model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function (event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n\n      this.trigger.apply(this, arguments);\n    }\n  }); // Defining an @@iterator method implements JavaScript's Iterable protocol.\n  // In modern ES2015 browsers, this value is found at Symbol.iterator.\n\n  /* global Symbol */\n\n\n  var $$iterator = typeof Symbol === 'function' && Symbol.iterator;\n\n  if ($$iterator) {\n    Collection.prototype[$$iterator] = Collection.prototype.values;\n  } // CollectionIterator\n  // ------------------\n  // A CollectionIterator implements JavaScript's Iterator protocol, allowing the\n  // use of `for of` loops in modern browsers and interoperation between\n  // Backbone.Collection and other JavaScript functions and third-party libraries\n  // which can operate on Iterables.\n\n\n  var CollectionIterator = function (collection, kind) {\n    this._collection = collection;\n    this._kind = kind;\n    this._index = 0;\n  }; // This \"enum\" defines the three possible kinds of values which can be emitted\n  // by a CollectionIterator that correspond to the values(), keys() and entries()\n  // methods on Collection, respectively.\n\n\n  var ITERATOR_VALUES = 1;\n  var ITERATOR_KEYS = 2;\n  var ITERATOR_KEYSVALUES = 3; // All Iterators should themselves be Iterable.\n\n  if ($$iterator) {\n    CollectionIterator.prototype[$$iterator] = function () {\n      return this;\n    };\n  }\n\n  CollectionIterator.prototype.next = function () {\n    if (this._collection) {\n      // Only continue iterating if the iterated collection is long enough.\n      if (this._index < this._collection.length) {\n        var model = this._collection.at(this._index);\n\n        this._index++; // Construct a value depending on what kind of values should be iterated.\n\n        var value;\n\n        if (this._kind === ITERATOR_VALUES) {\n          value = model;\n        } else {\n          var id = this._collection.modelId(model.attributes);\n\n          if (this._kind === ITERATOR_KEYS) {\n            value = id;\n          } else {\n            // ITERATOR_KEYSVALUES\n            value = [id, model];\n          }\n        }\n\n        return {\n          value: value,\n          done: false\n        };\n      } // Once exhausted, remove the reference to the collection so future\n      // calls to the next method always return done.\n\n\n      this._collection = void 0;\n    }\n\n    return {\n      value: void 0,\n      done: true\n    };\n  }; // Backbone.View\n  // -------------\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n\n\n  var View = Backbone.View = function (options) {\n    this.cid = _.uniqueId('view');\n    this.preinitialize.apply(this, arguments);\n\n    _.extend(this, _.pick(options, viewOptions));\n\n    this._ensureElement();\n\n    this.initialize.apply(this, arguments);\n  }; // Cached regex to split keys for `delegate`.\n\n\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/; // List of view options to be set as properties.\n\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events']; // Set up all inheritable **Backbone.View** properties and methods.\n\n  _.extend(View.prototype, Events, {\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function (selector) {\n      return this.$el.find(selector);\n    },\n    // preinitialize is an empty function by default. You can override it with a function\n    // or object.  preinitialize will run before any instantiation logic is run in the View\n    preinitialize: function () {},\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function () {},\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function () {\n      return this;\n    },\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function () {\n      this._removeElement();\n\n      this.stopListening();\n      return this;\n    },\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function () {\n      this.$el.remove();\n    },\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function (element) {\n      this.undelegateEvents();\n\n      this._setElement(element);\n\n      this.delegateEvents();\n      return this;\n    },\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function (el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function (events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], method.bind(this));\n      }\n\n      return this;\n    },\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function (eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function () {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function (eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function (tagName) {\n      return document.createElement(tagName);\n    },\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function () {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function (attributes) {\n      this.$el.attr(attributes);\n    }\n  }); // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n\n\n  var addMethod = function (base, length, method, attribute) {\n    switch (length) {\n      case 1:\n        return function () {\n          return base[method](this[attribute]);\n        };\n\n      case 2:\n        return function (value) {\n          return base[method](this[attribute], value);\n        };\n\n      case 3:\n        return function (iteratee, context) {\n          return base[method](this[attribute], cb(iteratee, this), context);\n        };\n\n      case 4:\n        return function (iteratee, defaultVal, context) {\n          return base[method](this[attribute], cb(iteratee, this), defaultVal, context);\n        };\n\n      default:\n        return function () {\n          var args = slice.call(arguments);\n          args.unshift(this[attribute]);\n          return base[method].apply(base, args);\n        };\n    }\n  };\n\n  var addUnderscoreMethods = function (Class, base, methods, attribute) {\n    _.each(methods, function (length, method) {\n      if (base[method]) Class.prototype[method] = addMethod(base, length, method, attribute);\n    });\n  }; // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n\n\n  var cb = function (iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function (model) {\n      return model.get(iteratee);\n    };\n    return iteratee;\n  };\n\n  var modelMatcher = function (attrs) {\n    var matcher = _.matches(attrs);\n\n    return function (model) {\n      return matcher(model.attributes);\n    };\n  }; // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n\n\n  var collectionMethods = {\n    forEach: 3,\n    each: 3,\n    map: 3,\n    collect: 3,\n    reduce: 0,\n    foldl: 0,\n    inject: 0,\n    reduceRight: 0,\n    foldr: 0,\n    find: 3,\n    detect: 3,\n    filter: 3,\n    select: 3,\n    reject: 3,\n    every: 3,\n    all: 3,\n    some: 3,\n    any: 3,\n    include: 3,\n    includes: 3,\n    contains: 3,\n    invoke: 0,\n    max: 3,\n    min: 3,\n    toArray: 1,\n    size: 1,\n    first: 3,\n    head: 3,\n    take: 3,\n    initial: 3,\n    rest: 3,\n    tail: 3,\n    drop: 3,\n    last: 3,\n    without: 0,\n    difference: 0,\n    indexOf: 3,\n    shuffle: 1,\n    lastIndexOf: 3,\n    isEmpty: 1,\n    chain: 1,\n    sample: 3,\n    partition: 3,\n    groupBy: 3,\n    countBy: 3,\n    sortBy: 3,\n    indexBy: 3,\n    findIndex: 3,\n    findLastIndex: 3\n  }; // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n\n  var modelMethods = {\n    keys: 1,\n    values: 1,\n    pairs: 1,\n    invert: 1,\n    pick: 0,\n    omit: 0,\n    chain: 1,\n    isEmpty: 1\n  }; // Mix in each Underscore method as a proxy to `Collection#models`.\n\n  _.each([[Collection, collectionMethods, 'models'], [Model, modelMethods, 'attributes']], function (config) {\n    var Base = config[0],\n        methods = config[1],\n        attribute = config[2];\n\n    Base.mixin = function (obj) {\n      var mappings = _.reduce(_.functions(obj), function (memo, name) {\n        memo[name] = 0;\n        return memo;\n      }, {});\n\n      addUnderscoreMethods(Base, obj, mappings, attribute);\n    };\n\n    addUnderscoreMethods(Base, _, methods, attribute);\n  }); // Backbone.sync\n  // -------------\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n\n\n  Backbone.sync = function (method, model, options) {\n    var type = methodMap[method]; // Default options, unless specified.\n\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    }); // Default JSON-request options.\n\n\n    var params = {\n      type: type,\n      dataType: 'json'\n    }; // Ensure that we have a URL.\n\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    } // Ensure that we have the appropriate request data.\n\n\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    } // For older servers, emulate JSON by encoding the request into an HTML-form.\n\n\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {\n        model: params.data\n      } : {};\n    } // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n\n\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n\n      options.beforeSend = function (xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    } // Don't process data on a non-GET request.\n\n\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    } // Pass along `textStatus` and `errorThrown` from jQuery.\n\n\n    var error = options.error;\n\n    options.error = function (xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    }; // Make the request, allowing the user to override any Ajax options.\n\n\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  }; // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n\n\n  var methodMap = {\n    create: 'POST',\n    update: 'PUT',\n    patch: 'PATCH',\n    delete: 'DELETE',\n    read: 'GET'\n  }; // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n\n  Backbone.ajax = function () {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  }; // Backbone.Router\n  // ---------------\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n\n\n  var Router = Backbone.Router = function (options) {\n    options || (options = {});\n    this.preinitialize.apply(this, arguments);\n    if (options.routes) this.routes = options.routes;\n\n    this._bindRoutes();\n\n    this.initialize.apply(this, arguments);\n  }; // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n\n\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam = /(\\(\\?)?:\\w+/g;\n  var splatParam = /\\*\\w+/g;\n  var escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g; // Set up all inheritable **Backbone.Router** properties and methods.\n\n  _.extend(Router.prototype, Events, {\n    // preinitialize is an empty function by default. You can override it with a function\n    // or object.  preinitialize will run before any instantiation logic is run in the Router.\n    preinitialize: function () {},\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function () {},\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function (route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function (fragment) {\n        var args = router._extractParameters(route, fragment);\n\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function (callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function (fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function () {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n\n      var route,\n          routes = _.keys(this.routes);\n\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function (route) {\n      route = route.replace(escapeRegExp, '\\\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, function (match, optional) {\n        return optional ? match : '([^/?]+)';\n      }).replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function (route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function (param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n  }); // Backbone.History\n  // ----------------\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n\n\n  var History = Backbone.History = function () {\n    this.handlers = [];\n    this.checkUrl = this.checkUrl.bind(this); // Ensure that `History` can be used outside of the browser.\n\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  }; // Cached regex for stripping a leading hash/slash and trailing space.\n\n\n  var routeStripper = /^[#\\/]|\\s+$/g; // Cached regex for stripping leading and trailing slashes.\n\n  var rootStripper = /^\\/+|\\/+$/g; // Cached regex for stripping urls of hash.\n\n  var pathStripper = /#.*$/; // Has the history handling already been started?\n\n  History.started = false; // Set up all inheritable **Backbone.History** properties and methods.\n\n  _.extend(History.prototype, Events, {\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n    // Are we at the app root?\n    atRoot: function () {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n    // Does the pathname match the root?\n    matchRoot: function () {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function (fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function () {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function (window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n    // Get the pathname and search params, without the root.\n    getPath: function () {\n      var path = this.decodeFragment(this.location.pathname + this.getSearch()).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function (fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n\n      return fragment.replace(routeStripper, '');\n    },\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function (options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true; // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n\n      this.options = _.extend({\n        root: '/'\n      }, this.options, options);\n      this.root = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState = !!this.options.pushState;\n      this._hasPushState = !!(this.history && this.history.pushState);\n      this._usePushState = this._wantsPushState && this._hasPushState;\n      this.fragment = this.getFragment(); // Normalize root to always include a leading and trailing slash.\n\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/'); // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n\n      if (this._wantsHashChange && this._wantsPushState) {\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath()); // Return immediately as browser will do redirect to new url\n\n          return true; // Or if we've started out with a hash-based route, but we're currently\n          // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {\n            replace: true\n          });\n        }\n      } // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n\n\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body; // Using `appendChild` will throw on IE < 9 if the document is not ready.\n\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      } // Add a cross-platform `addEventListener` shim for older browsers.\n\n\n      var addEventListener = window.addEventListener || function (eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      }; // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n\n\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function () {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function (eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      }; // Remove window listeners.\n\n\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      } // Clean up the iframe if necessary.\n\n\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      } // Some environments will throw when clearing an undefined interval.\n\n\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function (route, callback) {\n      this.handlers.unshift({\n        route: route,\n        callback: callback\n      });\n    },\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function (e) {\n      var current = this.getFragment(); // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function (fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function (handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function (fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {\n        trigger: !!options\n      }; // Normalize the fragment.\n\n      fragment = this.getFragment(fragment || ''); // Don't include a trailing slash on the root.\n\n      var rootPath = this.root;\n\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n\n      var url = rootPath + fragment; // Strip the fragment of the query and hash for matching.\n\n      fragment = fragment.replace(pathStripper, ''); // Decode for matching.\n\n      var decodedFragment = this.decodeFragment(fragment);\n      if (this.fragment === decodedFragment) return;\n      this.fragment = decodedFragment; // If pushState is available, we use it to set the fragment as a real URL.\n\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url); // If hash changes haven't been explicitly disabled, update the hash\n        // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow; // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        } // If you've told us that you explicitly don't want fallback hashchange-\n        // based history, then `navigate` becomes a page refresh.\n\n      } else {\n        return this.location.assign(url);\n      }\n\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function (location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n  }); // Create the default Backbone.history.\n\n\n  Backbone.history = new History(); // Helpers\n  // -------\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n\n  var extend = function (protoProps, staticProps) {\n    var parent = this;\n    var child; // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function () {\n        return parent.apply(this, arguments);\n      };\n    } // Add static properties to the constructor function, if supplied.\n\n\n    _.extend(child, parent, staticProps); // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n\n\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child; // Set a convenience property in case the parent's prototype is needed\n    // later.\n\n    child.__super__ = parent.prototype;\n    return child;\n  }; // Set up inheritance for the model, collection, router, view and history.\n\n\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend; // Throw an error when a URL is needed, and none is supplied.\n\n  var urlError = function () {\n    throw new Error('A \"url\" property or function must be specified');\n  }; // Wrap an optional error callback with a fallback error event.\n\n\n  var wrapError = function (model, options) {\n    var error = options.error;\n\n    options.error = function (resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(44)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(7), __webpack_require__(15), __webpack_require__(32), __webpack_require__(16), __webpack_require__(83), __webpack_require__(54), __webpack_require__(85), __webpack_require__(34), __webpack_require__(86), __webpack_require__(91), __webpack_require__(17), __webpack_require__(95), __webpack_require__(28), __webpack_require__(97), __webpack_require__(100), __webpack_require__(23), __webpack_require__(101), __webpack_require__(74), __webpack_require__(18), __webpack_require__(102), __webpack_require__(103), __webpack_require__(104), __webpack_require__(105), __webpack_require__(108), __webpack_require__(35), __webpack_require__(109), __webpack_require__(110), __webpack_require__(111), __webpack_require__(112), __webpack_require__(114), __webpack_require__(115)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9qcXVlcnkuanM/OTUzNyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsc0JBRk8sRUFHUCx1QkFITyxFQUlQLHVCQUpPLEVBS1AsdUJBTE8sRUFNUCx1QkFOTyxFQU9QLHVCQVBPLEVBUVAsdUJBUk8sRUFTUCx1QkFUTyxFQVVQLHVCQVZPLEVBV1AsdUJBWE8sRUFZUCx1QkFaTyxFQWFQLHVCQWJPLEVBY1AsdUJBZE8sRUFlUCx1QkFmTyxFQWdCUCx3QkFoQk8sRUFpQlAsdUJBakJPLEVBa0JQLHdCQWxCTyxFQW1CUCx1QkFuQk8sRUFvQlAsdUJBcEJPLEVBcUJQLHdCQXJCTyxFQXNCUCx3QkF0Qk8sRUF1QlAsd0JBdkJPLEVBd0JQLHdCQXhCTyxFQXlCUCx3QkF6Qk8sRUEwQlAsdUJBMUJPLEVBMkJQLHdCQTNCTyxFQTRCUCx3QkE1Qk8sRUE2QlAsd0JBN0JPLEVBOEJQLHdCQTlCTyxFQStCUCx3QkEvQk8sRUFnQ1Asd0JBaENPLENBQUYsbUNBaUNILFVBQVVDLE1BQVYsRUFBbUI7QUFFdEI7O0FBRUEsU0FBT0EsTUFBUDtBQUVDLENBdkNLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4vY29yZVwiLFxuXHRcIi4vc2VsZWN0b3JcIixcblx0XCIuL3RyYXZlcnNpbmdcIixcblx0XCIuL2NhbGxiYWNrc1wiLFxuXHRcIi4vZGVmZXJyZWRcIixcblx0XCIuL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2tcIixcblx0XCIuL2NvcmUvcmVhZHlcIixcblx0XCIuL2RhdGFcIixcblx0XCIuL3F1ZXVlXCIsXG5cdFwiLi9xdWV1ZS9kZWxheVwiLFxuXHRcIi4vYXR0cmlidXRlc1wiLFxuXHRcIi4vZXZlbnRcIixcblx0XCIuL2V2ZW50L2ZvY3VzaW5cIixcblx0XCIuL21hbmlwdWxhdGlvblwiLFxuXHRcIi4vbWFuaXB1bGF0aW9uL19ldmFsVXJsXCIsXG5cdFwiLi93cmFwXCIsXG5cdFwiLi9jc3NcIixcblx0XCIuL2Nzcy9oaWRkZW5WaXNpYmxlU2VsZWN0b3JzXCIsXG5cdFwiLi9zZXJpYWxpemVcIixcblx0XCIuL2FqYXhcIixcblx0XCIuL2FqYXgveGhyXCIsXG5cdFwiLi9hamF4L3NjcmlwdFwiLFxuXHRcIi4vYWpheC9qc29ucFwiLFxuXHRcIi4vYWpheC9sb2FkXCIsXG5cdFwiLi9ldmVudC9hamF4XCIsXG5cdFwiLi9lZmZlY3RzXCIsXG5cdFwiLi9lZmZlY3RzL2FuaW1hdGVkU2VsZWN0b3JcIixcblx0XCIuL29mZnNldFwiLFxuXHRcIi4vZGltZW5zaW9uc1wiLFxuXHRcIi4vZGVwcmVjYXRlZFwiLFxuXHRcIi4vZXhwb3J0cy9hbWRcIixcblx0XCIuL2V4cG9ydHMvZ2xvYmFsXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5yZXR1cm4galF1ZXJ5O1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return window.document;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvZG9jdW1lbnQuanM/OGE5YSJdLCJuYW1lcyI6WyJkZWZpbmUiLCJ3aW5kb3ciLCJkb2N1bWVudCJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEI7O0FBRUEsU0FBT0MsTUFBTSxDQUFDQyxRQUFkO0FBQ0EsQ0FKSztBQUFBLG9HQUFOIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gd2luZG93LmRvY3VtZW50O1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(79)], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9zZWxlY3Rvci5qcz83NzJjIl0sIm5hbWVzIjpbImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQUUsdUJBQUYsQ0FBRixtQ0FBMkIsWUFBVztBQUMzQztBQUNBLENBRks7QUFBQSxvR0FBTiIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbIFwiLi9zZWxlY3Rvci1zaXp6bGVcIiBdLCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Initialize a jQuery object\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(3), __webpack_require__(52), __webpack_require__(53)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, isFunction, rsingleTag) {\n  "use strict"; // A central reference to the root jQuery(document)\n\n  var rootjQuery,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  // Shortcut simple #id case for speed\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      init = jQuery.fn.init = function (selector, context, root) {\n    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)\n\n    if (!selector) {\n      return this;\n    } // Method init() accepts an alternate rootjQuery\n    // so migrate can support jQuery.sub (gh-2101)\n\n\n    root = root || rootjQuery; // Handle HTML strings\n\n    if (typeof selector === "string") {\n      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n      } else {\n        match = rquickExpr.exec(selector);\n      } // Match html or make sure no context is specified for #id\n\n\n      if (match && (match[1] || !context)) {\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (isFunction(this[match])) {\n                this[match](context[match]); // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this; // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]);\n\n          if (elem) {\n            // Inject the element directly into the jQuery object\n            this[0] = elem;\n            this.length = 1;\n          }\n\n          return this;\n        } // HANDLE: $(expr, $(...))\n\n      } else if (!context || context.jquery) {\n        return (context || root).find(selector); // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      } // HANDLE: $(DOMElement)\n\n    } else if (selector.nodeType) {\n      this[0] = selector;\n      this.length = 1;\n      return this; // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (isFunction(selector)) {\n      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    return jQuery.makeArray(selector, this);\n  }; // Give the init function the jQuery prototype for later instantiation\n\n\n  init.prototype = jQuery.fn; // Initialize central reference\n\n  rootjQuery = jQuery(document);\n  return init;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(55)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Data) {\n  "use strict";\n\n  return new Data();\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9kYXRhL3Zhci9kYXRhUHJpdi5qcz9kM2NkIl0sIm5hbWVzIjpbImRlZmluZSIsIkRhdGEiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsSUFBVixFQUFpQjtBQUNuQjs7QUFFQSxTQUFPLElBQUlBLElBQUosRUFBUDtBQUNBLENBTks7QUFBQSxvR0FBTiIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vRGF0YVwiXG5dLCBmdW5jdGlvbiggRGF0YSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIG5ldyBEYXRhKCk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // Only count HTML whitespace\n  // Other whitespace should count in values\n  // https://infra.spec.whatwg.org/#ascii-whitespace\n\n  return /[^\\x20\\t\\r\\n\\f]+/g;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvcm5vdGh0bWx3aGl0ZS5qcz81NGFkIl0sIm5hbWVzIjpbImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEIsZUFEa0IsQ0FHbEI7QUFDQTtBQUNBOztBQUNBLFNBQVMsbUJBQVQ7QUFDQSxDQVBLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvLyBPbmx5IGNvdW50IEhUTUwgd2hpdGVzcGFjZVxuXHQvLyBPdGhlciB3aGl0ZXNwYWNlIHNob3VsZCBjb3VudCBpbiB2YWx1ZXNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2FzY2lpLXdoaXRlc3BhY2Vcblx0cmV0dXJuICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // All support tests are defined in their respective modules.\n\n  return {};\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvc3VwcG9ydC5qcz84NDU3Il0sIm5hbWVzIjpbImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEIsZUFEa0IsQ0FHbEI7O0FBQ0EsU0FBTyxFQUFQO0FBQ0EsQ0FMSztBQUFBLG9HQUFOIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0Ly8gQWxsIHN1cHBvcnQgdGVzdHMgYXJlIGRlZmluZWQgaW4gdGhlaXIgcmVzcGVjdGl2ZSBtb2R1bGVzLlxuXHRyZXR1cm4ge307XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  ;\n  return nodeName;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL25vZGVOYW1lLmpzPzM0YWIiXSwibmFtZXMiOlsiZGVmaW5lIiwibm9kZU5hbWUiLCJlbGVtIiwibmFtZSIsInRvTG93ZXJDYXNlIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUVuQjs7QUFFQSxXQUFTQyxRQUFULENBQW1CQyxJQUFuQixFQUF5QkMsSUFBekIsRUFBZ0M7QUFFOUIsV0FBT0QsSUFBSSxDQUFDRCxRQUFMLElBQWlCQyxJQUFJLENBQUNELFFBQUwsQ0FBY0csV0FBZCxPQUFnQ0QsSUFBSSxDQUFDQyxXQUFMLEVBQXhEO0FBRUQ7O0FBQUE7QUFFRCxTQUFPSCxRQUFQO0FBRUMsQ0FaSztBQUFBLG9HQUFOIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xuXG5yZXR1cm4gbm9kZU5hbWU7XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(14), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, isFunction) {\n  "use strict"; // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it\'s a function\n\n  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n        len = elems.length,\n        bulk = key == null; // Sets many values\n\n    if (toType(key) === "object") {\n      chainable = true;\n\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      } // Sets one value\n\n    } else if (value !== undefined) {\n      chainable = true;\n\n      if (!isFunction(value)) {\n        raw = true;\n      }\n\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null; // ...except when executing function values\n        } else {\n          bulk = fn;\n\n          fn = function (elem, key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n\n    if (chainable) {\n      return elems;\n    } // Gets\n\n\n    if (bulk) {\n      return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n  };\n\n  return access;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL2FjY2Vzcy5qcz8zMTNmIl0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsInRvVHlwZSIsImlzRnVuY3Rpb24iLCJhY2Nlc3MiLCJlbGVtcyIsImZuIiwia2V5IiwidmFsdWUiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImkiLCJsZW4iLCJsZW5ndGgiLCJidWxrIiwidW5kZWZpbmVkIiwiY2FsbCIsImVsZW0iXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sRUFHUCxzQkFITyxDQUFGLG1DQUlILFVBQVVDLE1BQVYsRUFBa0JDLE1BQWxCLEVBQTBCQyxVQUExQixFQUF1QztBQUUxQyxlQUYwQyxDQUkxQztBQUNBOztBQUNBLE1BQUlDLE1BQU0sR0FBRyxVQUFVQyxLQUFWLEVBQWlCQyxFQUFqQixFQUFxQkMsR0FBckIsRUFBMEJDLEtBQTFCLEVBQWlDQyxTQUFqQyxFQUE0Q0MsUUFBNUMsRUFBc0RDLEdBQXRELEVBQTREO0FBQ3hFLFFBQUlDLENBQUMsR0FBRyxDQUFSO0FBQUEsUUFDQ0MsR0FBRyxHQUFHUixLQUFLLENBQUNTLE1BRGI7QUFBQSxRQUVDQyxJQUFJLEdBQUdSLEdBQUcsSUFBSSxJQUZmLENBRHdFLENBS3hFOztBQUNBLFFBQUtMLE1BQU0sQ0FBRUssR0FBRixDQUFOLEtBQWtCLFFBQXZCLEVBQWtDO0FBQ2pDRSxlQUFTLEdBQUcsSUFBWjs7QUFDQSxXQUFNRyxDQUFOLElBQVdMLEdBQVgsRUFBaUI7QUFDaEJILGNBQU0sQ0FBRUMsS0FBRixFQUFTQyxFQUFULEVBQWFNLENBQWIsRUFBZ0JMLEdBQUcsQ0FBRUssQ0FBRixDQUFuQixFQUEwQixJQUExQixFQUFnQ0YsUUFBaEMsRUFBMENDLEdBQTFDLENBQU47QUFDQSxPQUpnQyxDQU1sQzs7QUFDQyxLQVBELE1BT08sSUFBS0gsS0FBSyxLQUFLUSxTQUFmLEVBQTJCO0FBQ2pDUCxlQUFTLEdBQUcsSUFBWjs7QUFFQSxVQUFLLENBQUNOLFVBQVUsQ0FBRUssS0FBRixDQUFoQixFQUE0QjtBQUMzQkcsV0FBRyxHQUFHLElBQU47QUFDQTs7QUFFRCxVQUFLSSxJQUFMLEVBQVk7QUFFWDtBQUNBLFlBQUtKLEdBQUwsRUFBVztBQUNWTCxZQUFFLENBQUNXLElBQUgsQ0FBU1osS0FBVCxFQUFnQkcsS0FBaEI7QUFDQUYsWUFBRSxHQUFHLElBQUwsQ0FGVSxDQUlYO0FBQ0MsU0FMRCxNQUtPO0FBQ05TLGNBQUksR0FBR1QsRUFBUDs7QUFDQUEsWUFBRSxHQUFHLFVBQVVZLElBQVYsRUFBZ0JYLEdBQWhCLEVBQXFCQyxLQUFyQixFQUE2QjtBQUNqQyxtQkFBT08sSUFBSSxDQUFDRSxJQUFMLENBQVdoQixNQUFNLENBQUVpQixJQUFGLENBQWpCLEVBQTJCVixLQUEzQixDQUFQO0FBQ0EsV0FGRDtBQUdBO0FBQ0Q7O0FBRUQsVUFBS0YsRUFBTCxFQUFVO0FBQ1QsZUFBUU0sQ0FBQyxHQUFHQyxHQUFaLEVBQWlCRCxDQUFDLEVBQWxCLEVBQXVCO0FBQ3RCTixZQUFFLENBQ0RELEtBQUssQ0FBRU8sQ0FBRixDQURKLEVBQ1dMLEdBRFgsRUFDZ0JJLEdBQUcsR0FDcEJILEtBRG9CLEdBRXBCQSxLQUFLLENBQUNTLElBQU4sQ0FBWVosS0FBSyxDQUFFTyxDQUFGLENBQWpCLEVBQXdCQSxDQUF4QixFQUEyQk4sRUFBRSxDQUFFRCxLQUFLLENBQUVPLENBQUYsQ0FBUCxFQUFjTCxHQUFkLENBQTdCLENBSEMsQ0FBRjtBQUtBO0FBQ0Q7QUFDRDs7QUFFRCxRQUFLRSxTQUFMLEVBQWlCO0FBQ2hCLGFBQU9KLEtBQVA7QUFDQSxLQWpEdUUsQ0FtRHhFOzs7QUFDQSxRQUFLVSxJQUFMLEVBQVk7QUFDWCxhQUFPVCxFQUFFLENBQUNXLElBQUgsQ0FBU1osS0FBVCxDQUFQO0FBQ0E7O0FBRUQsV0FBT1EsR0FBRyxHQUFHUCxFQUFFLENBQUVELEtBQUssQ0FBRSxDQUFGLENBQVAsRUFBY0UsR0FBZCxDQUFMLEdBQTJCRyxRQUFyQztBQUNBLEdBekREOztBQTJEQSxTQUFPTixNQUFQO0FBRUMsQ0F2RUs7QUFBQSxvR0FBTiIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi9jb3JlL3RvVHlwZVwiLFxuXHRcIi4uL3Zhci9pc0Z1bmN0aW9uXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnksIHRvVHlwZSwgaXNGdW5jdGlvbiApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxucmV0dXJuIGFjY2VzcztcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(25), __webpack_require__(48)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (class2type, toString) {\n  "use strict";\n\n  function toType(obj) {\n    if (obj == null) {\n      return obj + "";\n    } // Support: Android <=2.3 only (functionish RegExp)\n\n\n    return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;\n  }\n\n  return toType;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL3RvVHlwZS5qcz81NDA2Il0sIm5hbWVzIjpbImRlZmluZSIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsInRvVHlwZSIsIm9iaiIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLEVBRVAsdUJBRk8sQ0FBRixtQ0FHSCxVQUFVQyxVQUFWLEVBQXNCQyxRQUF0QixFQUFpQztBQUVwQzs7QUFFQSxXQUFTQyxNQUFULENBQWlCQyxHQUFqQixFQUF1QjtBQUN0QixRQUFLQSxHQUFHLElBQUksSUFBWixFQUFtQjtBQUNsQixhQUFPQSxHQUFHLEdBQUcsRUFBYjtBQUNBLEtBSHFCLENBS3RCOzs7QUFDQSxXQUFPLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCLE9BQU9BLEdBQVAsS0FBZSxVQUExQyxHQUNOSCxVQUFVLENBQUVDLFFBQVEsQ0FBQ0csSUFBVCxDQUFlRCxHQUFmLENBQUYsQ0FBVixJQUFzQyxRQURoQyxHQUVOLE9BQU9BLEdBRlI7QUFHQTs7QUFFRCxTQUFPRCxNQUFQO0FBQ0MsQ0FuQks7QUFBQSxvR0FBTiIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL3Zhci9jbGFzczJ0eXBlXCIsXG5cdFwiLi4vdmFyL3RvU3RyaW5nXCJcbl0sIGZ1bmN0aW9uKCBjbGFzczJ0eXBlLCB0b1N0cmluZyApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuXG5yZXR1cm4gdG9UeXBlO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(30), __webpack_require__(81), __webpack_require__(82), __webpack_require__(51), __webpack_require__(12), __webpack_require__(8), __webpack_require__(53), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, indexOf, dir, siblings, rneedsContext, nodeName) {\n  "use strict";\n\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      // Methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.fn.extend({\n    has: function (target) {\n      var targets = jQuery(target, this),\n          l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function (selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          matched = [],\n          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there\'s no _selection_ context\n\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don\'t pass non-elements to Sizzle\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function (elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // Index in selector\n\n\n      if (typeof elem === "string") {\n        return indexOf.call(jQuery(elem), this[0]);\n      } // Locate the position of the desired element\n\n\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function (selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function (selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function (elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function (elem) {\n      return dir(elem, "parentNode");\n    },\n    parentsUntil: function (elem, i, until) {\n      return dir(elem, "parentNode", until);\n    },\n    next: function (elem) {\n      return sibling(elem, "nextSibling");\n    },\n    prev: function (elem) {\n      return sibling(elem, "previousSibling");\n    },\n    nextAll: function (elem) {\n      return dir(elem, "nextSibling");\n    },\n    prevAll: function (elem) {\n      return dir(elem, "previousSibling");\n    },\n    nextUntil: function (elem, i, until) {\n      return dir(elem, "nextSibling", until);\n    },\n    prevUntil: function (elem, i, until) {\n      return dir(elem, "previousSibling", until);\n    },\n    siblings: function (elem) {\n      return siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function (elem) {\n      return siblings(elem.firstChild);\n    },\n    contents: function (elem) {\n      if (typeof elem.contentDocument !== "undefined") {\n        return elem.contentDocument;\n      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don\'t support it.\n\n\n      if (nodeName(elem, "template")) {\n        elem = elem.content || elem;\n      }\n\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n\n      if (name.slice(-5) !== "Until") {\n        selector = until;\n      }\n\n      if (selector && typeof selector === "string") {\n        matched = jQuery.filter(selector, matched);\n      }\n\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        } // Reverse order for parents* and prev-derivatives\n\n\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n\n      return this.pushStack(matched);\n    };\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(24), __webpack_require__(32)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isFunction, slice) {\n  "use strict";\n\n  function Identity(v) {\n    return v;\n  }\n\n  function Thrower(ex) {\n    throw ex;\n  }\n\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject); // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject); // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      } // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn\'t unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n\n  jQuery.extend({\n    Deferred: function (func) {\n      var tuples = [// action, add listener, callbacks,\n      // ... .then handlers, argument index, [final state]\n      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],\n          state = "pending",\n          promise = {\n        state: function () {\n          return state;\n        },\n        always: function () {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        "catch": function (fn) {\n          return promise.then(null, fn);\n        },\n        // Keep pipe for back-compat\n        pipe: function ()\n        /* fnDone, fnFail, fnProgress */\n        {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (i, tuple) {\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && isFunction(returned.promise)) {\n                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                } else {\n                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        then: function (onFulfilled, onRejected, onProgress) {\n          var maxDepth = 0;\n\n          function resolve(depth, deferred, handler, special) {\n            return function () {\n              var that = this,\n                  args = arguments,\n                  mightThrow = function () {\n                var returned, then; // Support: Promises/A+ section 2.3.3.3.3\n                // https://promisesaplus.com/#point-59\n                // Ignore double-resolution attempts\n\n                if (depth < maxDepth) {\n                  return;\n                }\n\n                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\n                // https://promisesaplus.com/#point-48\n\n                if (returned === deferred.promise()) {\n                  throw new TypeError("Thenable self-resolution");\n                } // Support: Promises/A+ sections 2.3.3.1, 3.5\n                // https://promisesaplus.com/#point-54\n                // https://promisesaplus.com/#point-75\n                // Retrieve `then` only once\n\n\n                then = returned && ( // Support: Promises/A+ section 2.3.4\n                // https://promisesaplus.com/#point-64\n                // Only check objects and functions for thenability\n                typeof returned === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable\n\n                if (isFunction(then)) {\n                  // Special processors (notify) just wait for resolution\n                  if (special) {\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\n                  } else {\n                    // ...and disregard older resolution values\n                    maxDepth++;\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                  } // Handle all other returned values\n\n                } else {\n                  // Only substitute handlers pass on context\n                  // and multiple values (non-spec behavior)\n                  if (handler !== Identity) {\n                    that = undefined;\n                    args = [returned];\n                  } // Process the value(s)\n                  // Default process is resolve\n\n\n                  (special || deferred.resolveWith)(that, args);\n                }\n              },\n                  // Only normal processors (resolve) catch and reject exceptions\n              process = special ? mightThrow : function () {\n                try {\n                  mightThrow();\n                } catch (e) {\n                  if (jQuery.Deferred.exceptionHook) {\n                    jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                  } // Support: Promises/A+ section 2.3.3.3.4.1\n                  // https://promisesaplus.com/#point-61\n                  // Ignore post-resolution exceptions\n\n\n                  if (depth + 1 >= maxDepth) {\n                    // Only substitute handlers pass on context\n                    // and multiple values (non-spec behavior)\n                    if (handler !== Thrower) {\n                      that = undefined;\n                      args = [e];\n                    }\n\n                    deferred.rejectWith(that, args);\n                  }\n                }\n              }; // Support: Promises/A+ section 2.3.3.3.1\n              // https://promisesaplus.com/#point-57\n              // Re-resolve promises immediately to dodge false rejection from\n              // subsequent errors\n\n\n              if (depth) {\n                process();\n              } else {\n                // Call an optional hook to record the stack, in case of exception\n                // since it\'s otherwise lost when execution goes async\n                if (jQuery.Deferred.getStackHook) {\n                  process.stackTrace = jQuery.Deferred.getStackHook();\n                }\n\n                window.setTimeout(process);\n              }\n            };\n          }\n\n          return jQuery.Deferred(function (newDefer) {\n            // progress_handlers.add( ... )\n            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\n\n            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\n\n            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function (obj) {\n          return obj != null ? jQuery.extend(obj, promise) : promise;\n        }\n      },\n          deferred = {}; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[5]; // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n\n        promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = "resolved" (i.e., fulfilled)\n            // state = "rejected"\n            state = stateString;\n          }, // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable, // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable, // progress_callbacks.lock\n          tuples[0][2].lock, // progress_handlers.lock\n          tuples[0][3].lock);\n        } // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n\n\n        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);\n          return this;\n        }; // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n\n\n        deferred[tuple[0] + "With"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      promise.promise(deferred); // Call given func if any\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function (singleValue) {\n      var // count of uncompleted subordinates\n      remaining = arguments.length,\n          // count of unprocessed arguments\n      i = remaining,\n          // subordinate fulfillment data\n      resolveContexts = Array(i),\n          resolveValues = slice.call(arguments),\n          // the master Deferred\n      master = jQuery.Deferred(),\n          // subordinate callback factory\n      updateFunc = function (i) {\n        return function (value) {\n          resolveContexts[i] = this;\n          resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;\n\n          if (! --remaining) {\n            master.resolveWith(resolveContexts, resolveValues);\n          }\n        };\n      }; // Single- and empty arguments are adopted like Promise.resolve\n\n\n      if (remaining <= 1) {\n        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\n\n        if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return master.then();\n        }\n      } // Multiple arguments are aggregated like Promise.all array elements\n\n\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), master.reject);\n      }\n\n      return master.promise();\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(27), __webpack_require__(3), __webpack_require__(10), __webpack_require__(38), __webpack_require__(24), __webpack_require__(9), __webpack_require__(12), __webpack_require__(8), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, documentElement, isFunction, rnothtmlwhite, rcheckableType, slice, dataPriv, nodeName) {\n  "use strict";\n\n  var rkeyEvent = /^key/,\n      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Support: IE <=9 - 11+\n  // focus() and blur() are asynchronous, except when they are no-op.\n  // So expect focus to be synchronous when the element is already active,\n  // and blur to be synchronous when the element is not already active.\n  // (focus and blur are always synchronous in other supported browsers,\n  // this just defines when we can count on it).\n\n\n  function expectSync(elem, type) {\n    return elem === safeActiveElement() === (type === "focus");\n  } // Support: IE <=9 only\n  // Accessing document.activeElement can throw unexpectedly\n  // https://bugs.jquery.com/ticket/13393\n\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n\n  function on(elem, types, selector, data, fn, one) {\n    var origFn, type; // Types can be a map of types/handlers\n\n    if (typeof types === "object") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== "string") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n\n      for (type in types) {\n        on(elem, type, selector, data, types[type], one);\n      }\n\n      return elem;\n    }\n\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === "string") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n\n    if (one === 1) {\n      origFn = fn;\n\n      fn = function (event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      }; // Use same guid so caller can remove using origFn\n\n\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards\' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function (elem, types, handler, data, selector) {\n      var handleObjIn,\n          eventHandle,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.get(elem); // Don\'t attach events to noData or text/comment nodes (but allow plain objects)\n\n      if (!elemData) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\n\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element\'s event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = {};\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      } // Handle multiple events separated by a space\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n        if (!type) {\n          continue;\n        } // If event changes its type, use the special event handlers for the changed type\n\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(".")\n        }, handleObjIn); // Init the event handler queue if we\'re the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element\'s handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function (elem, types, handler, selector, mappedTypes) {\n      var j,\n          origCount,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove data and the expando if it\'s no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, "handle events");\n      }\n    },\n    dispatch: function (nativeEvent) {\n      // Make a writable jQuery.Event from the native event object\n      var event = jQuery.event.fix(nativeEvent);\n      var i,\n          j,\n          ret,\n          matched,\n          handleObj,\n          handlerQueue,\n          args = new Array(arguments.length),\n          handlers = (dataPriv.get(this, "events") || {})[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n      args[0] = event;\n\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event\'s.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function (event, handlers) {\n      var i,\n          handleObj,\n          sel,\n          matchedHandlers,\n          matchedSelectors,\n          handlerQueue = [],\n          delegateCount = handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n\n      if (delegateCount && // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType && // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === "click" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don\'t check non-elements (#13208)\n          // Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = handlers[i]; // Don\'t conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + " ";\n\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      cur = this;\n\n      if (delegateCount < handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    addProp: function (name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function (value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function (originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Claim the first handler\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            // dataPriv.set( el, "click", ... )\n            leverageNative(el, "click", returnTrue);\n          } // Return false to allow normal processing in the caller\n\n\n          return false;\n        },\n        trigger: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Force setup before triggering a click\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            leverageNative(el, "click");\n          } // Return non-false to allow normal event-path propagation\n\n\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we\'re currently inside a leveraged native-event stack\n        _default: function (event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");\n        }\n      },\n      beforeunload: {\n        postDispatch: function (event) {\n          // Support: Firefox 20+\n          // Firefox doesn\'t alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  }; // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n\n  function leverageNative(el, type, expectSync) {\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n    if (!expectSync) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n\n      return;\n    } // Register the controller as a special universal handler for all event namespaces\n\n\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function (event) {\n        var notAsync,\n            result,\n            saved = dataPriv.get(this, type);\n\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          // Saved data should be false in such cases, but might be a leftover capture object\n          // from an async native handler (gh-4350)\n          if (!saved.length) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = slice.call(arguments);\n            dataPriv.set(this, type, saved); // Trigger the native event and capture its result\n            // Support: IE <=9 - 11+\n            // focus() and blur() are asynchronous\n\n            notAsync = expectSync(this, type);\n            this[type]();\n            result = dataPriv.get(this, type);\n\n            if (saved !== result || notAsync) {\n              dataPriv.set(this, type, false);\n            } else {\n              result = {};\n            }\n\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault();\n              return result.value;\n            } // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering the\n            // native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          } // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n\n        } else if (saved.length) {\n          // ...and capture the result\n          dataPriv.set(this, type, {\n            value: jQuery.event.trigger( // Support: IE <=9 - 11+\n            // Extend with the prototype to reset the above stopImmediatePropagation()\n            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)\n          }); // Abort handling of the native event\n\n          event.stopImmediatePropagation();\n        }\n      }\n    });\n  }\n\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This "if" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the \'new\' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse; // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (#504, #13143)\n\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn\'t have one\n\n\n    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function () {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function () {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function () {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    }\n  }; // Includes all common event props including KeyEvent and MouseEvent specific props\n\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    "char": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: function (event) {\n      var button = event.button; // Add which for key events\n\n      if (event.which == null && rkeyEvent.test(event.type)) {\n        return event.charCode != null ? event.charCode : event.keyCode;\n      } // Add which for click: 1 === left; 2 === middle; 3 === right\n\n\n      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {\n        if (button & 1) {\n          return 1;\n        }\n\n        if (button & 2) {\n          return 3;\n        }\n\n        if (button & 4) {\n          return 2;\n        }\n\n        return 0;\n      }\n\n      return event.which;\n    }\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: "focusin",\n    blur: "focusout"\n  }, function (type, delegateType) {\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function () {\n        // Claim the first handler\n        // dataPriv.set( this, "focus", ... )\n        // dataPriv.set( this, "blur", ... )\n        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller\n\n        return false;\n      },\n      trigger: function () {\n        // Force setup before trigger\n        leverageNative(this, type); // Return non-false to allow normal event-path propagation\n\n        return true;\n      },\n      delegateType: delegateType\n    };\n  }); // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n\n  jQuery.each({\n    mouseenter: "mouseover",\n    mouseleave: "mouseout",\n    pointerenter: "pointerover",\n    pointerleave: "pointerout"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function (event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn);\n    },\n    one: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn, 1);\n    },\n    off: function (types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (typeof types === "object") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === "function") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(3), __webpack_require__(10), __webpack_require__(98), __webpack_require__(72), __webpack_require__(73), __webpack_require__(8), __webpack_require__(99), __webpack_require__(43), __webpack_require__(16), __webpack_require__(74) // jQuery.param\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, isFunction, rnothtmlwhite, location, nonce, rquery) {\n  "use strict";\n\n  var r20 = /%20/g,\n      rhash = /#.*$/,\n      rantiCache = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n      // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol "*" can be used\n   * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol "*" can be used\n   * 3) selection will start with transport dataType and THEN go to "*" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = "*/".concat("*"),\n      // Anchor tag for parsing the document origin\n  originAnchor = document.createElement("a");\n  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to "*"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== "string") {\n        func = dataTypeExpression;\n        dataTypeExpression = "*";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === "+") {\n            dataType = dataType.slice(1) || "*";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");\n  } // A special extend for ajax options\n  // that takes "flat" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var key,\n        deep,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n        type,\n        finalDataType,\n        firstDataType,\n        contents = s.contents,\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n    while (dataTypes[0] === "*") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");\n      }\n    } // Check if we\'re dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  }\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n\n\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        prev,\n        converters = {},\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift(); // Convert to each sequential dataType\n\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      } // Apply the dataFilter if provided\n\n\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n        // There\'s only work to do if current dataType is non-auto\n        if (current === "*") {\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== "*" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(" ");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s.throws) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: "parsererror",\n                  error: conv ? e : "No conversion from " + prev + " to " + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      state: "success",\n      data: response\n    };\n  }\n\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: "GET",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: "application/x-www-form-urlencoded; charset=UTF-8",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        "*": allTypes,\n        text: "text/plain",\n        html: "text/html",\n        xml: "application/xml, text/xml",\n        json: "application/json, text/javascript"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: "responseXML",\n        text: "responseText",\n        json: "responseJSON"\n      },\n      // Data converters\n      // Keys separate source (or catchall "*") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        "* text": String,\n        // Text to html (true = no transformation)\n        "text html": true,\n        // Evaluate text as a json expression\n        "text json": JSON.parse,\n        // Parse text as xml\n        "text xml": jQuery.parseXML\n      },\n      // For options that shouldn\'t be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn\'t be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function (target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function (url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (typeof url === "object") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n      var transport,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers\n      responseHeadersString,\n          responseHeaders,\n          // timeout handle\n      timeoutTimer,\n          // Url cleanup var\n      urlAnchor,\n          // Request state (becomes false upon send and true upon completion)\n      completed,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          // Loop variable\n      i,\n          // uncached part of the url\n      uncached,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks("once memory"),\n          // Status-dependent callbacks\n      statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // Default abort message\n      strAbort = "canceled",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function (key) {\n          var match;\n\n          if (completed) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase() + " "];\n          }\n\n          return match == null ? null : match.join(", ");\n        },\n        // Raw string\n        getAllResponseHeaders: function () {\n          return completed ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function (name, value) {\n          if (completed == null) {\n            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function (type) {\n          if (completed == null) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function (map) {\n          var code;\n\n          if (map) {\n            if (completed) {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            } else {\n              // Lazy-add the new callbacks in a way that preserves old ones\n              for (code in map) {\n                statusCode[code] = [statusCode[code], map[code]];\n              }\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function (statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn\'t match the current origin.\n\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n\n        try {\n          urlAnchor.href = s.url; // Support: IE <=8 - 11 only\n          // Anchor\'s host property isn\'t correctly set when s.url is relative\n\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== "string") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (completed) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n      // Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger("ajaxStart");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we\'re toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n\n      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url\n\n        if (s.data && (s.processData || typeof s.data === "string")) {\n          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it\'s not used in an eventual retry\n\n          delete s.data;\n        } // Add or update anti-cache param if needed\n\n\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, "$1");\n          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;\n        } // Put hash and anti-cache on the URL that will be requested (gh-1732)\n\n\n        s.url = cacheURL + uncached; // Change \'%20\' to \'+\' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {\n        s.data = s.data.replace(r20, "+");\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader("Content-Type", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // Aborting is no longer a cancellation\n\n\n      strAbort = "abort"; // Install callbacks on deferreds\n\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error); // Get transport\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, "No Transport");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxSend", [jqXHR, s]);\n        } // If request was aborted inside ajaxSend, stop there\n\n\n        if (completed) {\n          return jqXHR;\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort("timeout");\n          }, s.timeout);\n        }\n\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          } // Propagate others as results\n\n\n          done(-1, e);\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Ignore repeat invocations\n\n        if (completed) {\n          return;\n        }\n\n        completed = true; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || ""; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // Convert no matter what (that way responseXXX fields are always set)\n\n\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader("Last-Modified");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader("etag");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204 || s.type === "HEAD") {\n            statusText = "nocontent"; // if not modified\n          } else if (status === 304) {\n            statusText = "notmodified"; // If we have data, let\'s convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = "error";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(statusCode);\n        statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger("ajaxStop");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getJSON: function (url, data, callback) {\n      return jQuery.get(url, data, callback, "json");\n    },\n    getScript: function (url, callback) {\n      return jQuery.get(url, undefined, callback, "script");\n    }\n  });\n  jQuery.each(["get", "post"], function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      } // The url can be an options object (which then must have .url)\n\n\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js\n;\n\n(function (global, factory) {\n   true ? module.exports = factory() : undefined;\n})(this, function () {\n  'use strict';\n\n  var hookCallback;\n\n  function hooks() {\n    return hookCallback.apply(null, arguments);\n  } // This is done to register the method called with moment()\n  // without creating circular dependencies.\n\n\n  function setHookCallback(callback) {\n    hookCallback = callback;\n  }\n\n  function isArray(input) {\n    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n  }\n\n  function isObject(input) {\n    // IE8 will treat undefined and null as object if it wasn't for\n    // input != null\n    return input != null && Object.prototype.toString.call(input) === '[object Object]';\n  }\n\n  function isObjectEmpty(obj) {\n    if (Object.getOwnPropertyNames) {\n      return Object.getOwnPropertyNames(obj).length === 0;\n    } else {\n      var k;\n\n      for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  function isUndefined(input) {\n    return input === void 0;\n  }\n\n  function isNumber(input) {\n    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n  }\n\n  function isDate(input) {\n    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n  }\n\n  function map(arr, fn) {\n    var res = [],\n        i;\n\n    for (i = 0; i < arr.length; ++i) {\n      res.push(fn(arr[i], i));\n    }\n\n    return res;\n  }\n\n  function hasOwnProp(a, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n  }\n\n  function extend(a, b) {\n    for (var i in b) {\n      if (hasOwnProp(b, i)) {\n        a[i] = b[i];\n      }\n    }\n\n    if (hasOwnProp(b, 'toString')) {\n      a.toString = b.toString;\n    }\n\n    if (hasOwnProp(b, 'valueOf')) {\n      a.valueOf = b.valueOf;\n    }\n\n    return a;\n  }\n\n  function createUTC(input, format, locale, strict) {\n    return createLocalOrUTC(input, format, locale, strict, true).utc();\n  }\n\n  function defaultParsingFlags() {\n    // We need to deep clone this object.\n    return {\n      empty: false,\n      unusedTokens: [],\n      unusedInput: [],\n      overflow: -2,\n      charsLeftOver: 0,\n      nullInput: false,\n      invalidMonth: null,\n      invalidFormat: false,\n      userInvalidated: false,\n      iso: false,\n      parsedDateParts: [],\n      meridiem: null,\n      rfc2822: false,\n      weekdayMismatch: false\n    };\n  }\n\n  function getParsingFlags(m) {\n    if (m._pf == null) {\n      m._pf = defaultParsingFlags();\n    }\n\n    return m._pf;\n  }\n\n  var some;\n\n  if (Array.prototype.some) {\n    some = Array.prototype.some;\n  } else {\n    some = function (fun) {\n      var t = Object(this);\n      var len = t.length >>> 0;\n\n      for (var i = 0; i < len; i++) {\n        if (i in t && fun.call(this, t[i], i, t)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  }\n\n  function isValid(m) {\n    if (m._isValid == null) {\n      var flags = getParsingFlags(m);\n      var parsedParts = some.call(flags.parsedDateParts, function (i) {\n        return i != null;\n      });\n      var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);\n\n      if (m._strict) {\n        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;\n      }\n\n      if (Object.isFrozen == null || !Object.isFrozen(m)) {\n        m._isValid = isNowValid;\n      } else {\n        return isNowValid;\n      }\n    }\n\n    return m._isValid;\n  }\n\n  function createInvalid(flags) {\n    var m = createUTC(NaN);\n\n    if (flags != null) {\n      extend(getParsingFlags(m), flags);\n    } else {\n      getParsingFlags(m).userInvalidated = true;\n    }\n\n    return m;\n  } // Plugins that add properties should also add the key here (null value),\n  // so we can properly clone ourselves.\n\n\n  var momentProperties = hooks.momentProperties = [];\n\n  function copyConfig(to, from) {\n    var i, prop, val;\n\n    if (!isUndefined(from._isAMomentObject)) {\n      to._isAMomentObject = from._isAMomentObject;\n    }\n\n    if (!isUndefined(from._i)) {\n      to._i = from._i;\n    }\n\n    if (!isUndefined(from._f)) {\n      to._f = from._f;\n    }\n\n    if (!isUndefined(from._l)) {\n      to._l = from._l;\n    }\n\n    if (!isUndefined(from._strict)) {\n      to._strict = from._strict;\n    }\n\n    if (!isUndefined(from._tzm)) {\n      to._tzm = from._tzm;\n    }\n\n    if (!isUndefined(from._isUTC)) {\n      to._isUTC = from._isUTC;\n    }\n\n    if (!isUndefined(from._offset)) {\n      to._offset = from._offset;\n    }\n\n    if (!isUndefined(from._pf)) {\n      to._pf = getParsingFlags(from);\n    }\n\n    if (!isUndefined(from._locale)) {\n      to._locale = from._locale;\n    }\n\n    if (momentProperties.length > 0) {\n      for (i = 0; i < momentProperties.length; i++) {\n        prop = momentProperties[i];\n        val = from[prop];\n\n        if (!isUndefined(val)) {\n          to[prop] = val;\n        }\n      }\n    }\n\n    return to;\n  }\n\n  var updateInProgress = false; // Moment prototype object\n\n  function Moment(config) {\n    copyConfig(this, config);\n    this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n\n    if (!this.isValid()) {\n      this._d = new Date(NaN);\n    } // Prevent infinite loop in case updateOffset creates new moment\n    // objects.\n\n\n    if (updateInProgress === false) {\n      updateInProgress = true;\n      hooks.updateOffset(this);\n      updateInProgress = false;\n    }\n  }\n\n  function isMoment(obj) {\n    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;\n  }\n\n  function absFloor(number) {\n    if (number < 0) {\n      // -0 -> 0\n      return Math.ceil(number) || 0;\n    } else {\n      return Math.floor(number);\n    }\n  }\n\n  function toInt(argumentForCoercion) {\n    var coercedNumber = +argumentForCoercion,\n        value = 0;\n\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n      value = absFloor(coercedNumber);\n    }\n\n    return value;\n  } // compare two arrays, return the number of differences\n\n\n  function compareArrays(array1, array2, dontConvert) {\n    var len = Math.min(array1.length, array2.length),\n        lengthDiff = Math.abs(array1.length - array2.length),\n        diffs = 0,\n        i;\n\n    for (i = 0; i < len; i++) {\n      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {\n        diffs++;\n      }\n    }\n\n    return diffs + lengthDiff;\n  }\n\n  function warn(msg) {\n    if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {\n      console.warn('Deprecation warning: ' + msg);\n    }\n  }\n\n  function deprecate(msg, fn) {\n    var firstTime = true;\n    return extend(function () {\n      if (hooks.deprecationHandler != null) {\n        hooks.deprecationHandler(null, msg);\n      }\n\n      if (firstTime) {\n        var args = [];\n        var arg;\n\n        for (var i = 0; i < arguments.length; i++) {\n          arg = '';\n\n          if (typeof arguments[i] === 'object') {\n            arg += '\\n[' + i + '] ';\n\n            for (var key in arguments[0]) {\n              arg += key + ': ' + arguments[0][key] + ', ';\n            }\n\n            arg = arg.slice(0, -2); // Remove trailing comma and space\n          } else {\n            arg = arguments[i];\n          }\n\n          args.push(arg);\n        }\n\n        warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + new Error().stack);\n        firstTime = false;\n      }\n\n      return fn.apply(this, arguments);\n    }, fn);\n  }\n\n  var deprecations = {};\n\n  function deprecateSimple(name, msg) {\n    if (hooks.deprecationHandler != null) {\n      hooks.deprecationHandler(name, msg);\n    }\n\n    if (!deprecations[name]) {\n      warn(msg);\n      deprecations[name] = true;\n    }\n  }\n\n  hooks.suppressDeprecationWarnings = false;\n  hooks.deprecationHandler = null;\n\n  function isFunction(input) {\n    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n  }\n\n  function set(config) {\n    var prop, i;\n\n    for (i in config) {\n      prop = config[i];\n\n      if (isFunction(prop)) {\n        this[i] = prop;\n      } else {\n        this['_' + i] = prop;\n      }\n    }\n\n    this._config = config; // Lenient ordinal parsing accepts just a number in addition to\n    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n    // TODO: Remove \"ordinalParse\" fallback in next major release.\n\n    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\\d{1,2}/.source);\n  }\n\n  function mergeConfigs(parentConfig, childConfig) {\n    var res = extend({}, parentConfig),\n        prop;\n\n    for (prop in childConfig) {\n      if (hasOwnProp(childConfig, prop)) {\n        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n          res[prop] = {};\n          extend(res[prop], parentConfig[prop]);\n          extend(res[prop], childConfig[prop]);\n        } else if (childConfig[prop] != null) {\n          res[prop] = childConfig[prop];\n        } else {\n          delete res[prop];\n        }\n      }\n    }\n\n    for (prop in parentConfig) {\n      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {\n        // make sure changes to properties don't modify parent config\n        res[prop] = extend({}, res[prop]);\n      }\n    }\n\n    return res;\n  }\n\n  function Locale(config) {\n    if (config != null) {\n      this.set(config);\n    }\n  }\n\n  var keys;\n\n  if (Object.keys) {\n    keys = Object.keys;\n  } else {\n    keys = function (obj) {\n      var i,\n          res = [];\n\n      for (i in obj) {\n        if (hasOwnProp(obj, i)) {\n          res.push(i);\n        }\n      }\n\n      return res;\n    };\n  }\n\n  var defaultCalendar = {\n    sameDay: '[Today at] LT',\n    nextDay: '[Tomorrow at] LT',\n    nextWeek: 'dddd [at] LT',\n    lastDay: '[Yesterday at] LT',\n    lastWeek: '[Last] dddd [at] LT',\n    sameElse: 'L'\n  };\n\n  function calendar(key, mom, now) {\n    var output = this._calendar[key] || this._calendar['sameElse'];\n    return isFunction(output) ? output.call(mom, now) : output;\n  }\n\n  var defaultLongDateFormat = {\n    LTS: 'h:mm:ss A',\n    LT: 'h:mm A',\n    L: 'MM/DD/YYYY',\n    LL: 'MMMM D, YYYY',\n    LLL: 'MMMM D, YYYY h:mm A',\n    LLLL: 'dddd, MMMM D, YYYY h:mm A'\n  };\n\n  function longDateFormat(key) {\n    var format = this._longDateFormat[key],\n        formatUpper = this._longDateFormat[key.toUpperCase()];\n\n    if (format || !formatUpper) {\n      return format;\n    }\n\n    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n      return val.slice(1);\n    });\n    return this._longDateFormat[key];\n  }\n\n  var defaultInvalidDate = 'Invalid date';\n\n  function invalidDate() {\n    return this._invalidDate;\n  }\n\n  var defaultOrdinal = '%d';\n  var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n  function ordinal(number) {\n    return this._ordinal.replace('%d', number);\n  }\n\n  var defaultRelativeTime = {\n    future: 'in %s',\n    past: '%s ago',\n    s: 'a few seconds',\n    ss: '%d seconds',\n    m: 'a minute',\n    mm: '%d minutes',\n    h: 'an hour',\n    hh: '%d hours',\n    d: 'a day',\n    dd: '%d days',\n    M: 'a month',\n    MM: '%d months',\n    y: 'a year',\n    yy: '%d years'\n  };\n\n  function relativeTime(number, withoutSuffix, string, isFuture) {\n    var output = this._relativeTime[string];\n    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);\n  }\n\n  function pastFuture(diff, output) {\n    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n    return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n  }\n\n  var aliases = {};\n\n  function addUnitAlias(unit, shorthand) {\n    var lowerCase = unit.toLowerCase();\n    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n  }\n\n  function normalizeUnits(units) {\n    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n  }\n\n  function normalizeObjectUnits(inputObject) {\n    var normalizedInput = {},\n        normalizedProp,\n        prop;\n\n    for (prop in inputObject) {\n      if (hasOwnProp(inputObject, prop)) {\n        normalizedProp = normalizeUnits(prop);\n\n        if (normalizedProp) {\n          normalizedInput[normalizedProp] = inputObject[prop];\n        }\n      }\n    }\n\n    return normalizedInput;\n  }\n\n  var priorities = {};\n\n  function addUnitPriority(unit, priority) {\n    priorities[unit] = priority;\n  }\n\n  function getPrioritizedUnits(unitsObj) {\n    var units = [];\n\n    for (var u in unitsObj) {\n      units.push({\n        unit: u,\n        priority: priorities[u]\n      });\n    }\n\n    units.sort(function (a, b) {\n      return a.priority - b.priority;\n    });\n    return units;\n  }\n\n  function zeroFill(number, targetLength, forceSign) {\n    var absNumber = '' + Math.abs(number),\n        zerosToFill = targetLength - absNumber.length,\n        sign = number >= 0;\n    return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n  }\n\n  var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n  var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n  var formatFunctions = {};\n  var formatTokenFunctions = {}; // token:    'M'\n  // padded:   ['MM', 2]\n  // ordinal:  'Mo'\n  // callback: function () { this.month() + 1 }\n\n  function addFormatToken(token, padded, ordinal, callback) {\n    var func = callback;\n\n    if (typeof callback === 'string') {\n      func = function () {\n        return this[callback]();\n      };\n    }\n\n    if (token) {\n      formatTokenFunctions[token] = func;\n    }\n\n    if (padded) {\n      formatTokenFunctions[padded[0]] = function () {\n        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n      };\n    }\n\n    if (ordinal) {\n      formatTokenFunctions[ordinal] = function () {\n        return this.localeData().ordinal(func.apply(this, arguments), token);\n      };\n    }\n  }\n\n  function removeFormattingTokens(input) {\n    if (input.match(/\\[[\\s\\S]/)) {\n      return input.replace(/^\\[|\\]$/g, '');\n    }\n\n    return input.replace(/\\\\/g, '');\n  }\n\n  function makeFormatFunction(format) {\n    var array = format.match(formattingTokens),\n        i,\n        length;\n\n    for (i = 0, length = array.length; i < length; i++) {\n      if (formatTokenFunctions[array[i]]) {\n        array[i] = formatTokenFunctions[array[i]];\n      } else {\n        array[i] = removeFormattingTokens(array[i]);\n      }\n    }\n\n    return function (mom) {\n      var output = '',\n          i;\n\n      for (i = 0; i < length; i++) {\n        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n      }\n\n      return output;\n    };\n  } // format date using native date object\n\n\n  function formatMoment(m, format) {\n    if (!m.isValid()) {\n      return m.localeData().invalidDate();\n    }\n\n    format = expandFormat(format, m.localeData());\n    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n    return formatFunctions[format](m);\n  }\n\n  function expandFormat(format, locale) {\n    var i = 5;\n\n    function replaceLongDateFormatTokens(input) {\n      return locale.longDateFormat(input) || input;\n    }\n\n    localFormattingTokens.lastIndex = 0;\n\n    while (i >= 0 && localFormattingTokens.test(format)) {\n      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n      localFormattingTokens.lastIndex = 0;\n      i -= 1;\n    }\n\n    return format;\n  }\n\n  var match1 = /\\d/; //       0 - 9\n\n  var match2 = /\\d\\d/; //      00 - 99\n\n  var match3 = /\\d{3}/; //     000 - 999\n\n  var match4 = /\\d{4}/; //    0000 - 9999\n\n  var match6 = /[+-]?\\d{6}/; // -999999 - 999999\n\n  var match1to2 = /\\d\\d?/; //       0 - 99\n\n  var match3to4 = /\\d\\d\\d\\d?/; //     999 - 9999\n\n  var match5to6 = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n\n  var match1to3 = /\\d{1,3}/; //       0 - 999\n\n  var match1to4 = /\\d{1,4}/; //       0 - 9999\n\n  var match1to6 = /[+-]?\\d{1,6}/; // -999999 - 999999\n\n  var matchUnsigned = /\\d+/; //       0 - inf\n\n  var matchSigned = /[+-]?\\d+/; //    -inf - inf\n\n  var matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n\n  var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n  var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n  // any word (or two) characters or numbers including two/three word month in arabic.\n  // includes scottish gaelic two word and hyphenated months\n\n  var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n  var regexes = {};\n\n  function addRegexToken(token, regex, strictRegex) {\n    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n      return isStrict && strictRegex ? strictRegex : regex;\n    };\n  }\n\n  function getParseRegexForToken(token, config) {\n    if (!hasOwnProp(regexes, token)) {\n      return new RegExp(unescapeFormat(token));\n    }\n\n    return regexes[token](config._strict, config._locale);\n  } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n\n\n  function unescapeFormat(s) {\n    return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n      return p1 || p2 || p3 || p4;\n    }));\n  }\n\n  function regexEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n\n  var tokens = {};\n\n  function addParseToken(token, callback) {\n    var i,\n        func = callback;\n\n    if (typeof token === 'string') {\n      token = [token];\n    }\n\n    if (isNumber(callback)) {\n      func = function (input, array) {\n        array[callback] = toInt(input);\n      };\n    }\n\n    for (i = 0; i < token.length; i++) {\n      tokens[token[i]] = func;\n    }\n  }\n\n  function addWeekParseToken(token, callback) {\n    addParseToken(token, function (input, array, config, token) {\n      config._w = config._w || {};\n      callback(input, config._w, config, token);\n    });\n  }\n\n  function addTimeToArrayFromToken(token, input, config) {\n    if (input != null && hasOwnProp(tokens, token)) {\n      tokens[token](input, config._a, config, token);\n    }\n  }\n\n  var YEAR = 0;\n  var MONTH = 1;\n  var DATE = 2;\n  var HOUR = 3;\n  var MINUTE = 4;\n  var SECOND = 5;\n  var MILLISECOND = 6;\n  var WEEK = 7;\n  var WEEKDAY = 8; // FORMATTING\n\n  addFormatToken('Y', 0, 0, function () {\n    var y = this.year();\n    return y <= 9999 ? '' + y : '+' + y;\n  });\n  addFormatToken(0, ['YY', 2], 0, function () {\n    return this.year() % 100;\n  });\n  addFormatToken(0, ['YYYY', 4], 0, 'year');\n  addFormatToken(0, ['YYYYY', 5], 0, 'year');\n  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES\n\n  addUnitAlias('year', 'y'); // PRIORITIES\n\n  addUnitPriority('year', 1); // PARSING\n\n  addRegexToken('Y', matchSigned);\n  addRegexToken('YY', match1to2, match2);\n  addRegexToken('YYYY', match1to4, match4);\n  addRegexToken('YYYYY', match1to6, match6);\n  addRegexToken('YYYYYY', match1to6, match6);\n  addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n  addParseToken('YYYY', function (input, array) {\n    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n  });\n  addParseToken('YY', function (input, array) {\n    array[YEAR] = hooks.parseTwoDigitYear(input);\n  });\n  addParseToken('Y', function (input, array) {\n    array[YEAR] = parseInt(input, 10);\n  }); // HELPERS\n\n  function daysInYear(year) {\n    return isLeapYear(year) ? 366 : 365;\n  }\n\n  function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n  } // HOOKS\n\n\n  hooks.parseTwoDigitYear = function (input) {\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n  }; // MOMENTS\n\n\n  var getSetYear = makeGetSet('FullYear', true);\n\n  function getIsLeapYear() {\n    return isLeapYear(this.year());\n  }\n\n  function makeGetSet(unit, keepTime) {\n    return function (value) {\n      if (value != null) {\n        set$1(this, unit, value);\n        hooks.updateOffset(this, keepTime);\n        return this;\n      } else {\n        return get(this, unit);\n      }\n    };\n  }\n\n  function get(mom, unit) {\n    return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n  }\n\n  function set$1(mom, unit, value) {\n    if (mom.isValid() && !isNaN(value)) {\n      if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n      } else {\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n      }\n    }\n  } // MOMENTS\n\n\n  function stringGet(units) {\n    units = normalizeUnits(units);\n\n    if (isFunction(this[units])) {\n      return this[units]();\n    }\n\n    return this;\n  }\n\n  function stringSet(units, value) {\n    if (typeof units === 'object') {\n      units = normalizeObjectUnits(units);\n      var prioritized = getPrioritizedUnits(units);\n\n      for (var i = 0; i < prioritized.length; i++) {\n        this[prioritized[i].unit](units[prioritized[i].unit]);\n      }\n    } else {\n      units = normalizeUnits(units);\n\n      if (isFunction(this[units])) {\n        return this[units](value);\n      }\n    }\n\n    return this;\n  }\n\n  function mod(n, x) {\n    return (n % x + x) % x;\n  }\n\n  var indexOf;\n\n  if (Array.prototype.indexOf) {\n    indexOf = Array.prototype.indexOf;\n  } else {\n    indexOf = function (o) {\n      // I know\n      var i;\n\n      for (i = 0; i < this.length; ++i) {\n        if (this[i] === o) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n  }\n\n  function daysInMonth(year, month) {\n    if (isNaN(year) || isNaN(month)) {\n      return NaN;\n    }\n\n    var modMonth = mod(month, 12);\n    year += (month - modMonth) / 12;\n    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;\n  } // FORMATTING\n\n\n  addFormatToken('M', ['MM', 2], 'Mo', function () {\n    return this.month() + 1;\n  });\n  addFormatToken('MMM', 0, 0, function (format) {\n    return this.localeData().monthsShort(this, format);\n  });\n  addFormatToken('MMMM', 0, 0, function (format) {\n    return this.localeData().months(this, format);\n  }); // ALIASES\n\n  addUnitAlias('month', 'M'); // PRIORITY\n\n  addUnitPriority('month', 8); // PARSING\n\n  addRegexToken('M', match1to2);\n  addRegexToken('MM', match1to2, match2);\n  addRegexToken('MMM', function (isStrict, locale) {\n    return locale.monthsShortRegex(isStrict);\n  });\n  addRegexToken('MMMM', function (isStrict, locale) {\n    return locale.monthsRegex(isStrict);\n  });\n  addParseToken(['M', 'MM'], function (input, array) {\n    array[MONTH] = toInt(input) - 1;\n  });\n  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n    var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.\n\n\n    if (month != null) {\n      array[MONTH] = month;\n    } else {\n      getParsingFlags(config).invalidMonth = input;\n    }\n  }); // LOCALES\n\n  var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n\n  function localeMonths(m, format) {\n    if (!m) {\n      return isArray(this._months) ? this._months : this._months['standalone'];\n    }\n\n    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n  }\n\n  var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n\n  function localeMonthsShort(m, format) {\n    if (!m) {\n      return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];\n    }\n\n    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n  }\n\n  function handleStrictParse(monthName, format, strict) {\n    var i,\n        ii,\n        mom,\n        llc = monthName.toLocaleLowerCase();\n\n    if (!this._monthsParse) {\n      // this is not used\n      this._monthsParse = [];\n      this._longMonthsParse = [];\n      this._shortMonthsParse = [];\n\n      for (i = 0; i < 12; ++i) {\n        mom = createUTC([2000, i]);\n        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n      }\n    }\n\n    if (strict) {\n      if (format === 'MMM') {\n        ii = indexOf.call(this._shortMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._longMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    } else {\n      if (format === 'MMM') {\n        ii = indexOf.call(this._shortMonthsParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._longMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._longMonthsParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._shortMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    }\n  }\n\n  function localeMonthsParse(monthName, format, strict) {\n    var i, mom, regex;\n\n    if (this._monthsParseExact) {\n      return handleStrictParse.call(this, monthName, format, strict);\n    }\n\n    if (!this._monthsParse) {\n      this._monthsParse = [];\n      this._longMonthsParse = [];\n      this._shortMonthsParse = [];\n    } // TODO: add sorting\n    // Sorting makes sure if one month (or abbr) is a prefix of another\n    // see sorting in computeMonthsParse\n\n\n    for (i = 0; i < 12; i++) {\n      // make the regex if we don't have it already\n      mom = createUTC([2000, i]);\n\n      if (strict && !this._longMonthsParse[i]) {\n        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n      }\n\n      if (!strict && !this._monthsParse[i]) {\n        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n      } // test the regex\n\n\n      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n        return i;\n      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n        return i;\n      } else if (!strict && this._monthsParse[i].test(monthName)) {\n        return i;\n      }\n    }\n  } // MOMENTS\n\n\n  function setMonth(mom, value) {\n    var dayOfMonth;\n\n    if (!mom.isValid()) {\n      // No op\n      return mom;\n    }\n\n    if (typeof value === 'string') {\n      if (/^\\d+$/.test(value)) {\n        value = toInt(value);\n      } else {\n        value = mom.localeData().monthsParse(value); // TODO: Another silent failure?\n\n        if (!isNumber(value)) {\n          return mom;\n        }\n      }\n    }\n\n    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n\n    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n\n    return mom;\n  }\n\n  function getSetMonth(value) {\n    if (value != null) {\n      setMonth(this, value);\n      hooks.updateOffset(this, true);\n      return this;\n    } else {\n      return get(this, 'Month');\n    }\n  }\n\n  function getDaysInMonth() {\n    return daysInMonth(this.year(), this.month());\n  }\n\n  var defaultMonthsShortRegex = matchWord;\n\n  function monthsShortRegex(isStrict) {\n    if (this._monthsParseExact) {\n      if (!hasOwnProp(this, '_monthsRegex')) {\n        computeMonthsParse.call(this);\n      }\n\n      if (isStrict) {\n        return this._monthsShortStrictRegex;\n      } else {\n        return this._monthsShortRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_monthsShortRegex')) {\n        this._monthsShortRegex = defaultMonthsShortRegex;\n      }\n\n      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;\n    }\n  }\n\n  var defaultMonthsRegex = matchWord;\n\n  function monthsRegex(isStrict) {\n    if (this._monthsParseExact) {\n      if (!hasOwnProp(this, '_monthsRegex')) {\n        computeMonthsParse.call(this);\n      }\n\n      if (isStrict) {\n        return this._monthsStrictRegex;\n      } else {\n        return this._monthsRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_monthsRegex')) {\n        this._monthsRegex = defaultMonthsRegex;\n      }\n\n      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;\n    }\n  }\n\n  function computeMonthsParse() {\n    function cmpLenRev(a, b) {\n      return b.length - a.length;\n    }\n\n    var shortPieces = [],\n        longPieces = [],\n        mixedPieces = [],\n        i,\n        mom;\n\n    for (i = 0; i < 12; i++) {\n      // make the regex if we don't have it already\n      mom = createUTC([2000, i]);\n      shortPieces.push(this.monthsShort(mom, ''));\n      longPieces.push(this.months(mom, ''));\n      mixedPieces.push(this.months(mom, ''));\n      mixedPieces.push(this.monthsShort(mom, ''));\n    } // Sorting makes sure if one month (or abbr) is a prefix of another it\n    // will match the longer piece.\n\n\n    shortPieces.sort(cmpLenRev);\n    longPieces.sort(cmpLenRev);\n    mixedPieces.sort(cmpLenRev);\n\n    for (i = 0; i < 12; i++) {\n      shortPieces[i] = regexEscape(shortPieces[i]);\n      longPieces[i] = regexEscape(longPieces[i]);\n    }\n\n    for (i = 0; i < 24; i++) {\n      mixedPieces[i] = regexEscape(mixedPieces[i]);\n    }\n\n    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n    this._monthsShortRegex = this._monthsRegex;\n    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n  }\n\n  function createDate(y, m, d, h, M, s, ms) {\n    // can't just apply() to create a date:\n    // https://stackoverflow.com/q/181348\n    var date; // the date constructor remaps years 0-99 to 1900-1999\n\n    if (y < 100 && y >= 0) {\n      // preserve leap years using a full 400 year cycle, then reset\n      date = new Date(y + 400, m, d, h, M, s, ms);\n\n      if (isFinite(date.getFullYear())) {\n        date.setFullYear(y);\n      }\n    } else {\n      date = new Date(y, m, d, h, M, s, ms);\n    }\n\n    return date;\n  }\n\n  function createUTCDate(y) {\n    var date; // the Date.UTC function remaps years 0-99 to 1900-1999\n\n    if (y < 100 && y >= 0) {\n      var args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset\n\n      args[0] = y + 400;\n      date = new Date(Date.UTC.apply(null, args));\n\n      if (isFinite(date.getUTCFullYear())) {\n        date.setUTCFullYear(y);\n      }\n    } else {\n      date = new Date(Date.UTC.apply(null, arguments));\n    }\n\n    return date;\n  } // start-of-first-week - start-of-year\n\n\n  function firstWeekOffset(year, dow, doy) {\n    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n    fwd = 7 + dow - doy,\n        // first-week day local weekday -- which local weekday is fwd\n    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n    return -fwdlw + fwd - 1;\n  } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n\n\n  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n    var localWeekday = (7 + weekday - dow) % 7,\n        weekOffset = firstWeekOffset(year, dow, doy),\n        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n        resYear,\n        resDayOfYear;\n\n    if (dayOfYear <= 0) {\n      resYear = year - 1;\n      resDayOfYear = daysInYear(resYear) + dayOfYear;\n    } else if (dayOfYear > daysInYear(year)) {\n      resYear = year + 1;\n      resDayOfYear = dayOfYear - daysInYear(year);\n    } else {\n      resYear = year;\n      resDayOfYear = dayOfYear;\n    }\n\n    return {\n      year: resYear,\n      dayOfYear: resDayOfYear\n    };\n  }\n\n  function weekOfYear(mom, dow, doy) {\n    var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n        resWeek,\n        resYear;\n\n    if (week < 1) {\n      resYear = mom.year() - 1;\n      resWeek = week + weeksInYear(resYear, dow, doy);\n    } else if (week > weeksInYear(mom.year(), dow, doy)) {\n      resWeek = week - weeksInYear(mom.year(), dow, doy);\n      resYear = mom.year() + 1;\n    } else {\n      resYear = mom.year();\n      resWeek = week;\n    }\n\n    return {\n      week: resWeek,\n      year: resYear\n    };\n  }\n\n  function weeksInYear(year, dow, doy) {\n    var weekOffset = firstWeekOffset(year, dow, doy),\n        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n  } // FORMATTING\n\n\n  addFormatToken('w', ['ww', 2], 'wo', 'week');\n  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES\n\n  addUnitAlias('week', 'w');\n  addUnitAlias('isoWeek', 'W'); // PRIORITIES\n\n  addUnitPriority('week', 5);\n  addUnitPriority('isoWeek', 5); // PARSING\n\n  addRegexToken('w', match1to2);\n  addRegexToken('ww', match1to2, match2);\n  addRegexToken('W', match1to2);\n  addRegexToken('WW', match1to2, match2);\n  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n    week[token.substr(0, 1)] = toInt(input);\n  }); // HELPERS\n  // LOCALES\n\n  function localeWeek(mom) {\n    return weekOfYear(mom, this._week.dow, this._week.doy).week;\n  }\n\n  var defaultLocaleWeek = {\n    dow: 0,\n    // Sunday is the first day of the week.\n    doy: 6 // The week that contains Jan 6th is the first week of the year.\n\n  };\n\n  function localeFirstDayOfWeek() {\n    return this._week.dow;\n  }\n\n  function localeFirstDayOfYear() {\n    return this._week.doy;\n  } // MOMENTS\n\n\n  function getSetWeek(input) {\n    var week = this.localeData().week(this);\n    return input == null ? week : this.add((input - week) * 7, 'd');\n  }\n\n  function getSetISOWeek(input) {\n    var week = weekOfYear(this, 1, 4).week;\n    return input == null ? week : this.add((input - week) * 7, 'd');\n  } // FORMATTING\n\n\n  addFormatToken('d', 0, 'do', 'day');\n  addFormatToken('dd', 0, 0, function (format) {\n    return this.localeData().weekdaysMin(this, format);\n  });\n  addFormatToken('ddd', 0, 0, function (format) {\n    return this.localeData().weekdaysShort(this, format);\n  });\n  addFormatToken('dddd', 0, 0, function (format) {\n    return this.localeData().weekdays(this, format);\n  });\n  addFormatToken('e', 0, 0, 'weekday');\n  addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES\n\n  addUnitAlias('day', 'd');\n  addUnitAlias('weekday', 'e');\n  addUnitAlias('isoWeekday', 'E'); // PRIORITY\n\n  addUnitPriority('day', 11);\n  addUnitPriority('weekday', 11);\n  addUnitPriority('isoWeekday', 11); // PARSING\n\n  addRegexToken('d', match1to2);\n  addRegexToken('e', match1to2);\n  addRegexToken('E', match1to2);\n  addRegexToken('dd', function (isStrict, locale) {\n    return locale.weekdaysMinRegex(isStrict);\n  });\n  addRegexToken('ddd', function (isStrict, locale) {\n    return locale.weekdaysShortRegex(isStrict);\n  });\n  addRegexToken('dddd', function (isStrict, locale) {\n    return locale.weekdaysRegex(isStrict);\n  });\n  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n    var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid\n\n\n    if (weekday != null) {\n      week.d = weekday;\n    } else {\n      getParsingFlags(config).invalidWeekday = input;\n    }\n  });\n  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n    week[token] = toInt(input);\n  }); // HELPERS\n\n  function parseWeekday(input, locale) {\n    if (typeof input !== 'string') {\n      return input;\n    }\n\n    if (!isNaN(input)) {\n      return parseInt(input, 10);\n    }\n\n    input = locale.weekdaysParse(input);\n\n    if (typeof input === 'number') {\n      return input;\n    }\n\n    return null;\n  }\n\n  function parseIsoWeekday(input, locale) {\n    if (typeof input === 'string') {\n      return locale.weekdaysParse(input) % 7 || 7;\n    }\n\n    return isNaN(input) ? null : input;\n  } // LOCALES\n\n\n  function shiftWeekdays(ws, n) {\n    return ws.slice(n, 7).concat(ws.slice(0, n));\n  }\n\n  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n\n  function localeWeekdays(m, format) {\n    var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];\n    return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;\n  }\n\n  var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n\n  function localeWeekdaysShort(m) {\n    return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n  }\n\n  var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n\n  function localeWeekdaysMin(m) {\n    return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n  }\n\n  function handleStrictParse$1(weekdayName, format, strict) {\n    var i,\n        ii,\n        mom,\n        llc = weekdayName.toLocaleLowerCase();\n\n    if (!this._weekdaysParse) {\n      this._weekdaysParse = [];\n      this._shortWeekdaysParse = [];\n      this._minWeekdaysParse = [];\n\n      for (i = 0; i < 7; ++i) {\n        mom = createUTC([2000, 1]).day(i);\n        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n      }\n    }\n\n    if (strict) {\n      if (format === 'dddd') {\n        ii = indexOf.call(this._weekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else if (format === 'ddd') {\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    } else {\n      if (format === 'dddd') {\n        ii = indexOf.call(this._weekdaysParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else if (format === 'ddd') {\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._weekdaysParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._weekdaysParse, llc);\n\n        if (ii !== -1) {\n          return ii;\n        }\n\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    }\n  }\n\n  function localeWeekdaysParse(weekdayName, format, strict) {\n    var i, mom, regex;\n\n    if (this._weekdaysParseExact) {\n      return handleStrictParse$1.call(this, weekdayName, format, strict);\n    }\n\n    if (!this._weekdaysParse) {\n      this._weekdaysParse = [];\n      this._minWeekdaysParse = [];\n      this._shortWeekdaysParse = [];\n      this._fullWeekdaysParse = [];\n    }\n\n    for (i = 0; i < 7; i++) {\n      // make the regex if we don't have it already\n      mom = createUTC([2000, 1]).day(i);\n\n      if (strict && !this._fullWeekdaysParse[i]) {\n        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n      }\n\n      if (!this._weekdaysParse[i]) {\n        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n      } // test the regex\n\n\n      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n        return i;\n      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n        return i;\n      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n        return i;\n      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n        return i;\n      }\n    }\n  } // MOMENTS\n\n\n  function getSetDayOfWeek(input) {\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    }\n\n    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n\n    if (input != null) {\n      input = parseWeekday(input, this.localeData());\n      return this.add(input - day, 'd');\n    } else {\n      return day;\n    }\n  }\n\n  function getSetLocaleDayOfWeek(input) {\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    }\n\n    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n    return input == null ? weekday : this.add(input - weekday, 'd');\n  }\n\n  function getSetISODayOfWeek(input) {\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    } // behaves the same as moment#day except\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n    // as a setter, sunday should belong to the previous week.\n\n\n    if (input != null) {\n      var weekday = parseIsoWeekday(input, this.localeData());\n      return this.day(this.day() % 7 ? weekday : weekday - 7);\n    } else {\n      return this.day() || 7;\n    }\n  }\n\n  var defaultWeekdaysRegex = matchWord;\n\n  function weekdaysRegex(isStrict) {\n    if (this._weekdaysParseExact) {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        computeWeekdaysParse.call(this);\n      }\n\n      if (isStrict) {\n        return this._weekdaysStrictRegex;\n      } else {\n        return this._weekdaysRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        this._weekdaysRegex = defaultWeekdaysRegex;\n      }\n\n      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;\n    }\n  }\n\n  var defaultWeekdaysShortRegex = matchWord;\n\n  function weekdaysShortRegex(isStrict) {\n    if (this._weekdaysParseExact) {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        computeWeekdaysParse.call(this);\n      }\n\n      if (isStrict) {\n        return this._weekdaysShortStrictRegex;\n      } else {\n        return this._weekdaysShortRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n        this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n      }\n\n      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n    }\n  }\n\n  var defaultWeekdaysMinRegex = matchWord;\n\n  function weekdaysMinRegex(isStrict) {\n    if (this._weekdaysParseExact) {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        computeWeekdaysParse.call(this);\n      }\n\n      if (isStrict) {\n        return this._weekdaysMinStrictRegex;\n      } else {\n        return this._weekdaysMinRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n        this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n      }\n\n      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n    }\n  }\n\n  function computeWeekdaysParse() {\n    function cmpLenRev(a, b) {\n      return b.length - a.length;\n    }\n\n    var minPieces = [],\n        shortPieces = [],\n        longPieces = [],\n        mixedPieces = [],\n        i,\n        mom,\n        minp,\n        shortp,\n        longp;\n\n    for (i = 0; i < 7; i++) {\n      // make the regex if we don't have it already\n      mom = createUTC([2000, 1]).day(i);\n      minp = this.weekdaysMin(mom, '');\n      shortp = this.weekdaysShort(mom, '');\n      longp = this.weekdays(mom, '');\n      minPieces.push(minp);\n      shortPieces.push(shortp);\n      longPieces.push(longp);\n      mixedPieces.push(minp);\n      mixedPieces.push(shortp);\n      mixedPieces.push(longp);\n    } // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n    // will match the longer piece.\n\n\n    minPieces.sort(cmpLenRev);\n    shortPieces.sort(cmpLenRev);\n    longPieces.sort(cmpLenRev);\n    mixedPieces.sort(cmpLenRev);\n\n    for (i = 0; i < 7; i++) {\n      shortPieces[i] = regexEscape(shortPieces[i]);\n      longPieces[i] = regexEscape(longPieces[i]);\n      mixedPieces[i] = regexEscape(mixedPieces[i]);\n    }\n\n    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n    this._weekdaysShortRegex = this._weekdaysRegex;\n    this._weekdaysMinRegex = this._weekdaysRegex;\n    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n  } // FORMATTING\n\n\n  function hFormat() {\n    return this.hours() % 12 || 12;\n  }\n\n  function kFormat() {\n    return this.hours() || 24;\n  }\n\n  addFormatToken('H', ['HH', 2], 0, 'hour');\n  addFormatToken('h', ['hh', 2], 0, hFormat);\n  addFormatToken('k', ['kk', 2], 0, kFormat);\n  addFormatToken('hmm', 0, 0, function () {\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n  });\n  addFormatToken('hmmss', 0, 0, function () {\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n  });\n  addFormatToken('Hmm', 0, 0, function () {\n    return '' + this.hours() + zeroFill(this.minutes(), 2);\n  });\n  addFormatToken('Hmmss', 0, 0, function () {\n    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n  });\n\n  function meridiem(token, lowercase) {\n    addFormatToken(token, 0, 0, function () {\n      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n    });\n  }\n\n  meridiem('a', true);\n  meridiem('A', false); // ALIASES\n\n  addUnitAlias('hour', 'h'); // PRIORITY\n\n  addUnitPriority('hour', 13); // PARSING\n\n  function matchMeridiem(isStrict, locale) {\n    return locale._meridiemParse;\n  }\n\n  addRegexToken('a', matchMeridiem);\n  addRegexToken('A', matchMeridiem);\n  addRegexToken('H', match1to2);\n  addRegexToken('h', match1to2);\n  addRegexToken('k', match1to2);\n  addRegexToken('HH', match1to2, match2);\n  addRegexToken('hh', match1to2, match2);\n  addRegexToken('kk', match1to2, match2);\n  addRegexToken('hmm', match3to4);\n  addRegexToken('hmmss', match5to6);\n  addRegexToken('Hmm', match3to4);\n  addRegexToken('Hmmss', match5to6);\n  addParseToken(['H', 'HH'], HOUR);\n  addParseToken(['k', 'kk'], function (input, array, config) {\n    var kInput = toInt(input);\n    array[HOUR] = kInput === 24 ? 0 : kInput;\n  });\n  addParseToken(['a', 'A'], function (input, array, config) {\n    config._isPm = config._locale.isPM(input);\n    config._meridiem = input;\n  });\n  addParseToken(['h', 'hh'], function (input, array, config) {\n    array[HOUR] = toInt(input);\n    getParsingFlags(config).bigHour = true;\n  });\n  addParseToken('hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n    getParsingFlags(config).bigHour = true;\n  });\n  addParseToken('hmmss', function (input, array, config) {\n    var pos1 = input.length - 4;\n    var pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n    getParsingFlags(config).bigHour = true;\n  });\n  addParseToken('Hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n  });\n  addParseToken('Hmmss', function (input, array, config) {\n    var pos1 = input.length - 4;\n    var pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n  }); // LOCALES\n\n  function localeIsPM(input) {\n    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n    // Using charAt should be more compatible.\n    return (input + '').toLowerCase().charAt(0) === 'p';\n  }\n\n  var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n\n  function localeMeridiem(hours, minutes, isLower) {\n    if (hours > 11) {\n      return isLower ? 'pm' : 'PM';\n    } else {\n      return isLower ? 'am' : 'AM';\n    }\n  } // MOMENTS\n  // Setting the hour should keep the time, because the user explicitly\n  // specified which hour they want. So trying to maintain the same hour (in\n  // a new timezone) makes sense. Adding/subtracting hours does not follow\n  // this rule.\n\n\n  var getSetHour = makeGetSet('Hours', true);\n  var baseConfig = {\n    calendar: defaultCalendar,\n    longDateFormat: defaultLongDateFormat,\n    invalidDate: defaultInvalidDate,\n    ordinal: defaultOrdinal,\n    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n    relativeTime: defaultRelativeTime,\n    months: defaultLocaleMonths,\n    monthsShort: defaultLocaleMonthsShort,\n    week: defaultLocaleWeek,\n    weekdays: defaultLocaleWeekdays,\n    weekdaysMin: defaultLocaleWeekdaysMin,\n    weekdaysShort: defaultLocaleWeekdaysShort,\n    meridiemParse: defaultLocaleMeridiemParse\n  }; // internal storage for locale config files\n\n  var locales = {};\n  var localeFamilies = {};\n  var globalLocale;\n\n  function normalizeLocale(key) {\n    return key ? key.toLowerCase().replace('_', '-') : key;\n  } // pick the locale from the array\n  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n\n\n  function chooseLocale(names) {\n    var i = 0,\n        j,\n        next,\n        locale,\n        split;\n\n    while (i < names.length) {\n      split = normalizeLocale(names[i]).split('-');\n      j = split.length;\n      next = normalizeLocale(names[i + 1]);\n      next = next ? next.split('-') : null;\n\n      while (j > 0) {\n        locale = loadLocale(split.slice(0, j).join('-'));\n\n        if (locale) {\n          return locale;\n        }\n\n        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n          //the next array item is better than a shallower substring of this one\n          break;\n        }\n\n        j--;\n      }\n\n      i++;\n    }\n\n    return globalLocale;\n  }\n\n  function loadLocale(name) {\n    var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node\n\n    if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {\n      try {\n        oldLocale = globalLocale._abbr;\n        var aliasedRequire = require;\n        !(function webpackMissingModule() { var e = new Error(\"Cannot find module 'undefined'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n        getSetGlobalLocale(oldLocale);\n      } catch (e) {}\n    }\n\n    return locales[name];\n  } // This function will load locale and then set the global locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n\n  function getSetGlobalLocale(key, values) {\n    var data;\n\n    if (key) {\n      if (isUndefined(values)) {\n        data = getLocale(key);\n      } else {\n        data = defineLocale(key, values);\n      }\n\n      if (data) {\n        // moment.duration._locale = moment._locale = data;\n        globalLocale = data;\n      } else {\n        if (typeof console !== 'undefined' && console.warn) {\n          //warn user if arguments are passed but the locale could not be set\n          console.warn('Locale ' + key + ' not found. Did you forget to load it?');\n        }\n      }\n    }\n\n    return globalLocale._abbr;\n  }\n\n  function defineLocale(name, config) {\n    if (config !== null) {\n      var locale,\n          parentConfig = baseConfig;\n      config.abbr = name;\n\n      if (locales[name] != null) {\n        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n        parentConfig = locales[name]._config;\n      } else if (config.parentLocale != null) {\n        if (locales[config.parentLocale] != null) {\n          parentConfig = locales[config.parentLocale]._config;\n        } else {\n          locale = loadLocale(config.parentLocale);\n\n          if (locale != null) {\n            parentConfig = locale._config;\n          } else {\n            if (!localeFamilies[config.parentLocale]) {\n              localeFamilies[config.parentLocale] = [];\n            }\n\n            localeFamilies[config.parentLocale].push({\n              name: name,\n              config: config\n            });\n            return null;\n          }\n        }\n      }\n\n      locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n      if (localeFamilies[name]) {\n        localeFamilies[name].forEach(function (x) {\n          defineLocale(x.name, x.config);\n        });\n      } // backwards compat for now: also set the locale\n      // make sure we set the locale AFTER all child locales have been\n      // created, so we won't end up with the child locale set.\n\n\n      getSetGlobalLocale(name);\n      return locales[name];\n    } else {\n      // useful for testing\n      delete locales[name];\n      return null;\n    }\n  }\n\n  function updateLocale(name, config) {\n    if (config != null) {\n      var locale,\n          tmpLocale,\n          parentConfig = baseConfig; // MERGE\n\n      tmpLocale = loadLocale(name);\n\n      if (tmpLocale != null) {\n        parentConfig = tmpLocale._config;\n      }\n\n      config = mergeConfigs(parentConfig, config);\n      locale = new Locale(config);\n      locale.parentLocale = locales[name];\n      locales[name] = locale; // backwards compat for now: also set the locale\n\n      getSetGlobalLocale(name);\n    } else {\n      // pass null for config to unupdate, useful for tests\n      if (locales[name] != null) {\n        if (locales[name].parentLocale != null) {\n          locales[name] = locales[name].parentLocale;\n        } else if (locales[name] != null) {\n          delete locales[name];\n        }\n      }\n    }\n\n    return locales[name];\n  } // returns locale data\n\n\n  function getLocale(key) {\n    var locale;\n\n    if (key && key._locale && key._locale._abbr) {\n      key = key._locale._abbr;\n    }\n\n    if (!key) {\n      return globalLocale;\n    }\n\n    if (!isArray(key)) {\n      //short-circuit everything else\n      locale = loadLocale(key);\n\n      if (locale) {\n        return locale;\n      }\n\n      key = [key];\n    }\n\n    return chooseLocale(key);\n  }\n\n  function listLocales() {\n    return keys(locales);\n  }\n\n  function checkOverflow(m) {\n    var overflow;\n    var a = m._a;\n\n    if (a && getParsingFlags(m).overflow === -2) {\n      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;\n\n      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n        overflow = DATE;\n      }\n\n      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n        overflow = WEEK;\n      }\n\n      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n        overflow = WEEKDAY;\n      }\n\n      getParsingFlags(m).overflow = overflow;\n    }\n\n    return m;\n  } // Pick the first defined of two or three arguments.\n\n\n  function defaults(a, b, c) {\n    if (a != null) {\n      return a;\n    }\n\n    if (b != null) {\n      return b;\n    }\n\n    return c;\n  }\n\n  function currentDateArray(config) {\n    // hooks is actually the exported moment object\n    var nowValue = new Date(hooks.now());\n\n    if (config._useUTC) {\n      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n    }\n\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n  } // convert an array to a date.\n  // the array should mirror the parameters below\n  // note: all values past the year are optional and will default to the lowest possible value.\n  // [year, month, day , hour, minute, second, millisecond]\n\n\n  function configFromArray(config) {\n    var i,\n        date,\n        input = [],\n        currentDate,\n        expectedWeekday,\n        yearToUse;\n\n    if (config._d) {\n      return;\n    }\n\n    currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays\n\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n      dayOfYearFromWeekInfo(config);\n    } //if the day of the year is set, figure out what it is\n\n\n    if (config._dayOfYear != null) {\n      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n        getParsingFlags(config)._overflowDayOfYear = true;\n      }\n\n      date = createUTCDate(yearToUse, 0, config._dayOfYear);\n      config._a[MONTH] = date.getUTCMonth();\n      config._a[DATE] = date.getUTCDate();\n    } // Default to current date.\n    // * if no year, month, day of month are given, default to today\n    // * if day of month is given, default month and year\n    // * if month is given, default only year\n    // * if year is given, don't default anything\n\n\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {\n      config._a[i] = input[i] = currentDate[i];\n    } // Zero out whatever was not defaulted, including time\n\n\n    for (; i < 7; i++) {\n      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];\n    } // Check for 24:00:00.000\n\n\n    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {\n      config._nextDay = true;\n      config._a[HOUR] = 0;\n    }\n\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed\n    // with parseZone.\n\n    if (config._tzm != null) {\n      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n    }\n\n    if (config._nextDay) {\n      config._a[HOUR] = 24;\n    } // check for mismatching day of week\n\n\n    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n      getParsingFlags(config).weekdayMismatch = true;\n    }\n  }\n\n  function dayOfYearFromWeekInfo(config) {\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n    w = config._w;\n\n    if (w.GG != null || w.W != null || w.E != null) {\n      dow = 1;\n      doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on\n      // how we interpret now (local, utc, fixed offset). So create\n      // a now version of current config (take local/utc/offset flags, and\n      // create now).\n\n      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n      week = defaults(w.W, 1);\n      weekday = defaults(w.E, 1);\n\n      if (weekday < 1 || weekday > 7) {\n        weekdayOverflow = true;\n      }\n    } else {\n      dow = config._locale._week.dow;\n      doy = config._locale._week.doy;\n      var curWeek = weekOfYear(createLocal(), dow, doy);\n      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.\n\n      week = defaults(w.w, curWeek.week);\n\n      if (w.d != null) {\n        // weekday -- low day numbers are considered next week\n        weekday = w.d;\n\n        if (weekday < 0 || weekday > 6) {\n          weekdayOverflow = true;\n        }\n      } else if (w.e != null) {\n        // local weekday -- counting starts from beginning of week\n        weekday = w.e + dow;\n\n        if (w.e < 0 || w.e > 6) {\n          weekdayOverflow = true;\n        }\n      } else {\n        // default to beginning of week\n        weekday = dow;\n      }\n    }\n\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n      getParsingFlags(config)._overflowWeeks = true;\n    } else if (weekdayOverflow != null) {\n      getParsingFlags(config)._overflowWeekday = true;\n    } else {\n      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n      config._a[YEAR] = temp.year;\n      config._dayOfYear = temp.dayOfYear;\n    }\n  } // iso 8601 regex\n  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n\n\n  var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n  var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n  var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n  var isoDates = [['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/], ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/], ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/], ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false], ['YYYY-DDD', /\\d{4}-\\d{3}/], ['YYYY-MM', /\\d{4}-\\d\\d/, false], ['YYYYYYMMDD', /[+-]\\d{10}/], ['YYYYMMDD', /\\d{8}/], // YYYYMM is NOT allowed by the standard\n  ['GGGG[W]WWE', /\\d{4}W\\d{3}/], ['GGGG[W]WW', /\\d{4}W\\d{2}/, false], ['YYYYDDD', /\\d{7}/]]; // iso time formats and regexes\n\n  var isoTimes = [['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/], ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/], ['HH:mm', /\\d\\d:\\d\\d/], ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/], ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/], ['HHmmss', /\\d\\d\\d\\d\\d\\d/], ['HHmm', /\\d\\d\\d\\d/], ['HH', /\\d\\d/]];\n  var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i; // date from iso format\n\n  function configFromISO(config) {\n    var i,\n        l,\n        string = config._i,\n        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n        allowTime,\n        dateFormat,\n        timeFormat,\n        tzFormat;\n\n    if (match) {\n      getParsingFlags(config).iso = true;\n\n      for (i = 0, l = isoDates.length; i < l; i++) {\n        if (isoDates[i][1].exec(match[1])) {\n          dateFormat = isoDates[i][0];\n          allowTime = isoDates[i][2] !== false;\n          break;\n        }\n      }\n\n      if (dateFormat == null) {\n        config._isValid = false;\n        return;\n      }\n\n      if (match[3]) {\n        for (i = 0, l = isoTimes.length; i < l; i++) {\n          if (isoTimes[i][1].exec(match[3])) {\n            // match[2] should be 'T' or space\n            timeFormat = (match[2] || ' ') + isoTimes[i][0];\n            break;\n          }\n        }\n\n        if (timeFormat == null) {\n          config._isValid = false;\n          return;\n        }\n      }\n\n      if (!allowTime && timeFormat != null) {\n        config._isValid = false;\n        return;\n      }\n\n      if (match[4]) {\n        if (tzRegex.exec(match[4])) {\n          tzFormat = 'Z';\n        } else {\n          config._isValid = false;\n          return;\n        }\n      }\n\n      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n      configFromStringAndFormat(config);\n    } else {\n      config._isValid = false;\n    }\n  } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n\n\n  var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n    var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];\n\n    if (secondStr) {\n      result.push(parseInt(secondStr, 10));\n    }\n\n    return result;\n  }\n\n  function untruncateYear(yearStr) {\n    var year = parseInt(yearStr, 10);\n\n    if (year <= 49) {\n      return 2000 + year;\n    } else if (year <= 999) {\n      return 1900 + year;\n    }\n\n    return year;\n  }\n\n  function preprocessRFC2822(s) {\n    // Remove comments and folding whitespace and replace multiple-spaces with a single space\n    return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n  }\n\n  function checkWeekday(weekdayStr, parsedInput, config) {\n    if (weekdayStr) {\n      // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n          weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n\n      if (weekdayProvided !== weekdayActual) {\n        getParsingFlags(config).weekdayMismatch = true;\n        config._isValid = false;\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  var obsOffsets = {\n    UT: 0,\n    GMT: 0,\n    EDT: -4 * 60,\n    EST: -5 * 60,\n    CDT: -5 * 60,\n    CST: -6 * 60,\n    MDT: -6 * 60,\n    MST: -7 * 60,\n    PDT: -7 * 60,\n    PST: -8 * 60\n  };\n\n  function calculateOffset(obsOffset, militaryOffset, numOffset) {\n    if (obsOffset) {\n      return obsOffsets[obsOffset];\n    } else if (militaryOffset) {\n      // the only allowed military tz is Z\n      return 0;\n    } else {\n      var hm = parseInt(numOffset, 10);\n      var m = hm % 100,\n          h = (hm - m) / 100;\n      return h * 60 + m;\n    }\n  } // date and time from ref 2822 format\n\n\n  function configFromRFC2822(config) {\n    var match = rfc2822.exec(preprocessRFC2822(config._i));\n\n    if (match) {\n      var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n\n      if (!checkWeekday(match[1], parsedArray, config)) {\n        return;\n      }\n\n      config._a = parsedArray;\n      config._tzm = calculateOffset(match[8], match[9], match[10]);\n      config._d = createUTCDate.apply(null, config._a);\n\n      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n      getParsingFlags(config).rfc2822 = true;\n    } else {\n      config._isValid = false;\n    }\n  } // date from iso format or fallback\n\n\n  function configFromString(config) {\n    var matched = aspNetJsonRegex.exec(config._i);\n\n    if (matched !== null) {\n      config._d = new Date(+matched[1]);\n      return;\n    }\n\n    configFromISO(config);\n\n    if (config._isValid === false) {\n      delete config._isValid;\n    } else {\n      return;\n    }\n\n    configFromRFC2822(config);\n\n    if (config._isValid === false) {\n      delete config._isValid;\n    } else {\n      return;\n    } // Final attempt, use Input Fallback\n\n\n    hooks.createFromInputFallback(config);\n  }\n\n  hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {\n    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n  }); // constant that refers to the ISO standard\n\n  hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form\n\n\n  hooks.RFC_2822 = function () {}; // date from string and format string\n\n\n  function configFromStringAndFormat(config) {\n    // TODO: Move this to another part of the creation flow to prevent circular deps\n    if (config._f === hooks.ISO_8601) {\n      configFromISO(config);\n      return;\n    }\n\n    if (config._f === hooks.RFC_2822) {\n      configFromRFC2822(config);\n      return;\n    }\n\n    config._a = [];\n    getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`\n\n    var string = '' + config._i,\n        i,\n        parsedInput,\n        tokens,\n        token,\n        skipped,\n        stringLength = string.length,\n        totalParsedInputLength = 0;\n    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n    for (i = 0; i < tokens.length; i++) {\n      token = tokens[i];\n      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,\n      //         'regex', getParseRegexForToken(token, config));\n\n      if (parsedInput) {\n        skipped = string.substr(0, string.indexOf(parsedInput));\n\n        if (skipped.length > 0) {\n          getParsingFlags(config).unusedInput.push(skipped);\n        }\n\n        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n        totalParsedInputLength += parsedInput.length;\n      } // don't parse if it's not a known token\n\n\n      if (formatTokenFunctions[token]) {\n        if (parsedInput) {\n          getParsingFlags(config).empty = false;\n        } else {\n          getParsingFlags(config).unusedTokens.push(token);\n        }\n\n        addTimeToArrayFromToken(token, parsedInput, config);\n      } else if (config._strict && !parsedInput) {\n        getParsingFlags(config).unusedTokens.push(token);\n      }\n    } // add remaining unparsed input length to the string\n\n\n    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n\n    if (string.length > 0) {\n      getParsingFlags(config).unusedInput.push(string);\n    } // clear _12h flag if hour is <= 12\n\n\n    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {\n      getParsingFlags(config).bigHour = undefined;\n    }\n\n    getParsingFlags(config).parsedDateParts = config._a.slice(0);\n    getParsingFlags(config).meridiem = config._meridiem; // handle meridiem\n\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n    configFromArray(config);\n    checkOverflow(config);\n  }\n\n  function meridiemFixWrap(locale, hour, meridiem) {\n    var isPm;\n\n    if (meridiem == null) {\n      // nothing to do\n      return hour;\n    }\n\n    if (locale.meridiemHour != null) {\n      return locale.meridiemHour(hour, meridiem);\n    } else if (locale.isPM != null) {\n      // Fallback\n      isPm = locale.isPM(meridiem);\n\n      if (isPm && hour < 12) {\n        hour += 12;\n      }\n\n      if (!isPm && hour === 12) {\n        hour = 0;\n      }\n\n      return hour;\n    } else {\n      // this is not supposed to happen\n      return hour;\n    }\n  } // date from string and array of format strings\n\n\n  function configFromStringAndArray(config) {\n    var tempConfig, bestMoment, scoreToBeat, i, currentScore;\n\n    if (config._f.length === 0) {\n      getParsingFlags(config).invalidFormat = true;\n      config._d = new Date(NaN);\n      return;\n    }\n\n    for (i = 0; i < config._f.length; i++) {\n      currentScore = 0;\n      tempConfig = copyConfig({}, config);\n\n      if (config._useUTC != null) {\n        tempConfig._useUTC = config._useUTC;\n      }\n\n      tempConfig._f = config._f[i];\n      configFromStringAndFormat(tempConfig);\n\n      if (!isValid(tempConfig)) {\n        continue;\n      } // if there is any input that was not parsed add a penalty for that format\n\n\n      currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens\n\n      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n      getParsingFlags(tempConfig).score = currentScore;\n\n      if (scoreToBeat == null || currentScore < scoreToBeat) {\n        scoreToBeat = currentScore;\n        bestMoment = tempConfig;\n      }\n    }\n\n    extend(config, bestMoment || tempConfig);\n  }\n\n  function configFromObject(config) {\n    if (config._d) {\n      return;\n    }\n\n    var i = normalizeObjectUnits(config._i);\n    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n      return obj && parseInt(obj, 10);\n    });\n    configFromArray(config);\n  }\n\n  function createFromConfig(config) {\n    var res = new Moment(checkOverflow(prepareConfig(config)));\n\n    if (res._nextDay) {\n      // Adding is smart enough around DST\n      res.add(1, 'd');\n      res._nextDay = undefined;\n    }\n\n    return res;\n  }\n\n  function prepareConfig(config) {\n    var input = config._i,\n        format = config._f;\n    config._locale = config._locale || getLocale(config._l);\n\n    if (input === null || format === undefined && input === '') {\n      return createInvalid({\n        nullInput: true\n      });\n    }\n\n    if (typeof input === 'string') {\n      config._i = input = config._locale.preparse(input);\n    }\n\n    if (isMoment(input)) {\n      return new Moment(checkOverflow(input));\n    } else if (isDate(input)) {\n      config._d = input;\n    } else if (isArray(format)) {\n      configFromStringAndArray(config);\n    } else if (format) {\n      configFromStringAndFormat(config);\n    } else {\n      configFromInput(config);\n    }\n\n    if (!isValid(config)) {\n      config._d = null;\n    }\n\n    return config;\n  }\n\n  function configFromInput(config) {\n    var input = config._i;\n\n    if (isUndefined(input)) {\n      config._d = new Date(hooks.now());\n    } else if (isDate(input)) {\n      config._d = new Date(input.valueOf());\n    } else if (typeof input === 'string') {\n      configFromString(config);\n    } else if (isArray(input)) {\n      config._a = map(input.slice(0), function (obj) {\n        return parseInt(obj, 10);\n      });\n      configFromArray(config);\n    } else if (isObject(input)) {\n      configFromObject(config);\n    } else if (isNumber(input)) {\n      // from milliseconds\n      config._d = new Date(input);\n    } else {\n      hooks.createFromInputFallback(config);\n    }\n  }\n\n  function createLocalOrUTC(input, format, locale, strict, isUTC) {\n    var c = {};\n\n    if (locale === true || locale === false) {\n      strict = locale;\n      locale = undefined;\n    }\n\n    if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {\n      input = undefined;\n    } // object construction must be done this way.\n    // https://github.com/moment/moment/issues/1423\n\n\n    c._isAMomentObject = true;\n    c._useUTC = c._isUTC = isUTC;\n    c._l = locale;\n    c._i = input;\n    c._f = format;\n    c._strict = strict;\n    return createFromConfig(c);\n  }\n\n  function createLocal(input, format, locale, strict) {\n    return createLocalOrUTC(input, format, locale, strict, false);\n  }\n\n  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {\n    var other = createLocal.apply(null, arguments);\n\n    if (this.isValid() && other.isValid()) {\n      return other < this ? this : other;\n    } else {\n      return createInvalid();\n    }\n  });\n  var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {\n    var other = createLocal.apply(null, arguments);\n\n    if (this.isValid() && other.isValid()) {\n      return other > this ? this : other;\n    } else {\n      return createInvalid();\n    }\n  }); // Pick a moment m from moments so that m[fn](other) is true for all\n  // other. This relies on the function fn to be transitive.\n  //\n  // moments should either be an array of moment objects or an array, whose\n  // first element is an array of moment objects.\n\n  function pickBy(fn, moments) {\n    var res, i;\n\n    if (moments.length === 1 && isArray(moments[0])) {\n      moments = moments[0];\n    }\n\n    if (!moments.length) {\n      return createLocal();\n    }\n\n    res = moments[0];\n\n    for (i = 1; i < moments.length; ++i) {\n      if (!moments[i].isValid() || moments[i][fn](res)) {\n        res = moments[i];\n      }\n    }\n\n    return res;\n  } // TODO: Use [].sort instead?\n\n\n  function min() {\n    var args = [].slice.call(arguments, 0);\n    return pickBy('isBefore', args);\n  }\n\n  function max() {\n    var args = [].slice.call(arguments, 0);\n    return pickBy('isAfter', args);\n  }\n\n  var now = function () {\n    return Date.now ? Date.now() : +new Date();\n  };\n\n  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n  function isDurationValid(m) {\n    for (var key in m) {\n      if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n        return false;\n      }\n    }\n\n    var unitHasDecimal = false;\n\n    for (var i = 0; i < ordering.length; ++i) {\n      if (m[ordering[i]]) {\n        if (unitHasDecimal) {\n          return false; // only allow non-integers for smallest unit\n        }\n\n        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n          unitHasDecimal = true;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function isValid$1() {\n    return this._isValid;\n  }\n\n  function createInvalid$1() {\n    return createDuration(NaN);\n  }\n\n  function Duration(duration) {\n    var normalizedInput = normalizeObjectUnits(duration),\n        years = normalizedInput.year || 0,\n        quarters = normalizedInput.quarter || 0,\n        months = normalizedInput.month || 0,\n        weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n        days = normalizedInput.day || 0,\n        hours = normalizedInput.hour || 0,\n        minutes = normalizedInput.minute || 0,\n        seconds = normalizedInput.second || 0,\n        milliseconds = normalizedInput.millisecond || 0;\n    this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove\n\n    this._milliseconds = +milliseconds + seconds * 1e3 + // 1000\n    minutes * 6e4 + // 1000 * 60\n    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a\n    // day when working around DST, we need to store them separately\n\n    this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing\n    // which months you are are talking about, so we have to store\n    // it separately.\n\n    this._months = +months + quarters * 3 + years * 12;\n    this._data = {};\n    this._locale = getLocale();\n\n    this._bubble();\n  }\n\n  function isDuration(obj) {\n    return obj instanceof Duration;\n  }\n\n  function absRound(number) {\n    if (number < 0) {\n      return Math.round(-1 * number) * -1;\n    } else {\n      return Math.round(number);\n    }\n  } // FORMATTING\n\n\n  function offset(token, separator) {\n    addFormatToken(token, 0, 0, function () {\n      var offset = this.utcOffset();\n      var sign = '+';\n\n      if (offset < 0) {\n        offset = -offset;\n        sign = '-';\n      }\n\n      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);\n    });\n  }\n\n  offset('Z', ':');\n  offset('ZZ', ''); // PARSING\n\n  addRegexToken('Z', matchShortOffset);\n  addRegexToken('ZZ', matchShortOffset);\n  addParseToken(['Z', 'ZZ'], function (input, array, config) {\n    config._useUTC = true;\n    config._tzm = offsetFromString(matchShortOffset, input);\n  }); // HELPERS\n  // timezone chunker\n  // '+10:00' > ['10',  '00']\n  // '-1530'  > ['-15', '30']\n\n  var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n  function offsetFromString(matcher, string) {\n    var matches = (string || '').match(matcher);\n\n    if (matches === null) {\n      return null;\n    }\n\n    var chunk = matches[matches.length - 1] || [];\n    var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n    var minutes = +(parts[1] * 60) + toInt(parts[2]);\n    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n  } // Return a moment from input, that is local/utc/zone equivalent to model.\n\n\n  function cloneWithOffset(input, model) {\n    var res, diff;\n\n    if (model._isUTC) {\n      res = model.clone();\n      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.\n\n      res._d.setTime(res._d.valueOf() + diff);\n\n      hooks.updateOffset(res, false);\n      return res;\n    } else {\n      return createLocal(input).local();\n    }\n  }\n\n  function getDateOffset(m) {\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n    // https://github.com/moment/moment/pull/1871\n    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n  } // HOOKS\n  // This function will be called whenever a moment is mutated.\n  // It is intended to keep the offset in sync with the timezone.\n\n\n  hooks.updateOffset = function () {}; // MOMENTS\n  // keepLocalTime = true means only change the timezone, without\n  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]--\x3e\n  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n  // +0200, so we adjust the time as needed, to be valid.\n  //\n  // Keeping the time actually adds/subtracts (one hour)\n  // from the actual represented time. That is why we call updateOffset\n  // a second time. In case it wants us to change the offset again\n  // _changeInProgress == true case, then we have to adjust, because\n  // there is no such time in the given timezone.\n\n\n  function getSetOffset(input, keepLocalTime, keepMinutes) {\n    var offset = this._offset || 0,\n        localAdjust;\n\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    }\n\n    if (input != null) {\n      if (typeof input === 'string') {\n        input = offsetFromString(matchShortOffset, input);\n\n        if (input === null) {\n          return this;\n        }\n      } else if (Math.abs(input) < 16 && !keepMinutes) {\n        input = input * 60;\n      }\n\n      if (!this._isUTC && keepLocalTime) {\n        localAdjust = getDateOffset(this);\n      }\n\n      this._offset = input;\n      this._isUTC = true;\n\n      if (localAdjust != null) {\n        this.add(localAdjust, 'm');\n      }\n\n      if (offset !== input) {\n        if (!keepLocalTime || this._changeInProgress) {\n          addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n        } else if (!this._changeInProgress) {\n          this._changeInProgress = true;\n          hooks.updateOffset(this, true);\n          this._changeInProgress = null;\n        }\n      }\n\n      return this;\n    } else {\n      return this._isUTC ? offset : getDateOffset(this);\n    }\n  }\n\n  function getSetZone(input, keepLocalTime) {\n    if (input != null) {\n      if (typeof input !== 'string') {\n        input = -input;\n      }\n\n      this.utcOffset(input, keepLocalTime);\n      return this;\n    } else {\n      return -this.utcOffset();\n    }\n  }\n\n  function setOffsetToUTC(keepLocalTime) {\n    return this.utcOffset(0, keepLocalTime);\n  }\n\n  function setOffsetToLocal(keepLocalTime) {\n    if (this._isUTC) {\n      this.utcOffset(0, keepLocalTime);\n      this._isUTC = false;\n\n      if (keepLocalTime) {\n        this.subtract(getDateOffset(this), 'm');\n      }\n    }\n\n    return this;\n  }\n\n  function setOffsetToParsedOffset() {\n    if (this._tzm != null) {\n      this.utcOffset(this._tzm, false, true);\n    } else if (typeof this._i === 'string') {\n      var tZone = offsetFromString(matchOffset, this._i);\n\n      if (tZone != null) {\n        this.utcOffset(tZone);\n      } else {\n        this.utcOffset(0, true);\n      }\n    }\n\n    return this;\n  }\n\n  function hasAlignedHourOffset(input) {\n    if (!this.isValid()) {\n      return false;\n    }\n\n    input = input ? createLocal(input).utcOffset() : 0;\n    return (this.utcOffset() - input) % 60 === 0;\n  }\n\n  function isDaylightSavingTime() {\n    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();\n  }\n\n  function isDaylightSavingTimeShifted() {\n    if (!isUndefined(this._isDSTShifted)) {\n      return this._isDSTShifted;\n    }\n\n    var c = {};\n    copyConfig(c, this);\n    c = prepareConfig(c);\n\n    if (c._a) {\n      var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n    } else {\n      this._isDSTShifted = false;\n    }\n\n    return this._isDSTShifted;\n  }\n\n  function isLocal() {\n    return this.isValid() ? !this._isUTC : false;\n  }\n\n  function isUtcOffset() {\n    return this.isValid() ? this._isUTC : false;\n  }\n\n  function isUtc() {\n    return this.isValid() ? this._isUTC && this._offset === 0 : false;\n  } // ASP.NET json date format regex\n\n\n  var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n  // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n  // and further modified to allow for strings containing both week and day\n\n  var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n  function createDuration(input, key) {\n    var duration = input,\n        // matching against regexp is expensive, do it on demand\n    match = null,\n        sign,\n        ret,\n        diffRes;\n\n    if (isDuration(input)) {\n      duration = {\n        ms: input._milliseconds,\n        d: input._days,\n        M: input._months\n      };\n    } else if (isNumber(input)) {\n      duration = {};\n\n      if (key) {\n        duration[key] = input;\n      } else {\n        duration.milliseconds = input;\n      }\n    } else if (!!(match = aspNetRegex.exec(input))) {\n      sign = match[1] === '-' ? -1 : 1;\n      duration = {\n        y: 0,\n        d: toInt(match[DATE]) * sign,\n        h: toInt(match[HOUR]) * sign,\n        m: toInt(match[MINUTE]) * sign,\n        s: toInt(match[SECOND]) * sign,\n        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n\n      };\n    } else if (!!(match = isoRegex.exec(input))) {\n      sign = match[1] === '-' ? -1 : 1;\n      duration = {\n        y: parseIso(match[2], sign),\n        M: parseIso(match[3], sign),\n        w: parseIso(match[4], sign),\n        d: parseIso(match[5], sign),\n        h: parseIso(match[6], sign),\n        m: parseIso(match[7], sign),\n        s: parseIso(match[8], sign)\n      };\n    } else if (duration == null) {\n      // checks for null or undefined\n      duration = {};\n    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n      duration = {};\n      duration.ms = diffRes.milliseconds;\n      duration.M = diffRes.months;\n    }\n\n    ret = new Duration(duration);\n\n    if (isDuration(input) && hasOwnProp(input, '_locale')) {\n      ret._locale = input._locale;\n    }\n\n    return ret;\n  }\n\n  createDuration.fn = Duration.prototype;\n  createDuration.invalid = createInvalid$1;\n\n  function parseIso(inp, sign) {\n    // We'd normally use ~~inp for this, but unfortunately it also\n    // converts floats to ints.\n    // inp may be undefined, so careful calling replace on it.\n    var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it\n\n    return (isNaN(res) ? 0 : res) * sign;\n  }\n\n  function positiveMomentsDifference(base, other) {\n    var res = {};\n    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;\n\n    if (base.clone().add(res.months, 'M').isAfter(other)) {\n      --res.months;\n    }\n\n    res.milliseconds = +other - +base.clone().add(res.months, 'M');\n    return res;\n  }\n\n  function momentsDifference(base, other) {\n    var res;\n\n    if (!(base.isValid() && other.isValid())) {\n      return {\n        milliseconds: 0,\n        months: 0\n      };\n    }\n\n    other = cloneWithOffset(other, base);\n\n    if (base.isBefore(other)) {\n      res = positiveMomentsDifference(base, other);\n    } else {\n      res = positiveMomentsDifference(other, base);\n      res.milliseconds = -res.milliseconds;\n      res.months = -res.months;\n    }\n\n    return res;\n  } // TODO: remove 'name' arg after deprecation is removed\n\n\n  function createAdder(direction, name) {\n    return function (val, period) {\n      var dur, tmp; //invert the arguments, but complain about it\n\n      if (period !== null && !isNaN(+period)) {\n        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n        tmp = val;\n        val = period;\n        period = tmp;\n      }\n\n      val = typeof val === 'string' ? +val : val;\n      dur = createDuration(val, period);\n      addSubtract(this, dur, direction);\n      return this;\n    };\n  }\n\n  function addSubtract(mom, duration, isAdding, updateOffset) {\n    var milliseconds = duration._milliseconds,\n        days = absRound(duration._days),\n        months = absRound(duration._months);\n\n    if (!mom.isValid()) {\n      // No op\n      return;\n    }\n\n    updateOffset = updateOffset == null ? true : updateOffset;\n\n    if (months) {\n      setMonth(mom, get(mom, 'Month') + months * isAdding);\n    }\n\n    if (days) {\n      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n    }\n\n    if (milliseconds) {\n      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n    }\n\n    if (updateOffset) {\n      hooks.updateOffset(mom, days || months);\n    }\n  }\n\n  var add = createAdder(1, 'add');\n  var subtract = createAdder(-1, 'subtract');\n\n  function getCalendarFormat(myMoment, now) {\n    var diff = myMoment.diff(now, 'days', true);\n    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';\n  }\n\n  function calendar$1(time, formats) {\n    // We want to compare the start of today, vs this.\n    // Getting start-of-today depends on whether we're local/utc/offset or not.\n    var now = time || createLocal(),\n        sod = cloneWithOffset(now, this).startOf('day'),\n        format = hooks.calendarFormat(this, sod) || 'sameElse';\n    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n  }\n\n  function clone() {\n    return new Moment(this);\n  }\n\n  function isAfter(input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input);\n\n    if (!(this.isValid() && localInput.isValid())) {\n      return false;\n    }\n\n    units = normalizeUnits(units) || 'millisecond';\n\n    if (units === 'millisecond') {\n      return this.valueOf() > localInput.valueOf();\n    } else {\n      return localInput.valueOf() < this.clone().startOf(units).valueOf();\n    }\n  }\n\n  function isBefore(input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input);\n\n    if (!(this.isValid() && localInput.isValid())) {\n      return false;\n    }\n\n    units = normalizeUnits(units) || 'millisecond';\n\n    if (units === 'millisecond') {\n      return this.valueOf() < localInput.valueOf();\n    } else {\n      return this.clone().endOf(units).valueOf() < localInput.valueOf();\n    }\n  }\n\n  function isBetween(from, to, units, inclusivity) {\n    var localFrom = isMoment(from) ? from : createLocal(from),\n        localTo = isMoment(to) ? to : createLocal(to);\n\n    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n      return false;\n    }\n\n    inclusivity = inclusivity || '()';\n    return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));\n  }\n\n  function isSame(input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input),\n        inputMs;\n\n    if (!(this.isValid() && localInput.isValid())) {\n      return false;\n    }\n\n    units = normalizeUnits(units) || 'millisecond';\n\n    if (units === 'millisecond') {\n      return this.valueOf() === localInput.valueOf();\n    } else {\n      inputMs = localInput.valueOf();\n      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n    }\n  }\n\n  function isSameOrAfter(input, units) {\n    return this.isSame(input, units) || this.isAfter(input, units);\n  }\n\n  function isSameOrBefore(input, units) {\n    return this.isSame(input, units) || this.isBefore(input, units);\n  }\n\n  function diff(input, units, asFloat) {\n    var that, zoneDelta, output;\n\n    if (!this.isValid()) {\n      return NaN;\n    }\n\n    that = cloneWithOffset(input, this);\n\n    if (!that.isValid()) {\n      return NaN;\n    }\n\n    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n    units = normalizeUnits(units);\n\n    switch (units) {\n      case 'year':\n        output = monthDiff(this, that) / 12;\n        break;\n\n      case 'month':\n        output = monthDiff(this, that);\n        break;\n\n      case 'quarter':\n        output = monthDiff(this, that) / 3;\n        break;\n\n      case 'second':\n        output = (this - that) / 1e3;\n        break;\n      // 1000\n\n      case 'minute':\n        output = (this - that) / 6e4;\n        break;\n      // 1000 * 60\n\n      case 'hour':\n        output = (this - that) / 36e5;\n        break;\n      // 1000 * 60 * 60\n\n      case 'day':\n        output = (this - that - zoneDelta) / 864e5;\n        break;\n      // 1000 * 60 * 60 * 24, negate dst\n\n      case 'week':\n        output = (this - that - zoneDelta) / 6048e5;\n        break;\n      // 1000 * 60 * 60 * 24 * 7, negate dst\n\n      default:\n        output = this - that;\n    }\n\n    return asFloat ? output : absFloor(output);\n  }\n\n  function monthDiff(a, b) {\n    // difference in months\n    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n        // b is in (anchor - 1 month, anchor + 1 month)\n    anchor = a.clone().add(wholeMonthDiff, 'months'),\n        anchor2,\n        adjust;\n\n    if (b - anchor < 0) {\n      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month\n\n      adjust = (b - anchor) / (anchor - anchor2);\n    } else {\n      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month\n\n      adjust = (b - anchor) / (anchor2 - anchor);\n    } //check for negative zero, return zero if negative zero\n\n\n    return -(wholeMonthDiff + adjust) || 0;\n  }\n\n  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n  function toString() {\n    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n  }\n\n  function toISOString(keepOffset) {\n    if (!this.isValid()) {\n      return null;\n    }\n\n    var utc = keepOffset !== true;\n    var m = utc ? this.clone().utc() : this;\n\n    if (m.year() < 0 || m.year() > 9999) {\n      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    if (isFunction(Date.prototype.toISOString)) {\n      // native implementation is ~50x faster, use it when we can\n      if (utc) {\n        return this.toDate().toISOString();\n      } else {\n        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n      }\n    }\n\n    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n  }\n  /**\n   * Return a human readable representation of a moment that can\n   * also be evaluated to get a new moment which is the same\n   *\n   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n   */\n\n\n  function inspect() {\n    if (!this.isValid()) {\n      return 'moment.invalid(/* ' + this._i + ' */)';\n    }\n\n    var func = 'moment';\n    var zone = '';\n\n    if (!this.isLocal()) {\n      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n      zone = 'Z';\n    }\n\n    var prefix = '[' + func + '(\"]';\n    var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n    var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n    var suffix = zone + '[\")]';\n    return this.format(prefix + year + datetime + suffix);\n  }\n\n  function format(inputString) {\n    if (!inputString) {\n      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n    }\n\n    var output = formatMoment(this, inputString);\n    return this.localeData().postformat(output);\n  }\n\n  function from(time, withoutSuffix) {\n    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n      return createDuration({\n        to: this,\n        from: time\n      }).locale(this.locale()).humanize(!withoutSuffix);\n    } else {\n      return this.localeData().invalidDate();\n    }\n  }\n\n  function fromNow(withoutSuffix) {\n    return this.from(createLocal(), withoutSuffix);\n  }\n\n  function to(time, withoutSuffix) {\n    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n      return createDuration({\n        from: this,\n        to: time\n      }).locale(this.locale()).humanize(!withoutSuffix);\n    } else {\n      return this.localeData().invalidDate();\n    }\n  }\n\n  function toNow(withoutSuffix) {\n    return this.to(createLocal(), withoutSuffix);\n  } // If passed a locale key, it will set the locale for this\n  // instance.  Otherwise, it will return the locale configuration\n  // variables for this instance.\n\n\n  function locale(key) {\n    var newLocaleData;\n\n    if (key === undefined) {\n      return this._locale._abbr;\n    } else {\n      newLocaleData = getLocale(key);\n\n      if (newLocaleData != null) {\n        this._locale = newLocaleData;\n      }\n\n      return this;\n    }\n  }\n\n  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {\n    if (key === undefined) {\n      return this.localeData();\n    } else {\n      return this.locale(key);\n    }\n  });\n\n  function localeData() {\n    return this._locale;\n  }\n\n  var MS_PER_SECOND = 1000;\n  var MS_PER_MINUTE = 60 * MS_PER_SECOND;\n  var MS_PER_HOUR = 60 * MS_PER_MINUTE;\n  var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):\n\n  function mod$1(dividend, divisor) {\n    return (dividend % divisor + divisor) % divisor;\n  }\n\n  function localStartOfDate(y, m, d) {\n    // the date constructor remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n      // preserve leap years using a full 400 year cycle, then reset\n      return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n    } else {\n      return new Date(y, m, d).valueOf();\n    }\n  }\n\n  function utcStartOfDate(y, m, d) {\n    // Date.UTC remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n      // preserve leap years using a full 400 year cycle, then reset\n      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n    } else {\n      return Date.UTC(y, m, d);\n    }\n  }\n\n  function startOf(units) {\n    var time;\n    units = normalizeUnits(units);\n\n    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n      return this;\n    }\n\n    var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n    switch (units) {\n      case 'year':\n        time = startOfDate(this.year(), 0, 1);\n        break;\n\n      case 'quarter':\n        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n        break;\n\n      case 'month':\n        time = startOfDate(this.year(), this.month(), 1);\n        break;\n\n      case 'week':\n        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n        break;\n\n      case 'isoWeek':\n        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n        break;\n\n      case 'day':\n      case 'date':\n        time = startOfDate(this.year(), this.month(), this.date());\n        break;\n\n      case 'hour':\n        time = this._d.valueOf();\n        time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n        break;\n\n      case 'minute':\n        time = this._d.valueOf();\n        time -= mod$1(time, MS_PER_MINUTE);\n        break;\n\n      case 'second':\n        time = this._d.valueOf();\n        time -= mod$1(time, MS_PER_SECOND);\n        break;\n    }\n\n    this._d.setTime(time);\n\n    hooks.updateOffset(this, true);\n    return this;\n  }\n\n  function endOf(units) {\n    var time;\n    units = normalizeUnits(units);\n\n    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n      return this;\n    }\n\n    var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n    switch (units) {\n      case 'year':\n        time = startOfDate(this.year() + 1, 0, 1) - 1;\n        break;\n\n      case 'quarter':\n        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n        break;\n\n      case 'month':\n        time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n        break;\n\n      case 'week':\n        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n        break;\n\n      case 'isoWeek':\n        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n        break;\n\n      case 'day':\n      case 'date':\n        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n        break;\n\n      case 'hour':\n        time = this._d.valueOf();\n        time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n        break;\n\n      case 'minute':\n        time = this._d.valueOf();\n        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n        break;\n\n      case 'second':\n        time = this._d.valueOf();\n        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n        break;\n    }\n\n    this._d.setTime(time);\n\n    hooks.updateOffset(this, true);\n    return this;\n  }\n\n  function valueOf() {\n    return this._d.valueOf() - (this._offset || 0) * 60000;\n  }\n\n  function unix() {\n    return Math.floor(this.valueOf() / 1000);\n  }\n\n  function toDate() {\n    return new Date(this.valueOf());\n  }\n\n  function toArray() {\n    var m = this;\n    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n  }\n\n  function toObject() {\n    var m = this;\n    return {\n      years: m.year(),\n      months: m.month(),\n      date: m.date(),\n      hours: m.hours(),\n      minutes: m.minutes(),\n      seconds: m.seconds(),\n      milliseconds: m.milliseconds()\n    };\n  }\n\n  function toJSON() {\n    // new Date(NaN).toJSON() === null\n    return this.isValid() ? this.toISOString() : null;\n  }\n\n  function isValid$2() {\n    return isValid(this);\n  }\n\n  function parsingFlags() {\n    return extend({}, getParsingFlags(this));\n  }\n\n  function invalidAt() {\n    return getParsingFlags(this).overflow;\n  }\n\n  function creationData() {\n    return {\n      input: this._i,\n      format: this._f,\n      locale: this._locale,\n      isUTC: this._isUTC,\n      strict: this._strict\n    };\n  } // FORMATTING\n\n\n  addFormatToken(0, ['gg', 2], 0, function () {\n    return this.weekYear() % 100;\n  });\n  addFormatToken(0, ['GG', 2], 0, function () {\n    return this.isoWeekYear() % 100;\n  });\n\n  function addWeekYearFormatToken(token, getter) {\n    addFormatToken(0, [token, token.length], 0, getter);\n  }\n\n  addWeekYearFormatToken('gggg', 'weekYear');\n  addWeekYearFormatToken('ggggg', 'weekYear');\n  addWeekYearFormatToken('GGGG', 'isoWeekYear');\n  addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES\n\n  addUnitAlias('weekYear', 'gg');\n  addUnitAlias('isoWeekYear', 'GG'); // PRIORITY\n\n  addUnitPriority('weekYear', 1);\n  addUnitPriority('isoWeekYear', 1); // PARSING\n\n  addRegexToken('G', matchSigned);\n  addRegexToken('g', matchSigned);\n  addRegexToken('GG', match1to2, match2);\n  addRegexToken('gg', match1to2, match2);\n  addRegexToken('GGGG', match1to4, match4);\n  addRegexToken('gggg', match1to4, match4);\n  addRegexToken('GGGGG', match1to6, match6);\n  addRegexToken('ggggg', match1to6, match6);\n  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n    week[token.substr(0, 2)] = toInt(input);\n  });\n  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n    week[token] = hooks.parseTwoDigitYear(input);\n  }); // MOMENTS\n\n  function getSetWeekYear(input) {\n    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);\n  }\n\n  function getSetISOWeekYear(input) {\n    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);\n  }\n\n  function getISOWeeksInYear() {\n    return weeksInYear(this.year(), 1, 4);\n  }\n\n  function getWeeksInYear() {\n    var weekInfo = this.localeData()._week;\n\n    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n  }\n\n  function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n    var weeksTarget;\n\n    if (input == null) {\n      return weekOfYear(this, dow, doy).year;\n    } else {\n      weeksTarget = weeksInYear(input, dow, doy);\n\n      if (week > weeksTarget) {\n        week = weeksTarget;\n      }\n\n      return setWeekAll.call(this, input, week, weekday, dow, doy);\n    }\n  }\n\n  function setWeekAll(weekYear, week, weekday, dow, doy) {\n    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n    this.year(date.getUTCFullYear());\n    this.month(date.getUTCMonth());\n    this.date(date.getUTCDate());\n    return this;\n  } // FORMATTING\n\n\n  addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES\n\n  addUnitAlias('quarter', 'Q'); // PRIORITY\n\n  addUnitPriority('quarter', 7); // PARSING\n\n  addRegexToken('Q', match1);\n  addParseToken('Q', function (input, array) {\n    array[MONTH] = (toInt(input) - 1) * 3;\n  }); // MOMENTS\n\n  function getSetQuarter(input) {\n    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n  } // FORMATTING\n\n\n  addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES\n\n  addUnitAlias('date', 'D'); // PRIORITY\n\n  addUnitPriority('date', 9); // PARSING\n\n  addRegexToken('D', match1to2);\n  addRegexToken('DD', match1to2, match2);\n  addRegexToken('Do', function (isStrict, locale) {\n    // TODO: Remove \"ordinalParse\" fallback in next major release.\n    return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;\n  });\n  addParseToken(['D', 'DD'], DATE);\n  addParseToken('Do', function (input, array) {\n    array[DATE] = toInt(input.match(match1to2)[0]);\n  }); // MOMENTS\n\n  var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING\n\n  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES\n\n  addUnitAlias('dayOfYear', 'DDD'); // PRIORITY\n\n  addUnitPriority('dayOfYear', 4); // PARSING\n\n  addRegexToken('DDD', match1to3);\n  addRegexToken('DDDD', match3);\n  addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n    config._dayOfYear = toInt(input);\n  }); // HELPERS\n  // MOMENTS\n\n  function getSetDayOfYear(input) {\n    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n  } // FORMATTING\n\n\n  addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES\n\n  addUnitAlias('minute', 'm'); // PRIORITY\n\n  addUnitPriority('minute', 14); // PARSING\n\n  addRegexToken('m', match1to2);\n  addRegexToken('mm', match1to2, match2);\n  addParseToken(['m', 'mm'], MINUTE); // MOMENTS\n\n  var getSetMinute = makeGetSet('Minutes', false); // FORMATTING\n\n  addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES\n\n  addUnitAlias('second', 's'); // PRIORITY\n\n  addUnitPriority('second', 15); // PARSING\n\n  addRegexToken('s', match1to2);\n  addRegexToken('ss', match1to2, match2);\n  addParseToken(['s', 'ss'], SECOND); // MOMENTS\n\n  var getSetSecond = makeGetSet('Seconds', false); // FORMATTING\n\n  addFormatToken('S', 0, 0, function () {\n    return ~~(this.millisecond() / 100);\n  });\n  addFormatToken(0, ['SS', 2], 0, function () {\n    return ~~(this.millisecond() / 10);\n  });\n  addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n  addFormatToken(0, ['SSSS', 4], 0, function () {\n    return this.millisecond() * 10;\n  });\n  addFormatToken(0, ['SSSSS', 5], 0, function () {\n    return this.millisecond() * 100;\n  });\n  addFormatToken(0, ['SSSSSS', 6], 0, function () {\n    return this.millisecond() * 1000;\n  });\n  addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n    return this.millisecond() * 10000;\n  });\n  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n    return this.millisecond() * 100000;\n  });\n  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n    return this.millisecond() * 1000000;\n  }); // ALIASES\n\n  addUnitAlias('millisecond', 'ms'); // PRIORITY\n\n  addUnitPriority('millisecond', 16); // PARSING\n\n  addRegexToken('S', match1to3, match1);\n  addRegexToken('SS', match1to3, match2);\n  addRegexToken('SSS', match1to3, match3);\n  var token;\n\n  for (token = 'SSSS'; token.length <= 9; token += 'S') {\n    addRegexToken(token, matchUnsigned);\n  }\n\n  function parseMs(input, array) {\n    array[MILLISECOND] = toInt(('0.' + input) * 1000);\n  }\n\n  for (token = 'S'; token.length <= 9; token += 'S') {\n    addParseToken(token, parseMs);\n  } // MOMENTS\n\n\n  var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING\n\n  addFormatToken('z', 0, 0, 'zoneAbbr');\n  addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS\n\n  function getZoneAbbr() {\n    return this._isUTC ? 'UTC' : '';\n  }\n\n  function getZoneName() {\n    return this._isUTC ? 'Coordinated Universal Time' : '';\n  }\n\n  var proto = Moment.prototype;\n  proto.add = add;\n  proto.calendar = calendar$1;\n  proto.clone = clone;\n  proto.diff = diff;\n  proto.endOf = endOf;\n  proto.format = format;\n  proto.from = from;\n  proto.fromNow = fromNow;\n  proto.to = to;\n  proto.toNow = toNow;\n  proto.get = stringGet;\n  proto.invalidAt = invalidAt;\n  proto.isAfter = isAfter;\n  proto.isBefore = isBefore;\n  proto.isBetween = isBetween;\n  proto.isSame = isSame;\n  proto.isSameOrAfter = isSameOrAfter;\n  proto.isSameOrBefore = isSameOrBefore;\n  proto.isValid = isValid$2;\n  proto.lang = lang;\n  proto.locale = locale;\n  proto.localeData = localeData;\n  proto.max = prototypeMax;\n  proto.min = prototypeMin;\n  proto.parsingFlags = parsingFlags;\n  proto.set = stringSet;\n  proto.startOf = startOf;\n  proto.subtract = subtract;\n  proto.toArray = toArray;\n  proto.toObject = toObject;\n  proto.toDate = toDate;\n  proto.toISOString = toISOString;\n  proto.inspect = inspect;\n  proto.toJSON = toJSON;\n  proto.toString = toString;\n  proto.unix = unix;\n  proto.valueOf = valueOf;\n  proto.creationData = creationData;\n  proto.year = getSetYear;\n  proto.isLeapYear = getIsLeapYear;\n  proto.weekYear = getSetWeekYear;\n  proto.isoWeekYear = getSetISOWeekYear;\n  proto.quarter = proto.quarters = getSetQuarter;\n  proto.month = getSetMonth;\n  proto.daysInMonth = getDaysInMonth;\n  proto.week = proto.weeks = getSetWeek;\n  proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n  proto.weeksInYear = getWeeksInYear;\n  proto.isoWeeksInYear = getISOWeeksInYear;\n  proto.date = getSetDayOfMonth;\n  proto.day = proto.days = getSetDayOfWeek;\n  proto.weekday = getSetLocaleDayOfWeek;\n  proto.isoWeekday = getSetISODayOfWeek;\n  proto.dayOfYear = getSetDayOfYear;\n  proto.hour = proto.hours = getSetHour;\n  proto.minute = proto.minutes = getSetMinute;\n  proto.second = proto.seconds = getSetSecond;\n  proto.millisecond = proto.milliseconds = getSetMillisecond;\n  proto.utcOffset = getSetOffset;\n  proto.utc = setOffsetToUTC;\n  proto.local = setOffsetToLocal;\n  proto.parseZone = setOffsetToParsedOffset;\n  proto.hasAlignedHourOffset = hasAlignedHourOffset;\n  proto.isDST = isDaylightSavingTime;\n  proto.isLocal = isLocal;\n  proto.isUtcOffset = isUtcOffset;\n  proto.isUtc = isUtc;\n  proto.isUTC = isUtc;\n  proto.zoneAbbr = getZoneAbbr;\n  proto.zoneName = getZoneName;\n  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n  function createUnix(input) {\n    return createLocal(input * 1000);\n  }\n\n  function createInZone() {\n    return createLocal.apply(null, arguments).parseZone();\n  }\n\n  function preParsePostFormat(string) {\n    return string;\n  }\n\n  var proto$1 = Locale.prototype;\n  proto$1.calendar = calendar;\n  proto$1.longDateFormat = longDateFormat;\n  proto$1.invalidDate = invalidDate;\n  proto$1.ordinal = ordinal;\n  proto$1.preparse = preParsePostFormat;\n  proto$1.postformat = preParsePostFormat;\n  proto$1.relativeTime = relativeTime;\n  proto$1.pastFuture = pastFuture;\n  proto$1.set = set;\n  proto$1.months = localeMonths;\n  proto$1.monthsShort = localeMonthsShort;\n  proto$1.monthsParse = localeMonthsParse;\n  proto$1.monthsRegex = monthsRegex;\n  proto$1.monthsShortRegex = monthsShortRegex;\n  proto$1.week = localeWeek;\n  proto$1.firstDayOfYear = localeFirstDayOfYear;\n  proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n  proto$1.weekdays = localeWeekdays;\n  proto$1.weekdaysMin = localeWeekdaysMin;\n  proto$1.weekdaysShort = localeWeekdaysShort;\n  proto$1.weekdaysParse = localeWeekdaysParse;\n  proto$1.weekdaysRegex = weekdaysRegex;\n  proto$1.weekdaysShortRegex = weekdaysShortRegex;\n  proto$1.weekdaysMinRegex = weekdaysMinRegex;\n  proto$1.isPM = localeIsPM;\n  proto$1.meridiem = localeMeridiem;\n\n  function get$1(format, index, field, setter) {\n    var locale = getLocale();\n    var utc = createUTC().set(setter, index);\n    return locale[field](utc, format);\n  }\n\n  function listMonthsImpl(format, index, field) {\n    if (isNumber(format)) {\n      index = format;\n      format = undefined;\n    }\n\n    format = format || '';\n\n    if (index != null) {\n      return get$1(format, index, field, 'month');\n    }\n\n    var i;\n    var out = [];\n\n    for (i = 0; i < 12; i++) {\n      out[i] = get$1(format, i, field, 'month');\n    }\n\n    return out;\n  } // ()\n  // (5)\n  // (fmt, 5)\n  // (fmt)\n  // (true)\n  // (true, 5)\n  // (true, fmt, 5)\n  // (true, fmt)\n\n\n  function listWeekdaysImpl(localeSorted, format, index, field) {\n    if (typeof localeSorted === 'boolean') {\n      if (isNumber(format)) {\n        index = format;\n        format = undefined;\n      }\n\n      format = format || '';\n    } else {\n      format = localeSorted;\n      index = format;\n      localeSorted = false;\n\n      if (isNumber(format)) {\n        index = format;\n        format = undefined;\n      }\n\n      format = format || '';\n    }\n\n    var locale = getLocale(),\n        shift = localeSorted ? locale._week.dow : 0;\n\n    if (index != null) {\n      return get$1(format, (index + shift) % 7, field, 'day');\n    }\n\n    var i;\n    var out = [];\n\n    for (i = 0; i < 7; i++) {\n      out[i] = get$1(format, (i + shift) % 7, field, 'day');\n    }\n\n    return out;\n  }\n\n  function listMonths(format, index) {\n    return listMonthsImpl(format, index, 'months');\n  }\n\n  function listMonthsShort(format, index) {\n    return listMonthsImpl(format, index, 'monthsShort');\n  }\n\n  function listWeekdays(localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n  }\n\n  function listWeekdaysShort(localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n  }\n\n  function listWeekdaysMin(localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n  }\n\n  getSetGlobalLocale('en', {\n    dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n    ordinal: function (number) {\n      var b = number % 10,\n          output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n      return number + output;\n    }\n  }); // Side effect imports\n\n  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n  var mathAbs = Math.abs;\n\n  function abs() {\n    var data = this._data;\n    this._milliseconds = mathAbs(this._milliseconds);\n    this._days = mathAbs(this._days);\n    this._months = mathAbs(this._months);\n    data.milliseconds = mathAbs(data.milliseconds);\n    data.seconds = mathAbs(data.seconds);\n    data.minutes = mathAbs(data.minutes);\n    data.hours = mathAbs(data.hours);\n    data.months = mathAbs(data.months);\n    data.years = mathAbs(data.years);\n    return this;\n  }\n\n  function addSubtract$1(duration, input, value, direction) {\n    var other = createDuration(input, value);\n    duration._milliseconds += direction * other._milliseconds;\n    duration._days += direction * other._days;\n    duration._months += direction * other._months;\n    return duration._bubble();\n  } // supports only 2.0-style add(1, 's') or add(duration)\n\n\n  function add$1(input, value) {\n    return addSubtract$1(this, input, value, 1);\n  } // supports only 2.0-style subtract(1, 's') or subtract(duration)\n\n\n  function subtract$1(input, value) {\n    return addSubtract$1(this, input, value, -1);\n  }\n\n  function absCeil(number) {\n    if (number < 0) {\n      return Math.floor(number);\n    } else {\n      return Math.ceil(number);\n    }\n  }\n\n  function bubble() {\n    var milliseconds = this._milliseconds;\n    var days = this._days;\n    var months = this._months;\n    var data = this._data;\n    var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first\n    // check: https://github.com/moment/moment/issues/2166\n\n    if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {\n      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n      days = 0;\n      months = 0;\n    } // The following code bubbles up values, see the tests for\n    // examples of what that means.\n\n\n    data.milliseconds = milliseconds % 1000;\n    seconds = absFloor(milliseconds / 1000);\n    data.seconds = seconds % 60;\n    minutes = absFloor(seconds / 60);\n    data.minutes = minutes % 60;\n    hours = absFloor(minutes / 60);\n    data.hours = hours % 24;\n    days += absFloor(hours / 24); // convert days to months\n\n    monthsFromDays = absFloor(daysToMonths(days));\n    months += monthsFromDays;\n    days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year\n\n    years = absFloor(months / 12);\n    months %= 12;\n    data.days = days;\n    data.months = months;\n    data.years = years;\n    return this;\n  }\n\n  function daysToMonths(days) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    // 400 years have 12 months === 4800\n    return days * 4800 / 146097;\n  }\n\n  function monthsToDays(months) {\n    // the reverse of daysToMonths\n    return months * 146097 / 4800;\n  }\n\n  function as(units) {\n    if (!this.isValid()) {\n      return NaN;\n    }\n\n    var days;\n    var months;\n    var milliseconds = this._milliseconds;\n    units = normalizeUnits(units);\n\n    if (units === 'month' || units === 'quarter' || units === 'year') {\n      days = this._days + milliseconds / 864e5;\n      months = this._months + daysToMonths(days);\n\n      switch (units) {\n        case 'month':\n          return months;\n\n        case 'quarter':\n          return months / 3;\n\n        case 'year':\n          return months / 12;\n      }\n    } else {\n      // handle milliseconds separately because of floating point math errors (issue #1867)\n      days = this._days + Math.round(monthsToDays(this._months));\n\n      switch (units) {\n        case 'week':\n          return days / 7 + milliseconds / 6048e5;\n\n        case 'day':\n          return days + milliseconds / 864e5;\n\n        case 'hour':\n          return days * 24 + milliseconds / 36e5;\n\n        case 'minute':\n          return days * 1440 + milliseconds / 6e4;\n\n        case 'second':\n          return days * 86400 + milliseconds / 1000;\n        // Math.floor prevents floating point math errors here\n\n        case 'millisecond':\n          return Math.floor(days * 864e5) + milliseconds;\n\n        default:\n          throw new Error('Unknown unit ' + units);\n      }\n    }\n  } // TODO: Use this.as('ms')?\n\n\n  function valueOf$1() {\n    if (!this.isValid()) {\n      return NaN;\n    }\n\n    return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;\n  }\n\n  function makeAs(alias) {\n    return function () {\n      return this.as(alias);\n    };\n  }\n\n  var asMilliseconds = makeAs('ms');\n  var asSeconds = makeAs('s');\n  var asMinutes = makeAs('m');\n  var asHours = makeAs('h');\n  var asDays = makeAs('d');\n  var asWeeks = makeAs('w');\n  var asMonths = makeAs('M');\n  var asQuarters = makeAs('Q');\n  var asYears = makeAs('y');\n\n  function clone$1() {\n    return createDuration(this);\n  }\n\n  function get$2(units) {\n    units = normalizeUnits(units);\n    return this.isValid() ? this[units + 's']() : NaN;\n  }\n\n  function makeGetter(name) {\n    return function () {\n      return this.isValid() ? this._data[name] : NaN;\n    };\n  }\n\n  var milliseconds = makeGetter('milliseconds');\n  var seconds = makeGetter('seconds');\n  var minutes = makeGetter('minutes');\n  var hours = makeGetter('hours');\n  var days = makeGetter('days');\n  var months = makeGetter('months');\n  var years = makeGetter('years');\n\n  function weeks() {\n    return absFloor(this.days() / 7);\n  }\n\n  var round = Math.round;\n  var thresholds = {\n    ss: 44,\n    // a few seconds to seconds\n    s: 45,\n    // seconds to minute\n    m: 45,\n    // minutes to hour\n    h: 22,\n    // hours to day\n    d: 26,\n    // days to month\n    M: 11 // months to year\n\n  }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n\n  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n  }\n\n  function relativeTime$1(posNegDuration, withoutSuffix, locale) {\n    var duration = createDuration(posNegDuration).abs();\n    var seconds = round(duration.as('s'));\n    var minutes = round(duration.as('m'));\n    var hours = round(duration.as('h'));\n    var days = round(duration.as('d'));\n    var months = round(duration.as('M'));\n    var years = round(duration.as('y'));\n    var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];\n    a[2] = withoutSuffix;\n    a[3] = +posNegDuration > 0;\n    a[4] = locale;\n    return substituteTimeAgo.apply(null, a);\n  } // This function allows you to set the rounding function for relative time strings\n\n\n  function getSetRelativeTimeRounding(roundingFunction) {\n    if (roundingFunction === undefined) {\n      return round;\n    }\n\n    if (typeof roundingFunction === 'function') {\n      round = roundingFunction;\n      return true;\n    }\n\n    return false;\n  } // This function allows you to set a threshold for relative time strings\n\n\n  function getSetRelativeTimeThreshold(threshold, limit) {\n    if (thresholds[threshold] === undefined) {\n      return false;\n    }\n\n    if (limit === undefined) {\n      return thresholds[threshold];\n    }\n\n    thresholds[threshold] = limit;\n\n    if (threshold === 's') {\n      thresholds.ss = limit - 1;\n    }\n\n    return true;\n  }\n\n  function humanize(withSuffix) {\n    if (!this.isValid()) {\n      return this.localeData().invalidDate();\n    }\n\n    var locale = this.localeData();\n    var output = relativeTime$1(this, !withSuffix, locale);\n\n    if (withSuffix) {\n      output = locale.pastFuture(+this, output);\n    }\n\n    return locale.postformat(output);\n  }\n\n  var abs$1 = Math.abs;\n\n  function sign(x) {\n    return (x > 0) - (x < 0) || +x;\n  }\n\n  function toISOString$1() {\n    // for ISO strings we do not use the normal bubbling rules:\n    //  * milliseconds bubble up until they become hours\n    //  * days do not bubble at all\n    //  * months bubble up until they become years\n    // This is because there is no context-free conversion between hours and days\n    // (think of clock changes)\n    // and also not between days and months (28-31 days per month)\n    if (!this.isValid()) {\n      return this.localeData().invalidDate();\n    }\n\n    var seconds = abs$1(this._milliseconds) / 1000;\n    var days = abs$1(this._days);\n    var months = abs$1(this._months);\n    var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour\n\n    minutes = absFloor(seconds / 60);\n    hours = absFloor(minutes / 60);\n    seconds %= 60;\n    minutes %= 60; // 12 months -> 1 year\n\n    years = absFloor(months / 12);\n    months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n\n    var Y = years;\n    var M = months;\n    var D = days;\n    var h = hours;\n    var m = minutes;\n    var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n    var total = this.asSeconds();\n\n    if (!total) {\n      // this is the same as C#'s (Noda) and python (isodate)...\n      // but not other JS (goog.date)\n      return 'P0D';\n    }\n\n    var totalSign = total < 0 ? '-' : '';\n    var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n    var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n    return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');\n  }\n\n  var proto$2 = Duration.prototype;\n  proto$2.isValid = isValid$1;\n  proto$2.abs = abs;\n  proto$2.add = add$1;\n  proto$2.subtract = subtract$1;\n  proto$2.as = as;\n  proto$2.asMilliseconds = asMilliseconds;\n  proto$2.asSeconds = asSeconds;\n  proto$2.asMinutes = asMinutes;\n  proto$2.asHours = asHours;\n  proto$2.asDays = asDays;\n  proto$2.asWeeks = asWeeks;\n  proto$2.asMonths = asMonths;\n  proto$2.asQuarters = asQuarters;\n  proto$2.asYears = asYears;\n  proto$2.valueOf = valueOf$1;\n  proto$2._bubble = bubble;\n  proto$2.clone = clone$1;\n  proto$2.get = get$2;\n  proto$2.milliseconds = milliseconds;\n  proto$2.seconds = seconds;\n  proto$2.minutes = minutes;\n  proto$2.hours = hours;\n  proto$2.days = days;\n  proto$2.weeks = weeks;\n  proto$2.months = months;\n  proto$2.years = years;\n  proto$2.humanize = humanize;\n  proto$2.toISOString = toISOString$1;\n  proto$2.toString = toISOString$1;\n  proto$2.toJSON = toISOString$1;\n  proto$2.locale = locale;\n  proto$2.localeData = localeData;\n  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n  proto$2.lang = lang; // Side effect imports\n  // FORMATTING\n\n  addFormatToken('X', 0, 0, 'unix');\n  addFormatToken('x', 0, 0, 'valueOf'); // PARSING\n\n  addRegexToken('x', matchSigned);\n  addRegexToken('X', matchTimestamp);\n  addParseToken('X', function (input, array, config) {\n    config._d = new Date(parseFloat(input, 10) * 1000);\n  });\n  addParseToken('x', function (input, array, config) {\n    config._d = new Date(toInt(input));\n  }); // Side effect imports\n\n  hooks.version = '2.24.0';\n  setHookCallback(createLocal);\n  hooks.fn = proto;\n  hooks.min = min;\n  hooks.max = max;\n  hooks.now = now;\n  hooks.utc = createUTC;\n  hooks.unix = createUnix;\n  hooks.months = listMonths;\n  hooks.isDate = isDate;\n  hooks.locale = getSetGlobalLocale;\n  hooks.invalid = createInvalid;\n  hooks.duration = createDuration;\n  hooks.isMoment = isMoment;\n  hooks.weekdays = listWeekdays;\n  hooks.parseZone = createInZone;\n  hooks.localeData = getLocale;\n  hooks.isDuration = isDuration;\n  hooks.monthsShort = listMonthsShort;\n  hooks.weekdaysMin = listWeekdaysMin;\n  hooks.defineLocale = defineLocale;\n  hooks.updateLocale = updateLocale;\n  hooks.locales = listLocales;\n  hooks.weekdaysShort = listWeekdaysShort;\n  hooks.normalizeUnits = normalizeUnits;\n  hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n  hooks.calendarFormat = getCalendarFormat;\n  hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats\n\n  hooks.HTML5_FMT = {\n    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',\n    // <input type=\"datetime-local\" />\n    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',\n    // <input type=\"datetime-local\" step=\"1\" />\n    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',\n    // <input type=\"datetime-local\" step=\"0.001\" />\n    DATE: 'YYYY-MM-DD',\n    // <input type=\"date\" />\n    TIME: 'HH:mm',\n    // <input type=\"time\" />\n    TIME_SECONDS: 'HH:mm:ss',\n    // <input type=\"time\" step=\"1\" />\n    TIME_MS: 'HH:mm:ss.SSS',\n    // <input type=\"time\" step=\"0.001\" />\n    WEEK: 'GGGG-[W]WW',\n    // <input type=\"week\" />\n    MONTH: 'YYYY-MM' // <input type=\"month\" />\n\n  };\n  return hooks;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(45)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return [];\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvYXJyLmpzP2M1YzciXSwibmFtZXMiOlsiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUNsQjs7QUFFQSxTQUFPLEVBQVA7QUFDQSxDQUpLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gW107XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvaXNXaW5kb3cuanM/ZDdhNSJdLCJuYW1lcyI6WyJkZWZpbmUiLCJpc1dpbmRvdyIsIm9iaiIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEI7O0FBRUEsU0FBTyxTQUFTQyxRQUFULENBQW1CQyxHQUFuQixFQUF5QjtBQUMvQixXQUFPQSxHQUFHLElBQUksSUFBUCxJQUFlQSxHQUFHLEtBQUtBLEdBQUcsQ0FBQ0MsTUFBbEM7QUFDQSxHQUZEO0FBSUEsQ0FQSztBQUFBLG9HQUFOIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // Matches dashed string for camelizing\n\n  var rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()\n\n  function fcamelCase(all, letter) {\n    return letter.toUpperCase();\n  } // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (#9572)\n\n\n  function camelCase(string) {\n    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);\n  }\n\n  return camelCase;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL2NhbWVsQ2FzZS5qcz84ZjNkIl0sIm5hbWVzIjpbImRlZmluZSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsRUFBRixtQ0FBTSxZQUFXO0FBRXZCLGVBRnVCLENBSXZCOztBQUNBLE1BQUlDLFNBQVMsR0FBRyxPQUFoQjtBQUFBLE1BQ0NDLFVBQVUsR0FBRyxXQURkLENBTHVCLENBUXZCOztBQUNBLFdBQVNDLFVBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxNQUExQixFQUFtQztBQUNsQyxXQUFPQSxNQUFNLENBQUNDLFdBQVAsRUFBUDtBQUNBLEdBWHNCLENBYXZCO0FBQ0E7QUFDQTs7O0FBQ0EsV0FBU0MsU0FBVCxDQUFvQkMsTUFBcEIsRUFBNkI7QUFDNUIsV0FBT0EsTUFBTSxDQUFDQyxPQUFQLENBQWdCUixTQUFoQixFQUEyQixLQUEzQixFQUFtQ1EsT0FBbkMsQ0FBNENQLFVBQTVDLEVBQXdEQyxVQUF4RCxDQUFQO0FBQ0E7O0FBRUQsU0FBT0ksU0FBUDtBQUVDLENBdEJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtdLCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG5cbnJldHVybiBjYW1lbENhc2U7XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(22), __webpack_require__(36), __webpack_require__(39), __webpack_require__(37), __webpack_require__(67), __webpack_require__(59), __webpack_require__(68), __webpack_require__(60), __webpack_require__(69), __webpack_require__(40), __webpack_require__(70), __webpack_require__(8), __webpack_require__(54), __webpack_require__(7) // contains\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, camelCase, rcssNum, rnumnonpx, cssExpand, getStyles, swap, curCSS, adjustCSS, addGetHookIf, support, finalPropName) {\n  "use strict";\n\n  var // Swappable if display is none or starts with table\n  // except "table", "table-cell", or "table-caption"\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rcustomProp = /^--/,\n      cssShow = {\n    position: "absolute",\n    visibility: "hidden",\n    display: "block"\n  },\n      cssNormalTransform = {\n    letterSpacing: "0",\n    fontWeight: "400"\n  };\n\n  function setPositiveNumber(elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;\n  }\n\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === "width" ? 1 : 0,\n        extra = 0,\n        delta = 0; // Adjustment may not be necessary\n\n    if (box === (isBorderBox ? "border" : "content")) {\n      return 0;\n    }\n\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      if (box === "margin") {\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      } // If we get here with a content-box, we\'re seeking "padding" or "border" or "margin"\n\n\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border\n\n        if (box !== "padding") {\n          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        } // If we get here with a border-box (content + padding + border), we\'re seeking "content" or\n        // "padding" or "margin"\n\n      } else {\n        // For "content", subtract padding\n        if (box === "content") {\n          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n        } // For "content" or "padding", subtract border\n\n\n        if (box !== "margin") {\n          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        }\n      }\n    } // Account for positive content-box scroll gutter when requested by providing computedVal\n\n\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can\'t determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n\n    return delta;\n  }\n\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n    // Fake content-box until we know it\'s needed to know the true value.\n    boxSizingNeeded = !support.boxSizingReliable() || extra,\n        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n        valueIsBorderBox = isBorderBox,\n        val = curCSS(elem, dimension, styles),\n        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n\n      val = "auto";\n    } // Fall back to offsetWidth/offsetHeight when value is "auto"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    // Support: IE 9-11 only\n    // Also use offsetWidth/offsetHeight for when box sizing is unreliable\n    // We use getClientRects() to check for hidden/disconnected.\n    // In those cases, the computed value can be trusted to be border-box\n\n\n    if ((!support.boxSizingReliable() && isBorderBox || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n\n      valueIsBorderBox = offsetProp in elem;\n\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    } // Normalize "" and auto\n\n\n    val = parseFloat(val) || 0; // Adjust for the element\'s box model\n\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + "px";\n  }\n\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function (elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, "opacity");\n            return ret === "" ? "1" : ret;\n          }\n        }\n      }\n    },\n    // Don\'t automatically add "px" to these possibly-unitless properties\n    cssNumber: {\n      "animationIterationCount": true,\n      "columnCount": true,\n      "fillOpacity": true,\n      "flexGrow": true,\n      "flexShrink": true,\n      "fontWeight": true,\n      "gridArea": true,\n      "gridColumn": true,\n      "gridColumnEnd": true,\n      "gridColumnStart": true,\n      "gridRow": true,\n      "gridRowEnd": true,\n      "gridRowStart": true,\n      "lineHeight": true,\n      "opacity": true,\n      "order": true,\n      "orphans": true,\n      "widows": true,\n      "zIndex": true,\n      "zoom": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function (elem, name, value, extra) {\n      // Don\'t set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we\'re working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name),\n          style = elem.style; // Make sure that we\'re working with the right name. We don\'t\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Gets hook for the prefixed version, then unprefixed version\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we\'re setting a value\n\n      if (value !== undefined) {\n        type = typeof value; // Convert "+=" or "-=" to relative numbers (#7345)\n\n        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret); // Fixes bug #9237\n\n          type = "number";\n        } // Make sure that null and NaN values aren\'t set (#7116)\n\n\n        if (value == null || value !== value) {\n          return;\n        } // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // "px" to a few hardcoded values.\n\n\n        if (type === "number" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");\n        } // background-* props affect original clone\'s values\n\n\n        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {\n          style[name] = "inherit";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function (elem, name, extra, styles) {\n      var val,\n          num,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name); // Make sure that we\'re working with the right name. We don\'t\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Try prefixed name followed by the unprefixed name\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && "get" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } // Convert "normal" to computed value\n\n\n      if (val === "normal" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === "" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n\n      return val;\n    }\n  });\n  jQuery.each(["height", "width"], function (i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function (elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+\n          // Table columns in Safari have non-zero offsetWidth & zero\n          // getBoundingClientRect().width unless display is changed.\n          // Support: IE <=11 only\n          // Running getBoundingClientRect on a disconnected node\n          // in IE throws an error.\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function (elem, value, extra) {\n        var matches,\n            styles = getStyles(elem),\n            // Only read styles.position if the test has a chance to fail\n        // to avoid forcing a reflow.\n        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",\n            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n        boxSizingNeeded = scrollboxSizeBuggy || extra,\n            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);\n        } // Convert to pixels if value adjustment is needed\n\n\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + "px";\n    }\n  }); // These hooks are used by animate to expand properties\n\n  jQuery.each({\n    margin: "",\n    padding: "",\n    border: "Width"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function (value) {\n        var i = 0,\n            expanded = {},\n            // Assumes a single number if not a string\n        parts = typeof value === "string" ? value.split(" ") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (prefix !== "margin") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function (name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n            len,\n            map = {},\n            i = 0;\n\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {\n  "use strict";\n\n  return arr.slice;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvc2xpY2UuanM/NDEwYyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJhcnIiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1AsdUJBRE8sQ0FBRixtQ0FFSCxVQUFVQyxHQUFWLEVBQWdCO0FBQ2xCOztBQUVBLFNBQU9BLEdBQUcsQ0FBQ0MsS0FBWDtBQUNBLENBTks7QUFBQSxvR0FBTiIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4vYXJyXCJcbl0sIGZ1bmN0aW9uKCBhcnIgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHJldHVybiBhcnIuc2xpY2U7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // [[Class]] -> type pairs\n\n  return {};\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvY2xhc3MydHlwZS5qcz8xNDM4Il0sIm5hbWVzIjpbImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEIsZUFEa0IsQ0FHbEI7O0FBQ0EsU0FBTyxFQUFQO0FBQ0EsQ0FMSztBQUFBLG9HQUFOIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0Ly8gW1tDbGFzc11dIC0+IHR5cGUgcGFpcnNcblx0cmV0dXJuIHt9O1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(27), __webpack_require__(7) // jQuery.contains\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, documentElement) {\n  "use strict";\n\n  var isAttached = function (elem) {\n    return jQuery.contains(elem.ownerDocument, elem);\n  },\n      composed = {\n    composed: true\n  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n\n\n  if (documentElement.getRootNode) {\n    isAttached = function (elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n\n  return isAttached;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL2lzQXR0YWNoZWQuanM/MmU2MCJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJkb2N1bWVudEVsZW1lbnQiLCJpc0F0dGFjaGVkIiwiZWxlbSIsImNvbnRhaW5zIiwib3duZXJEb2N1bWVudCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sRUFHUCxzQkFITyxDQUdPO0FBSFAsQ0FBRixtQ0FJSCxVQUFVQyxNQUFWLEVBQWtCQyxlQUFsQixFQUFvQztBQUN0Qzs7QUFFQSxNQUFJQyxVQUFVLEdBQUcsVUFBVUMsSUFBVixFQUFpQjtBQUNoQyxXQUFPSCxNQUFNLENBQUNJLFFBQVAsQ0FBaUJELElBQUksQ0FBQ0UsYUFBdEIsRUFBcUNGLElBQXJDLENBQVA7QUFDQSxHQUZGO0FBQUEsTUFHQ0csUUFBUSxHQUFHO0FBQUVBLFlBQVEsRUFBRTtBQUFaLEdBSFosQ0FIc0MsQ0FRdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBS0wsZUFBZSxDQUFDTSxXQUFyQixFQUFtQztBQUNsQ0wsY0FBVSxHQUFHLFVBQVVDLElBQVYsRUFBaUI7QUFDN0IsYUFBT0gsTUFBTSxDQUFDSSxRQUFQLENBQWlCRCxJQUFJLENBQUNFLGFBQXRCLEVBQXFDRixJQUFyQyxLQUNOQSxJQUFJLENBQUNJLFdBQUwsQ0FBa0JELFFBQWxCLE1BQWlDSCxJQUFJLENBQUNFLGFBRHZDO0FBRUEsS0FIRDtBQUlBOztBQUVELFNBQU9ILFVBQVA7QUFDQSxDQXpCSztBQUFBLG9HQUFOIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL3Zhci9kb2N1bWVudEVsZW1lbnRcIixcblx0XCIuLi9zZWxlY3RvclwiIC8vIGpRdWVyeS5jb250YWluc1xuXSwgZnVuY3Rpb24oIGpRdWVyeSwgZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIGlzQXR0YWNoZWQ7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document) {\n  "use strict";\n\n  return document.documentElement;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvZG9jdW1lbnRFbGVtZW50LmpzP2I3M2YiXSwibmFtZXMiOlsiZGVmaW5lIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLENBQUYsbUNBRUgsVUFBVUMsUUFBVixFQUFxQjtBQUN2Qjs7QUFFQSxTQUFPQSxRQUFRLENBQUNDLGVBQWhCO0FBQ0EsQ0FOSztBQUFBLG9HQUFOIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9kb2N1bWVudFwiXG5dLCBmdW5jdGlvbiggZG9jdW1lbnQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(26), __webpack_require__(46), __webpack_require__(3), __webpack_require__(47), __webpack_require__(38), __webpack_require__(13), __webpack_require__(61), __webpack_require__(62), __webpack_require__(63), __webpack_require__(64), __webpack_require__(65), __webpack_require__(66), __webpack_require__(88), __webpack_require__(9), __webpack_require__(56), __webpack_require__(33), __webpack_require__(50), __webpack_require__(12), __webpack_require__(8), __webpack_require__(15), __webpack_require__(7), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isAttached, concat, isFunction, push, rcheckableType, access, rtagName, rscriptType, wrapMap, getAll, setGlobalEval, buildFragment, support, dataPriv, dataUser, acceptData, DOMEval, nodeName) {\n  "use strict";\n\n  var\n  /* eslint-disable max-len */\n  // See https://github.com/eslint/eslint/issues/3229\n  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n  /* eslint-enable */\n  // Support: IE <=10 - 11, Edge 12 - 13 only\n  // In IE/Edge using regex groups here causes severe slowdowns.\n  // See https://connect.microsoft.com/IE/feedback/details/1736512/\n  rnoInnerhtml = /<script|<style|<link/i,\n      // checked="checked" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g; // Prefer a tbody over its parent table for containing new rows\n\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {\n      return jQuery(elem).children("tbody")[0] || elem;\n    }\n\n    return elem;\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    if ((elem.type || "").slice(0, 5) === "true/") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute("type");\n    }\n\n    return elem;\n  }\n\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n    if (dest.nodeType !== 1) {\n      return;\n    } // 1. Copy private data: events, handlers, etc.\n\n\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.access(src);\n      pdataCur = dataPriv.set(dest, pdataOld);\n      events = pdataOld.events;\n\n      if (events) {\n        delete pdataCur.handle;\n        pdataCur.events = {};\n\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    } // 2. Copy user data\n\n\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  } // Fix IE bugs, see support tests\n\n\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n    if (nodeName === "input" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === "input" || nodeName === "textarea") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = concat.apply([], args);\n    var fragment,\n        first,\n        scripts,\n        hasScripts,\n        node,\n        doc,\n        i = 0,\n        l = collection.length,\n        iNoClone = l - 1,\n        value = args[0],\n        valueIsFunction = isFunction(value); // We can\'t cloneNode fragments that contain checked, in WebKit\n\n    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n\n        domManip(self, args, callback, ignored);\n      });\n    }\n\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      } // Require either new content or an interest in ignored elements to invoke the callback\n\n\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, "script"), disableScript);\n        hasScripts = scripts.length; // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (#8070).\n\n        for (; i < l; i++) {\n          node = fragment;\n\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, "script"));\n            }\n          }\n\n          callback.call(collection[i], node, i);\n        }\n\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n\n            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || "").toLowerCase() !== "module") {\n                // Optional AJAX dependency, but won\'t run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute("nonce")\n                  });\n                }\n              } else {\n                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return collection;\n  }\n\n  function remove(elem, selector, keepData) {\n    var node,\n        nodes = selector ? jQuery.filter(selector, elem) : elem,\n        i = 0;\n\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, "script"));\n        }\n\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    return elem;\n  }\n\n  jQuery.extend({\n    htmlPrefilter: function (html) {\n      return html.replace(rxhtmlTag, "<$1></$2>");\n    },\n    clone: function (elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n          l,\n          srcElements,\n          destElements,\n          clone = elem.cloneNode(true),\n          inPage = isAttached(elem); // Fix IE cloning issues\n\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, "script");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, "script"));\n      } // Return the cloned set\n\n\n      return clone;\n    },\n    cleanData: function (elems) {\n      var data,\n          elem,\n          type,\n          special = jQuery.event.special,\n          i = 0;\n\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove\'s overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            } // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n\n\n            elem[dataPriv.expando] = undefined;\n          }\n\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function (selector) {\n      return remove(this, selector, true);\n    },\n    remove: function (selector) {\n      return remove(this, selector);\n    },\n    text: function (value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function () {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n          elem.textContent = "";\n        }\n      }\n\n      return this;\n    },\n    clone: function (dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function (value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function () {\n      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\n\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        } // Force callback invocation\n\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: "append",\n    prependTo: "prepend",\n    insertBefore: "before",\n    insertAfter: "after",\n    replaceAll: "replaceWith"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1,\n          i = 0;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n\n        push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n')},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n(function () {\n  // Baseline setup\n  // --------------\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self || typeof global == 'object' && global.global === global && global || this || {}; // Save the previous value of the `_` variable.\n\n  var previousUnderscore = root._; // Save bytes in the minified (but not gzipped) version:\n\n  var ArrayProto = Array.prototype,\n      ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null; // Create quick reference variables for speed access to core prototypes.\n\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty; // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create; // Naked function reference for surrogate-prototype-swapping.\n\n  var Ctor = function () {}; // Create a safe reference to the Underscore object for use below.\n\n\n  var _ = function (obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  }; // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n\n\n  if ( true && !exports.nodeType) {\n    if ( true && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n\n    exports._ = _;\n  } else {\n    root._ = _;\n  } // Current version.\n\n\n  _.VERSION = '1.9.1'; // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n\n  var optimizeCb = function (func, context, argCount) {\n    if (context === void 0) return func;\n\n    switch (argCount == null ? 3 : argCount) {\n      case 1:\n        return function (value) {\n          return func.call(context, value);\n        };\n      // The 2-argument case is omitted because we’re not using it.\n\n      case 3:\n        return function (value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n\n      case 4:\n        return function (accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n    }\n\n    return function () {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee; // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n\n  var cb = function (value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  }; // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n\n\n  _.iteratee = builtinIteratee = function (value, context) {\n    return cb(value, context, Infinity);\n  }; // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n\n\n  var restArguments = function (func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function () {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n\n      switch (startIndex) {\n        case 0:\n          return func.call(this, rest);\n\n        case 1:\n          return func.call(this, arguments[0], rest);\n\n        case 2:\n          return func.call(this, arguments[0], arguments[1], rest);\n      }\n\n      var args = Array(startIndex + 1);\n\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  }; // An internal function for creating a new object that inherits from another.\n\n\n  var baseCreate = function (prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor();\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function (key) {\n    return function (obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function (obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  };\n\n  var deepGet = function (obj, path) {\n    var length = path.length;\n\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n\n    return length ? obj : void 0;\n  }; // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n\n\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n\n  var isArrayLike = function (collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  }; // Collection Functions\n  // --------------------\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n\n\n  _.each = _.forEach = function (obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n\n    return obj;\n  }; // Return the results of applying the iteratee to each element.\n\n\n  _.map = _.collect = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n\n    return results;\n  }; // Create a reducing function iterating left or right.\n\n\n  var createReduce = function (dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function (obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n\n      return memo;\n    };\n\n    return function (obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  }; // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n\n\n  _.reduce = _.foldl = _.inject = createReduce(1); // The right-associative version of reduce, also known as `foldr`.\n\n  _.reduceRight = _.foldr = createReduce(-1); // Return the first value which passes a truth test. Aliased as `detect`.\n\n  _.find = _.detect = function (obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  }; // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n\n\n  _.filter = _.select = function (obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n\n    _.each(obj, function (value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n\n    return results;\n  }; // Return all the elements for which a truth test fails.\n\n\n  _.reject = function (obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  }; // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n\n\n  _.every = _.all = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n\n    return true;\n  }; // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n\n\n  _.some = _.any = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n\n    return false;\n  }; // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n\n\n  _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  }; // Invoke a method (with arguments) on every item in a collection.\n\n\n  _.invoke = restArguments(function (obj, path, args) {\n    var contextPath, func;\n\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n\n    return _.map(obj, function (context) {\n      var method = func;\n\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n\n        if (context == null) return void 0;\n        method = context[path];\n      }\n\n      return method == null ? method : method.apply(context, args);\n    });\n  }); // Convenience version of a common use case of `map`: fetching a property.\n\n  _.pluck = function (obj, key) {\n    return _.map(obj, _.property(key));\n  }; // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n\n\n  _.where = function (obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  }; // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n\n\n  _.findWhere = function (obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  }; // Return the maximum element (or element-based computation).\n\n\n  _.max = function (obj, iteratee, context) {\n    var result = -Infinity,\n        lastComputed = -Infinity,\n        value,\n        computed;\n\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n\n      _.each(obj, function (v, index, list) {\n        computed = iteratee(v, index, list);\n\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n\n    return result;\n  }; // Return the minimum element (or element-based computation).\n\n\n  _.min = function (obj, iteratee, context) {\n    var result = Infinity,\n        lastComputed = Infinity,\n        value,\n        computed;\n\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n\n      _.each(obj, function (v, index, list) {\n        computed = iteratee(v, index, list);\n\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n\n    return result;\n  }; // Shuffle a collection.\n\n\n  _.shuffle = function (obj) {\n    return _.sample(obj, Infinity);\n  }; // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n\n\n  _.sample = function (obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n\n    return sample.slice(0, n);\n  }; // Sort the object's values by a criterion produced by an iteratee.\n\n\n  _.sortBy = function (obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function (value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function (left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n\n      return left.index - right.index;\n    }), 'value');\n  }; // An internal function used for aggregate \"group by\" operations.\n\n\n  var group = function (behavior, partition) {\n    return function (obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n\n      _.each(obj, function (value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n\n      return result;\n    };\n  }; // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n\n\n  _.groupBy = group(function (result, value, key) {\n    if (has(result, key)) result[key].push(value);else result[key] = [value];\n  }); // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n\n  _.indexBy = group(function (result, value, key) {\n    result[key] = value;\n  }); // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n\n  _.countBy = group(function (result, value, key) {\n    if (has(result, key)) result[key]++;else result[key] = 1;\n  });\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g; // Safely create a real, live array from anything iterable.\n\n  _.toArray = function (obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  }; // Return the number of elements in an object.\n\n\n  _.size = function (obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  }; // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n\n\n  _.partition = group(function (result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true); // Array Functions\n  // ---------------\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n\n  _.first = _.head = _.take = function (array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  }; // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n\n\n  _.initial = function (array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  }; // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n\n\n  _.last = function (array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  }; // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n\n\n  _.rest = _.tail = _.drop = function (array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  }; // Trim out all falsy values from an array.\n\n\n  _.compact = function (array) {\n    return _.filter(array, Boolean);\n  }; // Internal implementation of a recursive `flatten` function.\n\n\n  var flatten = function (input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0,\n              len = value.length;\n\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n\n    return output;\n  }; // Flatten out an array, either recursively (by default), or just one level.\n\n\n  _.flatten = function (array, shallow) {\n    return flatten(array, shallow, false);\n  }; // Return a version of the array that does not contain the specified value(s).\n\n\n  _.without = restArguments(function (array, otherArrays) {\n    return _.difference(array, otherArrays);\n  }); // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n\n  _.uniq = _.unique = function (array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n\n    return result;\n  }; // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n\n\n  _.union = restArguments(function (arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  }); // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n\n  _.intersection = function (array) {\n    var result = [];\n    var argsLength = arguments.length;\n\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n\n      if (j === argsLength) result.push(item);\n    }\n\n    return result;\n  }; // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n\n\n  _.difference = restArguments(function (array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function (value) {\n      return !_.contains(rest, value);\n    });\n  }); // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n\n  _.unzip = function (array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n\n    return result;\n  }; // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n\n\n  _.zip = restArguments(_.unzip); // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n\n  _.object = function (list, values) {\n    var result = {};\n\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n\n    return result;\n  }; // Generator function to create the findIndex and findLastIndex functions.\n\n\n  var createPredicateIndexFinder = function (dir) {\n    return function (array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n\n      return -1;\n    };\n  }; // Returns the first index on an array-like that passes a predicate test.\n\n\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1); // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n\n  _.sortedIndex = function (array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0,\n        high = getLength(array);\n\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;\n    }\n\n    return low;\n  }; // Generator function to create the indexOf and lastIndexOf functions.\n\n\n  var createIndexFinder = function (dir, predicateFind, sortedIndex) {\n    return function (array, item, idx) {\n      var i = 0,\n          length = getLength(array);\n\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n\n      return -1;\n    };\n  }; // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n\n\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex); // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n\n  _.range = function (start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  }; // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n\n\n  _.chunk = function (array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0,\n        length = array.length;\n\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n\n    return result;\n  }; // Function (ahem) Functions\n  // ------------------\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n\n\n  var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  }; // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n\n\n  _.bind = restArguments(function (func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function (callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  }); // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n\n  _.partial = restArguments(function (func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n\n    var bound = function () {\n      var position = 0,\n          length = boundArgs.length;\n      var args = Array(length);\n\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n\n      while (position < arguments.length) args.push(arguments[position++]);\n\n      return executeBound(func, bound, this, this, args);\n    };\n\n    return bound;\n  });\n  _.partial.placeholder = _; // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n\n  _.bindAll = restArguments(function (obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  }); // Memoize an expensive function by storing its results.\n\n  _.memoize = function (func, hasher) {\n    var memoize = function (key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n\n    memoize.cache = {};\n    return memoize;\n  }; // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n\n\n  _.delay = restArguments(function (func, wait, args) {\n    return setTimeout(function () {\n      return func.apply(null, args);\n    }, wait);\n  }); // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n\n  _.defer = _.partial(_.delay, _, 1); // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n\n  _.throttle = function (func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function () {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function () {\n      var now = _.now();\n\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    };\n\n    throttled.cancel = function () {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }; // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n\n\n  _.debounce = function (func, wait, immediate) {\n    var timeout, result;\n\n    var later = function (context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function (args) {\n      if (timeout) clearTimeout(timeout);\n\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function () {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  }; // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n\n\n  _.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n  }; // Returns a negated version of the passed-in predicate.\n\n\n  _.negate = function (predicate) {\n    return function () {\n      return !predicate.apply(this, arguments);\n    };\n  }; // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n\n\n  _.compose = function () {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n\n      while (i--) result = args[i].call(this, result);\n\n      return result;\n    };\n  }; // Returns a function that will only be executed on and after the Nth call.\n\n\n  _.after = function (times, func) {\n    return function () {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }; // Returns a function that will only be executed up to (but not including) the Nth call.\n\n\n  _.before = function (times, func) {\n    var memo;\n    return function () {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n\n      if (times <= 1) func = null;\n      return memo;\n    };\n  }; // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n\n\n  _.once = _.partial(_.before, 2);\n  _.restArguments = restArguments; // Object Functions\n  // ----------------\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n\n  var hasEnumBug = !{\n    toString: null\n  }.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function (obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.\n\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }; // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n\n\n  _.keys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n\n    for (var key in obj) if (has(obj, key)) keys.push(key); // Ahem, IE < 9.\n\n\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }; // Retrieve all the property names of an object.\n\n\n  _.allKeys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n\n    for (var key in obj) keys.push(key); // Ahem, IE < 9.\n\n\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }; // Retrieve the values of an object's properties.\n\n\n  _.values = function (obj) {\n    var keys = _.keys(obj);\n\n    var length = keys.length;\n    var values = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n\n    return values;\n  }; // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n\n\n  _.mapObject = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n\n    return results;\n  }; // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n\n\n  _.pairs = function (obj) {\n    var keys = _.keys(obj);\n\n    var length = keys.length;\n    var pairs = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n\n    return pairs;\n  }; // Invert the keys and values of an object. The values must be serializable.\n\n\n  _.invert = function (obj) {\n    var result = {};\n\n    var keys = _.keys(obj);\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n\n    return result;\n  }; // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n\n\n  _.functions = _.methods = function (obj) {\n    var names = [];\n\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n\n    return names.sort();\n  }; // An internal function for creating assigner functions.\n\n\n  var createAssigner = function (keysFunc, defaults) {\n    return function (obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n\n      return obj;\n    };\n  }; // Extend a given object with all the properties in passed-in object(s).\n\n\n  _.extend = createAssigner(_.allKeys); // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n  _.extendOwn = _.assign = createAssigner(_.keys); // Returns the first key on an object that passes a predicate test.\n\n  _.findKey = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var keys = _.keys(obj),\n        key;\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  }; // Internal pick helper function to determine if `obj` has key `key`.\n\n\n  var keyInObj = function (value, key, obj) {\n    return key in obj;\n  }; // Return a copy of the object only containing the whitelisted properties.\n\n\n  _.pick = restArguments(function (obj, keys) {\n    var result = {},\n        iteratee = keys[0];\n    if (obj == null) return result;\n\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n\n    return result;\n  }); // Return a copy of the object without the blacklisted properties.\n\n  _.omit = restArguments(function (obj, keys) {\n    var iteratee = keys[0],\n        context;\n\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n\n      iteratee = function (value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n\n    return _.pick(obj, iteratee, context);\n  }); // Fill in a given object with default properties.\n\n  _.defaults = createAssigner(_.allKeys, true); // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n\n  _.create = function (prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  }; // Create a (shallow-cloned) duplicate of an object.\n\n\n  _.clone = function (obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  }; // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n\n\n  _.tap = function (obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  }; // Returns whether an object has a given set of `key:value` pairs.\n\n\n  _.isMatch = function (object, attrs) {\n    var keys = _.keys(attrs),\n        length = keys.length;\n\n    if (object == null) return !length;\n    var obj = Object(object);\n\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n\n    return true;\n  }; // Internal recursive comparison function for `isEqual`.\n\n\n  var eq, deepEq;\n\n  eq = function (a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n    if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n    if (a !== a) return b !== b; // Exhaust primitive checks\n\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  }; // Internal recursive comparison function for `isEqual`.\n\n\n  deepEq = function (a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.\n\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n\n      var aCtor = a.constructor,\n          bCtor = b.constructor;\n\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n        return false;\n      }\n    } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n\n\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    } // Add the first object to the stack of traversed objects.\n\n\n    aStack.push(a);\n    bStack.push(b); // Recursively compare objects and arrays.\n\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a),\n          key;\n\n      length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n      if (_.keys(b).length !== length) return false;\n\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    } // Remove the first object from the stack of traversed objects.\n\n\n    aStack.pop();\n    bStack.pop();\n    return true;\n  }; // Perform a deep comparison to check if two objects are equal.\n\n\n  _.isEqual = function (a, b) {\n    return eq(a, b);\n  }; // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n\n\n  _.isEmpty = function (obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  }; // Is a given value a DOM element?\n\n\n  _.isElement = function (obj) {\n    return !!(obj && obj.nodeType === 1);\n  }; // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n\n\n  _.isArray = nativeIsArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n  }; // Is a given variable an object?\n\n\n  _.isObject = function (obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }; // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n\n\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function (name) {\n    _['is' + name] = function (obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  }); // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n\n\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function (obj) {\n      return has(obj, 'callee');\n    };\n  } // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n\n\n  var nodelist = root.document && root.document.childNodes;\n\n  if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function (obj) {\n      return typeof obj == 'function' || false;\n    };\n  } // Is a given object a finite number?\n\n\n  _.isFinite = function (obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  }; // Is the given value `NaN`?\n\n\n  _.isNaN = function (obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  }; // Is a given value a boolean?\n\n\n  _.isBoolean = function (obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  }; // Is a given value equal to null?\n\n\n  _.isNull = function (obj) {\n    return obj === null;\n  }; // Is a given variable undefined?\n\n\n  _.isUndefined = function (obj) {\n    return obj === void 0;\n  }; // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n\n\n  _.has = function (obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n\n    var length = path.length;\n\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n\n      obj = obj[key];\n    }\n\n    return !!length;\n  }; // Utility Functions\n  // -----------------\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n\n\n  _.noConflict = function () {\n    root._ = previousUnderscore;\n    return this;\n  }; // Keep the identity function around for default iteratees.\n\n\n  _.identity = function (value) {\n    return value;\n  }; // Predicate-generating functions. Often useful outside of Underscore.\n\n\n  _.constant = function (value) {\n    return function () {\n      return value;\n    };\n  };\n\n  _.noop = function () {}; // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n\n\n  _.property = function (path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n\n    return function (obj) {\n      return deepGet(obj, path);\n    };\n  }; // Generates a function for a given object that returns a given property.\n\n\n  _.propertyOf = function (obj) {\n    if (obj == null) {\n      return function () {};\n    }\n\n    return function (path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  }; // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n\n\n  _.matcher = _.matches = function (attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function (obj) {\n      return _.isMatch(obj, attrs);\n    };\n  }; // Run a function **n** times.\n\n\n  _.times = function (n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n\n    return accum;\n  }; // Return a random integer between min and max (inclusive).\n\n\n  _.random = function (min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    return min + Math.floor(Math.random() * (max - min + 1));\n  }; // A (possibly faster) way to get the current timestamp as an integer.\n\n\n  _.now = Date.now || function () {\n    return new Date().getTime();\n  }; // List of HTML entities for escaping.\n\n\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n\n  var unescapeMap = _.invert(escapeMap); // Functions for escaping and unescaping strings to/from HTML interpolation.\n\n\n  var createEscaper = function (map) {\n    var escaper = function (match) {\n      return map[match];\n    }; // Regexes for identifying a key that needs to be escaped.\n\n\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function (string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap); // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n\n  _.result = function (obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n\n    return obj;\n  }; // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n\n\n  var idCounter = 0;\n\n  _.uniqueId = function (prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  }; // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n\n\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  }; // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n\n  var noMatch = /(.)^/; // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function (match) {\n    return '\\\\' + escapes[match];\n  }; // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n\n\n  _.template = function (text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings); // Combine delimiters into one regular expression via alternation.\n\n    var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g'); // Compile the template source, escaping string literals appropriately.\n\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      } // Adobe VMs need the match returned to produce the correct offset.\n\n\n      return match;\n    });\n    source += \"';\\n\"; // If a variable is not specified, place data values in local scope.\n\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n    source = \"var __t,__p='',__j=Array.prototype.join,\" + \"print=function(){__p+=__j.call(arguments,'');};\\n\" + source + 'return __p;\\n';\n    var render;\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function (data) {\n      return render.call(this, data, _);\n    }; // Provide the compiled source as a convenience for precompilation.\n\n\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n    return template;\n  }; // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n\n\n  _.chain = function (obj) {\n    var instance = _(obj);\n\n    instance._chain = true;\n    return instance;\n  }; // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  // Helper function to continue chaining intermediate results.\n\n\n  var chainResult = function (instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  }; // Add your own custom functions to the Underscore object.\n\n\n  _.mixin = function (obj) {\n    _.each(_.functions(obj), function (name) {\n      var func = _[name] = obj[name];\n\n      _.prototype[name] = function () {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n\n    return _;\n  }; // Add all of the Underscore functions to the wrapper object.\n\n\n  _.mixin(_); // Add all mutator Array functions to the wrapper.\n\n\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n    var method = ArrayProto[name];\n\n    _.prototype[name] = function () {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  }); // Add all accessor Array functions to the wrapper.\n\n\n  _.each(['concat', 'join', 'slice'], function (name) {\n    var method = ArrayProto[name];\n\n    _.prototype[name] = function () {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  }); // Extracts the result from a wrapped and chained object.\n\n\n  _.prototype.value = function () {\n    return this._wrapped;\n  }; // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n\n\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function () {\n    return String(this._wrapped);\n  }; // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return _;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(44), __webpack_require__(45)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzPzE3ZmIiXSwibmFtZXMiOlsicm9vdCIsInNlbGYiLCJnbG9iYWwiLCJwcmV2aW91c1VuZGVyc2NvcmUiLCJfIiwiQXJyYXlQcm90byIsIkFycmF5IiwicHJvdG90eXBlIiwiT2JqUHJvdG8iLCJPYmplY3QiLCJTeW1ib2xQcm90byIsIlN5bWJvbCIsInB1c2giLCJzbGljZSIsInRvU3RyaW5nIiwiaGFzT3duUHJvcGVydHkiLCJuYXRpdmVJc0FycmF5IiwiaXNBcnJheSIsIm5hdGl2ZUtleXMiLCJrZXlzIiwibmF0aXZlQ3JlYXRlIiwiY3JlYXRlIiwiQ3RvciIsIm9iaiIsIl93cmFwcGVkIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwibW9kdWxlIiwiVkVSU0lPTiIsIm9wdGltaXplQ2IiLCJmdW5jIiwiY29udGV4dCIsImFyZ0NvdW50IiwidmFsdWUiLCJjYWxsIiwiaW5kZXgiLCJjb2xsZWN0aW9uIiwiYWNjdW11bGF0b3IiLCJhcHBseSIsImFyZ3VtZW50cyIsImJ1aWx0aW5JdGVyYXRlZSIsImNiIiwiaXRlcmF0ZWUiLCJpZGVudGl0eSIsImlzRnVuY3Rpb24iLCJpc09iamVjdCIsIm1hdGNoZXIiLCJwcm9wZXJ0eSIsIkluZmluaXR5IiwicmVzdEFyZ3VtZW50cyIsInN0YXJ0SW5kZXgiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwicmVzdCIsImFyZ3MiLCJiYXNlQ3JlYXRlIiwicmVzdWx0Iiwic2hhbGxvd1Byb3BlcnR5Iiwia2V5IiwiaGFzIiwicGF0aCIsImRlZXBHZXQiLCJpIiwiTUFYX0FSUkFZX0lOREVYIiwicG93IiwiZ2V0TGVuZ3RoIiwiaXNBcnJheUxpa2UiLCJlYWNoIiwiZm9yRWFjaCIsIm1hcCIsImNvbGxlY3QiLCJyZXN1bHRzIiwiY3VycmVudEtleSIsImNyZWF0ZVJlZHVjZSIsImRpciIsInJlZHVjZXIiLCJtZW1vIiwiaW5pdGlhbCIsInJlZHVjZSIsImZvbGRsIiwiaW5qZWN0IiwicmVkdWNlUmlnaHQiLCJmb2xkciIsImZpbmQiLCJkZXRlY3QiLCJwcmVkaWNhdGUiLCJrZXlGaW5kZXIiLCJmaW5kSW5kZXgiLCJmaW5kS2V5IiwiZmlsdGVyIiwic2VsZWN0IiwibGlzdCIsInJlamVjdCIsIm5lZ2F0ZSIsImV2ZXJ5IiwiYWxsIiwic29tZSIsImFueSIsImNvbnRhaW5zIiwiaW5jbHVkZXMiLCJpbmNsdWRlIiwiaXRlbSIsImZyb21JbmRleCIsImd1YXJkIiwidmFsdWVzIiwiaW5kZXhPZiIsImludm9rZSIsImNvbnRleHRQYXRoIiwibWV0aG9kIiwicGx1Y2siLCJ3aGVyZSIsImF0dHJzIiwiZmluZFdoZXJlIiwibGFzdENvbXB1dGVkIiwiY29tcHV0ZWQiLCJ2IiwibWluIiwic2h1ZmZsZSIsInNhbXBsZSIsIm4iLCJyYW5kb20iLCJjbG9uZSIsImxhc3QiLCJyYW5kIiwidGVtcCIsInNvcnRCeSIsImNyaXRlcmlhIiwic29ydCIsImxlZnQiLCJyaWdodCIsImEiLCJiIiwiZ3JvdXAiLCJiZWhhdmlvciIsInBhcnRpdGlvbiIsImdyb3VwQnkiLCJpbmRleEJ5IiwiY291bnRCeSIsInJlU3RyU3ltYm9sIiwidG9BcnJheSIsImlzU3RyaW5nIiwibWF0Y2giLCJzaXplIiwicGFzcyIsImZpcnN0IiwiaGVhZCIsInRha2UiLCJhcnJheSIsInRhaWwiLCJkcm9wIiwiY29tcGFjdCIsIkJvb2xlYW4iLCJmbGF0dGVuIiwiaW5wdXQiLCJzaGFsbG93Iiwic3RyaWN0Iiwib3V0cHV0IiwiaWR4IiwiaXNBcmd1bWVudHMiLCJqIiwibGVuIiwid2l0aG91dCIsIm90aGVyQXJyYXlzIiwiZGlmZmVyZW5jZSIsInVuaXEiLCJ1bmlxdWUiLCJpc1NvcnRlZCIsImlzQm9vbGVhbiIsInNlZW4iLCJ1bmlvbiIsImFycmF5cyIsImludGVyc2VjdGlvbiIsImFyZ3NMZW5ndGgiLCJ1bnppcCIsInppcCIsIm9iamVjdCIsImNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyIiwiZmluZExhc3RJbmRleCIsInNvcnRlZEluZGV4IiwibG93IiwiaGlnaCIsIm1pZCIsImZsb29yIiwiY3JlYXRlSW5kZXhGaW5kZXIiLCJwcmVkaWNhdGVGaW5kIiwiaXNOYU4iLCJsYXN0SW5kZXhPZiIsInJhbmdlIiwic3RhcnQiLCJzdG9wIiwic3RlcCIsImNlaWwiLCJjaHVuayIsImNvdW50IiwiZXhlY3V0ZUJvdW5kIiwic291cmNlRnVuYyIsImJvdW5kRnVuYyIsImNhbGxpbmdDb250ZXh0IiwiYmluZCIsIlR5cGVFcnJvciIsImJvdW5kIiwiY2FsbEFyZ3MiLCJjb25jYXQiLCJwYXJ0aWFsIiwiYm91bmRBcmdzIiwicGxhY2Vob2xkZXIiLCJwb3NpdGlvbiIsImJpbmRBbGwiLCJFcnJvciIsIm1lbW9pemUiLCJoYXNoZXIiLCJjYWNoZSIsImFkZHJlc3MiLCJkZWxheSIsIndhaXQiLCJzZXRUaW1lb3V0IiwiZGVmZXIiLCJ0aHJvdHRsZSIsIm9wdGlvbnMiLCJ0aW1lb3V0IiwicHJldmlvdXMiLCJsYXRlciIsImxlYWRpbmciLCJub3ciLCJ0aHJvdHRsZWQiLCJyZW1haW5pbmciLCJjbGVhclRpbWVvdXQiLCJ0cmFpbGluZyIsImNhbmNlbCIsImRlYm91bmNlIiwiaW1tZWRpYXRlIiwiZGVib3VuY2VkIiwiY2FsbE5vdyIsIndyYXAiLCJ3cmFwcGVyIiwiY29tcG9zZSIsImFmdGVyIiwidGltZXMiLCJiZWZvcmUiLCJvbmNlIiwiaGFzRW51bUJ1ZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibm9uRW51bWVyYWJsZVByb3BzIiwiY29sbGVjdE5vbkVudW1Qcm9wcyIsIm5vbkVudW1JZHgiLCJjb25zdHJ1Y3RvciIsInByb3RvIiwicHJvcCIsImFsbEtleXMiLCJtYXBPYmplY3QiLCJwYWlycyIsImludmVydCIsImZ1bmN0aW9ucyIsIm1ldGhvZHMiLCJuYW1lcyIsImNyZWF0ZUFzc2lnbmVyIiwia2V5c0Z1bmMiLCJkZWZhdWx0cyIsInNvdXJjZSIsImwiLCJleHRlbmQiLCJleHRlbmRPd24iLCJhc3NpZ24iLCJrZXlJbk9iaiIsInBpY2siLCJvbWl0IiwiU3RyaW5nIiwicHJvcHMiLCJ0YXAiLCJpbnRlcmNlcHRvciIsImlzTWF0Y2giLCJlcSIsImRlZXBFcSIsImFTdGFjayIsImJTdGFjayIsInR5cGUiLCJjbGFzc05hbWUiLCJ2YWx1ZU9mIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsInBvcCIsImlzRXF1YWwiLCJpc0VtcHR5IiwiaXNFbGVtZW50IiwibmFtZSIsIm5vZGVsaXN0IiwiZG9jdW1lbnQiLCJjaGlsZE5vZGVzIiwiSW50OEFycmF5IiwiaXNGaW5pdGUiLCJpc1N5bWJvbCIsInBhcnNlRmxvYXQiLCJpc051bWJlciIsImlzTnVsbCIsImlzVW5kZWZpbmVkIiwibm9Db25mbGljdCIsImNvbnN0YW50Iiwibm9vcCIsInByb3BlcnR5T2YiLCJtYXRjaGVzIiwiYWNjdW0iLCJEYXRlIiwiZ2V0VGltZSIsImVzY2FwZU1hcCIsInVuZXNjYXBlTWFwIiwiY3JlYXRlRXNjYXBlciIsImVzY2FwZXIiLCJqb2luIiwidGVzdFJlZ2V4cCIsIlJlZ0V4cCIsInJlcGxhY2VSZWdleHAiLCJzdHJpbmciLCJ0ZXN0IiwicmVwbGFjZSIsImVzY2FwZSIsInVuZXNjYXBlIiwiZmFsbGJhY2siLCJpZENvdW50ZXIiLCJ1bmlxdWVJZCIsInByZWZpeCIsImlkIiwidGVtcGxhdGVTZXR0aW5ncyIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJub01hdGNoIiwiZXNjYXBlcyIsImVzY2FwZVJlZ0V4cCIsImVzY2FwZUNoYXIiLCJ0ZW1wbGF0ZSIsInRleHQiLCJzZXR0aW5ncyIsIm9sZFNldHRpbmdzIiwib2Zmc2V0IiwidmFyaWFibGUiLCJyZW5kZXIiLCJGdW5jdGlvbiIsImUiLCJkYXRhIiwiYXJndW1lbnQiLCJjaGFpbiIsImluc3RhbmNlIiwiX2NoYWluIiwiY2hhaW5SZXN1bHQiLCJtaXhpbiIsInRvSlNPTiIsImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtB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S2QsUUFBbEIsRUFBNEJlLFNBQTVCLENBQVAsQ0FBbEI7QUFDRCxLQUZEO0FBR0QsR0FMRCxFQXRuRFUsQ0E2bkRWOzs7QUFDQW5DLEdBQUMsQ0FBQ0csU0FBRixDQUFZMEIsS0FBWixHQUFvQixZQUFXO0FBQzdCLFdBQU8sS0FBS1QsUUFBWjtBQUNELEdBRkQsQ0E5bkRVLENBa29EVjtBQUNBOzs7QUFDQXBCLEdBQUMsQ0FBQ0csU0FBRixDQUFZK1EsT0FBWixHQUFzQmxSLENBQUMsQ0FBQ0csU0FBRixDQUFZbVYsTUFBWixHQUFxQnRWLENBQUMsQ0FBQ0csU0FBRixDQUFZMEIsS0FBdkQ7O0FBRUE3QixHQUFDLENBQUNHLFNBQUYsQ0FBWU8sUUFBWixHQUF1QixZQUFXO0FBQ2hDLFdBQU82UCxNQUFNLENBQUMsS0FBS25QLFFBQU4sQ0FBYjtBQUNELEdBRkQsQ0F0b0RVLENBMG9EVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBSSxJQUFKLEVBQStDO0FBQzdDbVUscUNBQXFCLEVBQWYsbUNBQW1CLFlBQVc7QUFDbEMsYUFBT3ZWLENBQVA7QUFDRCxLQUZLO0FBQUEsb0dBQU47QUFHRDtBQUNGLENBdHBEQSxHQUFELEMiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjkuMVxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxOCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIChgc2VsZmApIGluIHRoZSBicm93c2VyLCBgZ2xvYmFsYFxuICAvLyBvbiB0aGUgc2VydmVyLCBvciBgdGhpc2AgaW4gc29tZSB2aXJ0dWFsIG1hY2hpbmVzLiBXZSB1c2UgYHNlbGZgXG4gIC8vIGluc3RlYWQgb2YgYHdpbmRvd2AgZm9yIGBXZWJXb3JrZXJgIHN1cHBvcnQuXG4gIHZhciByb290ID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmICYmIHNlbGYgfHxcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsLmdsb2JhbCA9PT0gZ2xvYmFsICYmIGdsb2JhbCB8fFxuICAgICAgICAgICAgdGhpcyB8fFxuICAgICAgICAgICAge307XG5cbiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS5cbiAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXztcblxuICAvLyBTYXZlIGJ5dGVzIGluIHRoZSBtaW5pZmllZCAoYnV0IG5vdCBnemlwcGVkKSB2ZXJzaW9uOlxuICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgU3ltYm9sUHJvdG8gPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5wcm90b3R5cGUgOiBudWxsO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXIgcHVzaCA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICAgIHNsaWNlID0gQXJyYXlQcm90by5zbGljZSxcbiAgICAgIHRvU3RyaW5nID0gT2JqUHJvdG8udG9TdHJpbmcsXG4gICAgICBoYXNPd25Qcm9wZXJ0eSA9IE9ialByb3RvLmhhc093blByb3BlcnR5O1xuXG4gIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxuICAvLyBhcmUgZGVjbGFyZWQgaGVyZS5cbiAgdmFyIG5hdGl2ZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgICAgbmF0aXZlS2V5cyA9IE9iamVjdC5rZXlzLFxuICAgICAgbmF0aXZlQ3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuICAvLyBOYWtlZCBmdW5jdGlvbiByZWZlcmVuY2UgZm9yIHN1cnJvZ2F0ZS1wcm90b3R5cGUtc3dhcHBpbmcuXG4gIHZhciBDdG9yID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LlxuICB2YXIgXyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqO1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBfKSkgcmV0dXJuIG5ldyBfKG9iaik7XG4gICAgdGhpcy5fd3JhcHBlZCA9IG9iajtcbiAgfTtcblxuICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKk5vZGUuanMqKiwgd2l0aFxuICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlaXIgb2xkIG1vZHVsZSBBUEkuIElmIHdlJ3JlIGluXG4gIC8vIHRoZSBicm93c2VyLCBhZGQgYF9gIGFzIGEgZ2xvYmFsIG9iamVjdC5cbiAgLy8gKGBub2RlVHlwZWAgaXMgY2hlY2tlZCB0byBlbnN1cmUgdGhhdCBgbW9kdWxlYFxuICAvLyBhbmQgYGV4cG9ydHNgIGFyZSBub3QgSFRNTCBlbGVtZW50cy4pXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiAhZXhwb3J0cy5ub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOS4xJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgLy8gVGhlIDItYXJndW1lbnQgY2FzZSBpcyBvbWl0dGVkIGJlY2F1c2Ugd2XigJlyZSBub3QgdXNpbmcgaXQuXG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgYnVpbHRpbkl0ZXJhdGVlO1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIGVhY2hcbiAgLy8gZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24sIHJldHVybmluZyB0aGUgZGVzaXJlZCByZXN1bHQg4oCUIGVpdGhlciBgaWRlbnRpdHlgLFxuICAvLyBhbiBhcmJpdHJhcnkgY2FsbGJhY2ssIGEgcHJvcGVydHkgbWF0Y2hlciwgb3IgYSBwcm9wZXJ0eSBhY2Nlc3Nvci5cbiAgdmFyIGNiID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKF8uaXRlcmF0ZWUgIT09IGJ1aWx0aW5JdGVyYXRlZSkgcmV0dXJuIF8uaXRlcmF0ZWUodmFsdWUsIGNvbnRleHQpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gXy5pZGVudGl0eTtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuIG9wdGltaXplQ2IodmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KTtcbiAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkgJiYgIV8uaXNBcnJheSh2YWx1ZSkpIHJldHVybiBfLm1hdGNoZXIodmFsdWUpO1xuICAgIHJldHVybiBfLnByb3BlcnR5KHZhbHVlKTtcbiAgfTtcblxuICAvLyBFeHRlcm5hbCB3cmFwcGVyIGZvciBvdXIgY2FsbGJhY2sgZ2VuZXJhdG9yLiBVc2VycyBtYXkgY3VzdG9taXplXG4gIC8vIGBfLml0ZXJhdGVlYCBpZiB0aGV5IHdhbnQgYWRkaXRpb25hbCBwcmVkaWNhdGUvaXRlcmF0ZWUgc2hvcnRoYW5kIHN0eWxlcy5cbiAgLy8gVGhpcyBhYnN0cmFjdGlvbiBoaWRlcyB0aGUgaW50ZXJuYWwtb25seSBhcmdDb3VudCBhcmd1bWVudC5cbiAgXy5pdGVyYXRlZSA9IGJ1aWx0aW5JdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNiKHZhbHVlLCBjb250ZXh0LCBJbmZpbml0eSk7XG4gIH07XG5cbiAgLy8gU29tZSBmdW5jdGlvbnMgdGFrZSBhIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIG9yIGEgZmV3IGV4cGVjdGVkXG4gIC8vIGFyZ3VtZW50cyBhdCB0aGUgYmVnaW5uaW5nIGFuZCB0aGVuIGEgdmFyaWFibGUgbnVtYmVyIG9mIHZhbHVlcyB0byBvcGVyYXRlXG4gIC8vIG9uLiBUaGlzIGhlbHBlciBhY2N1bXVsYXRlcyBhbGwgcmVtYWluaW5nIGFyZ3VtZW50cyBwYXN0IHRoZSBmdW5jdGlvbuKAmXNcbiAgLy8gYXJndW1lbnQgbGVuZ3RoIChvciBhbiBleHBsaWNpdCBgc3RhcnRJbmRleGApLCBpbnRvIGFuIGFycmF5IHRoYXQgYmVjb21lc1xuICAvLyB0aGUgbGFzdCBhcmd1bWVudC4gU2ltaWxhciB0byBFUzbigJlzIFwicmVzdCBwYXJhbWV0ZXJcIi5cbiAgdmFyIHJlc3RBcmd1bWVudHMgPSBmdW5jdGlvbihmdW5jLCBzdGFydEluZGV4KSB7XG4gICAgc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXggPT0gbnVsbCA/IGZ1bmMubGVuZ3RoIC0gMSA6ICtzdGFydEluZGV4O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChhcmd1bWVudHMubGVuZ3RoIC0gc3RhcnRJbmRleCwgMCksXG4gICAgICAgICAgcmVzdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3RbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4ICsgc3RhcnRJbmRleF07XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIHJlc3QpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCByZXN0KTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCByZXN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkoc3RhcnRJbmRleCArIDEpO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgc3RhcnRJbmRleDsgaW5kZXgrKykge1xuICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICBhcmdzW3N0YXJ0SW5kZXhdID0gcmVzdDtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gYW5vdGhlci5cbiAgdmFyIGJhc2VDcmVhdGUgPSBmdW5jdGlvbihwcm90b3R5cGUpIHtcbiAgICBpZiAoIV8uaXNPYmplY3QocHJvdG90eXBlKSkgcmV0dXJuIHt9O1xuICAgIGlmIChuYXRpdmVDcmVhdGUpIHJldHVybiBuYXRpdmVDcmVhdGUocHJvdG90eXBlKTtcbiAgICBDdG9yLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEN0b3I7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBudWxsO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIHNoYWxsb3dQcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhcyA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcGF0aCk7XG4gIH1cblxuICB2YXIgZGVlcEdldCA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgICBvYmogPSBvYmpbcGF0aFtpXV07XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGggPyBvYmogOiB2b2lkIDA7XG4gIH07XG5cbiAgLy8gSGVscGVyIGZvciBjb2xsZWN0aW9uIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBjb2xsZWN0aW9uXG4gIC8vIHNob3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBhcnJheSBvciBhcyBhbiBvYmplY3QuXG4gIC8vIFJlbGF0ZWQ6IGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvbGVuZ3RoXG4gIC8vIEF2b2lkcyBhIHZlcnkgbmFzdHkgaU9TIDggSklUIGJ1ZyBvbiBBUk0tNjQuICMyMDk0XG4gIHZhciBNQVhfQVJSQVlfSU5ERVggPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuICB2YXIgZ2V0TGVuZ3RoID0gc2hhbGxvd1Byb3BlcnR5KCdsZW5ndGgnKTtcbiAgdmFyIGlzQXJyYXlMaWtlID0gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoY29sbGVjdGlvbik7XG4gICAgcmV0dXJuIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgbGVuZ3RoID49IDAgJiYgbGVuZ3RoIDw9IE1BWF9BUlJBWV9JTkRFWDtcbiAgfTtcblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsXG4gIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXG4gIF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBpLCBsZW5ndGg7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtrZXlzW2ldXSwga2V5c1tpXSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgcmVkdWNpbmcgZnVuY3Rpb24gaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG4gIHZhciBjcmVhdGVSZWR1Y2UgPSBmdW5jdGlvbihkaXIpIHtcbiAgICAvLyBXcmFwIGNvZGUgdGhhdCByZWFzc2lnbnMgYXJndW1lbnQgdmFyaWFibGVzIGluIGEgc2VwYXJhdGUgZnVuY3Rpb24gdGhhblxuICAgIC8vIHRoZSBvbmUgdGhhdCBhY2Nlc3NlcyBgYXJndW1lbnRzLmxlbmd0aGAgdG8gYXZvaWQgYSBwZXJmIGhpdC4gKCMxOTkxKVxuICAgIHZhciByZWR1Y2VyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgaW5pdGlhbCkge1xuICAgICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4XTtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuICAgICAgfVxuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMztcbiAgICAgIHJldHVybiByZWR1Y2VyKG9iaiwgb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCksIG1lbW8sIGluaXRpYWwpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBrZXlGaW5kZXIgPSBpc0FycmF5TGlrZShvYmopID8gXy5maW5kSW5kZXggOiBfLmZpbmRLZXk7XG4gICAgdmFyIGtleSA9IGtleUZpbmRlcihvYmosIHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIGl0ZW0gKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IGd1YXJkKSBmcm9tSW5kZXggPSAwO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIHBhdGgsIGFyZ3MpIHtcbiAgICB2YXIgY29udGV4dFBhdGgsIGZ1bmM7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihwYXRoKSkge1xuICAgICAgZnVuYyA9IHBhdGg7XG4gICAgfSBlbHNlIGlmIChfLmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XG4gICAgICBwYXRoID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICB2YXIgbWV0aG9kID0gZnVuYztcbiAgICAgIGlmICghbWV0aG9kKSB7XG4gICAgICAgIGlmIChjb250ZXh0UGF0aCAmJiBjb250ZXh0UGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICBjb250ZXh0ID0gZGVlcEdldChjb250ZXh0LCBjb250ZXh0UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgbWV0aG9kID0gY29udGV4dFtwYXRoXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXRob2QgPT0gbnVsbCA/IG1ldGhvZCA6IG1ldGhvZC5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCB0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odiwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdjtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgfHwgdHlwZW9mIGl0ZXJhdGVlID09ICdudW1iZXInICYmIHR5cGVvZiBvYmpbMF0gIT0gJ29iamVjdCcgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgPCByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHYsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodiwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IEluZmluaXR5ICYmIHJlc3VsdCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBTaHVmZmxlIGEgY29sbGVjdGlvbi5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uc2FtcGxlKG9iaiwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbiAgLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlcuKAk1lhdGVzX3NodWZmbGUpLlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07XG4gICAgfVxuICAgIHZhciBzYW1wbGUgPSBpc0FycmF5TGlrZShvYmopID8gXy5jbG9uZShvYmopIDogXy52YWx1ZXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKHNhbXBsZSk7XG4gICAgbiA9IE1hdGgubWF4KE1hdGgubWluKG4sIGxlbmd0aCksIDApO1xuICAgIHZhciBsYXN0ID0gbGVuZ3RoIC0gMTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbjsgaW5kZXgrKykge1xuICAgICAgdmFyIHJhbmQgPSBfLnJhbmRvbShpbmRleCwgbGFzdCk7XG4gICAgICB2YXIgdGVtcCA9IHNhbXBsZVtpbmRleF07XG4gICAgICBzYW1wbGVbaW5kZXhdID0gc2FtcGxlW3JhbmRdO1xuICAgICAgc2FtcGxlW3JhbmRdID0gdGVtcDtcbiAgICB9XG4gICAgcmV0dXJuIHNhbXBsZS5zbGljZSgwLCBuKTtcbiAgfTtcblxuICAvLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0ZWUuXG4gIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGluZGV4OiBpbmRleCsrLFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGtleSwgbGlzdClcbiAgICAgIH07XG4gICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICAgIH0pLCAndmFsdWUnKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG4gIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yLCBwYXJ0aXRpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHBhcnRpdGlvbiA/IFtbXSwgW11dIDoge307XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgICBiZWhhdmlvcihyZXN1bHQsIHZhbHVlLCBrZXkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24uIFBhc3MgZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZVxuICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbiAgXy5ncm91cEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0rKzsgZWxzZSByZXN1bHRba2V5XSA9IDE7XG4gIH0pO1xuXG4gIHZhciByZVN0clN5bWJvbCA9IC9bXlxcdWQ4MDAtXFx1ZGZmZl18W1xcdWQ4MDAtXFx1ZGJmZl1bXFx1ZGMwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkZmZmXS9nO1xuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAoXy5pc1N0cmluZyhvYmopKSB7XG4gICAgICAvLyBLZWVwIHN1cnJvZ2F0ZSBwYWlyIGNoYXJhY3RlcnMgdG9nZXRoZXJcbiAgICAgIHJldHVybiBvYmoubWF0Y2gocmVTdHJTeW1ib2wpO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIF8udmFsdWVzKG9iaik7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LlxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwO1xuICAgIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBTcGxpdCBhIGNvbGxlY3Rpb24gaW50byB0d28gYXJyYXlzOiBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIHNhdGlzZnkgdGhlIGdpdmVuXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgXy5wYXJ0aXRpb24gPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBwYXNzKSB7XG4gICAgcmVzdWx0W3Bhc3MgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gIH0sIHRydWUpO1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gbiA9PSBudWxsID8gdm9pZCAwIDogW107XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5WzBdO1xuICAgIHJldHVybiBfLmluaXRpYWwoYXJyYXksIGFycmF5Lmxlbmd0aCAtIG4pO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpblxuICAvLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLlxuICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gKG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKSkpO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS5cbiAgXy5sYXN0ID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoIDwgMSkgcmV0dXJuIG4gPT0gbnVsbCA/IHZvaWQgMCA6IFtdO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gXy5yZXN0KGFycmF5LCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSBuKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgQm9vbGVhbik7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCkge1xuICAgIG91dHB1dCA9IG91dHB1dCB8fCBbXTtcbiAgICB2YXIgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGlucHV0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiYgKF8uaXNBcnJheSh2YWx1ZSkgfHwgXy5pc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIC8vIEZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0LlxuICAgICAgICBpZiAoc2hhbGxvdykge1xuICAgICAgICAgIHZhciBqID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChqIDwgbGVuKSBvdXRwdXRbaWR4KytdID0gdmFsdWVbaisrXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCk7XG4gICAgICAgICAgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghc3RyaWN0KSB7XG4gICAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuXG4gIF8uZmxhdHRlbiA9IGZ1bmN0aW9uKGFycmF5LCBzaGFsbG93KSB7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIGZhbHNlKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbiAgXy53aXRob3V0ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheSwgb3RoZXJBcnJheXMpIHtcbiAgICByZXR1cm4gXy5kaWZmZXJlbmNlKGFycmF5LCBvdGhlckFycmF5cyk7XG4gIH0pO1xuXG4gIC8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5XG4gIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS5cbiAgLy8gVGhlIGZhc3RlciBhbGdvcml0aG0gd2lsbCBub3Qgd29yayB3aXRoIGFuIGl0ZXJhdGVlIGlmIHRoZSBpdGVyYXRlZVxuICAvLyBpcyBub3QgYSBvbmUtdG8tb25lIGZ1bmN0aW9uLCBzbyBwcm92aWRpbmcgYW4gaXRlcmF0ZWUgd2lsbCBkaXNhYmxlXG4gIC8vIHRoZSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoIV8uaXNCb29sZWFuKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdGVlO1xuICAgICAgaXRlcmF0ZWUgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpdGVyYXRlZSAhPSBudWxsKSBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHNlZW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpXSxcbiAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUsIGksIGFycmF5KSA6IHZhbHVlO1xuICAgICAgaWYgKGlzU29ydGVkICYmICFpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIWkgfHwgc2VlbiAhPT0gY29tcHV0ZWQpIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoc2VlbiwgY29tcHV0ZWQpKSB7XG4gICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIV8uY29udGFpbnMocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgcmV0dXJuIF8udW5pcShmbGF0dGVuKGFycmF5cywgdHJ1ZSwgdHJ1ZSkpO1xuICB9KTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgZXZlcnkgaXRlbSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlXG4gIC8vIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gYXJyYXlbaV07XG4gICAgICBpZiAoXy5jb250YWlucyhyZXN1bHQsIGl0ZW0pKSBjb250aW51ZTtcbiAgICAgIHZhciBqO1xuICAgICAgZm9yIChqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5LCByZXN0KSB7XG4gICAgcmVzdCA9IGZsYXR0ZW4ocmVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICByZXR1cm4gIV8uY29udGFpbnMocmVzdCwgdmFsdWUpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBDb21wbGVtZW50IG9mIF8uemlwLiBVbnppcCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyBhbmQgZ3JvdXBzXG4gIC8vIGVhY2ggYXJyYXkncyBlbGVtZW50cyBvbiBzaGFyZWQgaW5kaWNlcy5cbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCBnZXRMZW5ndGgpLmxlbmd0aCB8fCAwO1xuICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IHJlc3RBcmd1bWVudHMoXy51bnppcCk7XG5cbiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYFxuICAvLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2ZcbiAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLiBQYXNzaW5nIGJ5IHBhaXJzIGlzIHRoZSByZXZlcnNlIG9mIF8ucGFpcnMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgobGlzdCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpbmRJbmRleCBhbmQgZmluZExhc3RJbmRleCBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciA9IGZ1bmN0aW9uKGRpcikge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICB2YXIgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBpbmRleCBvbiBhbiBhcnJheS1saWtlIHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3QuXG4gIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4gIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKC0xKTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBpbmRleE9mIGFuZCBsYXN0SW5kZXhPZiBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVJbmRleEZpbmRlciA9IGZ1bmN0aW9uKGRpciwgcHJlZGljYXRlRmluZCwgc29ydGVkSW5kZXgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlkeCkge1xuICAgICAgdmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICAgICAgaWYgKHR5cGVvZiBpZHggPT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGRpciA+IDApIHtcbiAgICAgICAgICBpID0gaWR4ID49IDAgPyBpZHggOiBNYXRoLm1heChpZHggKyBsZW5ndGgsIGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc29ydGVkSW5kZXggJiYgaWR4ICYmIGxlbmd0aCkge1xuICAgICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpZHhdID09PSBpdGVtID8gaWR4IDogLTE7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgICBpZHggPSBwcmVkaWNhdGVGaW5kKHNsaWNlLmNhbGwoYXJyYXksIGksIGxlbmd0aCksIF8uaXNOYU4pO1xuICAgICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgICB9XG4gICAgICBmb3IgKGlkeCA9IGRpciA+IDAgPyBpIDogbGVuZ3RoIC0gMTsgaWR4ID49IDAgJiYgaWR4IDwgbGVuZ3RoOyBpZHggKz0gZGlyKSB7XG4gICAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhbiBpdGVtIGluIGFuIGFycmF5LFxuICAvLyBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gY3JlYXRlSW5kZXhGaW5kZXIoMSwgXy5maW5kSW5kZXgsIF8uc29ydGVkSW5kZXgpO1xuICBfLmxhc3RJbmRleE9mID0gY3JlYXRlSW5kZXhGaW5kZXIoLTEsIF8uZmluZExhc3RJbmRleCk7XG5cbiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoc3RvcCA9PSBudWxsKSB7XG4gICAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgaWYgKCFzdGVwKSB7XG4gICAgICBzdGVwID0gc3RvcCA8IHN0YXJ0ID8gLTEgOiAxO1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlW2lkeF0gPSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gQ2h1bmsgYSBzaW5nbGUgYXJyYXkgaW50byBtdWx0aXBsZSBhcnJheXMsIGVhY2ggY29udGFpbmluZyBgY291bnRgIG9yIGZld2VyXG4gIC8vIGl0ZW1zLlxuICBfLmNodW5rID0gZnVuY3Rpb24oYXJyYXksIGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwgfHwgY291bnQgPCAxKSByZXR1cm4gW107XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaChzbGljZS5jYWxsKGFycmF5LCBpLCBpICs9IGNvdW50KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZXhlY3V0ZSBhIGZ1bmN0aW9uIGFzIGEgY29uc3RydWN0b3JcbiAgLy8gb3IgYSBub3JtYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICB2YXIgZXhlY3V0ZUJvdW5kID0gZnVuY3Rpb24oc291cmNlRnVuYywgYm91bmRGdW5jLCBjb250ZXh0LCBjYWxsaW5nQ29udGV4dCwgYXJncykge1xuICAgIGlmICghKGNhbGxpbmdDb250ZXh0IGluc3RhbmNlb2YgYm91bmRGdW5jKSkgcmV0dXJuIHNvdXJjZUZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgdmFyIHNlbGYgPSBiYXNlQ3JlYXRlKHNvdXJjZUZ1bmMucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gc291cmNlRnVuYy5hcHBseShzZWxmLCBhcmdzKTtcbiAgICBpZiAoXy5pc09iamVjdChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLFxuICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmXG4gIC8vIGF2YWlsYWJsZS5cbiAgXy5iaW5kID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICAgIHZhciBib3VuZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oY2FsbEFyZ3MpIHtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIGNvbnRleHQsIHRoaXMsIGFyZ3MuY29uY2F0KGNhbGxBcmdzKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9KTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBfIGFjdHNcbiAgLy8gYXMgYSBwbGFjZWhvbGRlciBieSBkZWZhdWx0LCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlXG4gIC8vIHByZS1maWxsZWQuIFNldCBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCBmb3IgYSBjdXN0b20gcGxhY2Vob2xkZXIgYXJndW1lbnQuXG4gIF8ucGFydGlhbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgYm91bmRBcmdzKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0gXy5wYXJ0aWFsLnBsYWNlaG9sZGVyO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gYm91bmRBcmdzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpXSA9IGJvdW5kQXJnc1tpXSA9PT0gcGxhY2Vob2xkZXIgPyBhcmd1bWVudHNbcG9zaXRpb24rK10gOiBib3VuZEFyZ3NbaV07XG4gICAgICB9XG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBhcmd1bWVudHMubGVuZ3RoKSBhcmdzLnB1c2goYXJndW1lbnRzW3Bvc2l0aW9uKytdKTtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIHRoaXMsIHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9KTtcblxuICBfLnBhcnRpYWwucGxhY2Vob2xkZXIgPSBfO1xuXG4gIC8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuICAvLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3NcbiAgLy8gZGVmaW5lZCBvbiBhbiBvYmplY3QgYmVsb25nIHRvIGl0LlxuICBfLmJpbmRBbGwgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgdmFyIGluZGV4ID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGluZGV4IDwgMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIG9ialtrZXldID0gXy5iaW5kKG9ialtrZXldLCBvYmopO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgICB2YXIgYWRkcmVzcyA9ICcnICsgKGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5KTtcbiAgICAgIGlmICghaGFzKGNhY2hlLCBhZGRyZXNzKSkgY2FjaGVbYWRkcmVzc10gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XG4gICAgfTtcbiAgICBtZW1vaXplLmNhY2hlID0ge307XG4gICAgcmV0dXJuIG1lbW9pemU7XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIHdhaXQpO1xuICB9KTtcblxuICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXNcbiAgLy8gY2xlYXJlZC5cbiAgXy5kZWZlciA9IF8ucGFydGlhbChfLmRlbGF5LCBfLCAxKTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2VcbiAgLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG4gIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcbiAgLy8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3NcbiAgLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG4gIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgdmFyIHRpbWVvdXQsIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogXy5ub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgdGhyb3R0bGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gXy5ub3coKTtcbiAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdGhyb3R0bGVkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgcHJldmlvdXMgPSAwO1xuICAgICAgdGltZW91dCA9IGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRocm90dGxlZDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgcmVzdWx0O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oY29udGV4dCwgYXJncykge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoYXJncykgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgdmFyIGRlYm91bmNlZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJncykge1xuICAgICAgaWYgKHRpbWVvdXQpIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgICAgdmFyIGNhbGxOb3cgPSAhdGltZW91dDtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICBpZiAoY2FsbE5vdykgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBfLmRlbGF5KGxhdGVyLCB3YWl0LCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIGRlYm91bmNlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVib3VuY2VkO1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcbiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG4gIF8ubmVnYXRlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgb24gYW5kIGFmdGVyIHRoZSBOdGggY2FsbC5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGUgTnRoIGNhbGwuXG4gIF8uYmVmb3JlID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICB2YXIgbWVtbztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lcyA8PSAxKSBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7XG5cbiAgXy5yZXN0QXJndW1lbnRzID0gcmVzdEFyZ3VtZW50cztcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBLZXlzIGluIElFIDwgOSB0aGF0IHdvbid0IGJlIGl0ZXJhdGVkIGJ5IGBmb3Iga2V5IGluIC4uLmAgYW5kIHRodXMgbWlzc2VkLlxuICB2YXIgaGFzRW51bUJ1ZyA9ICF7dG9TdHJpbmc6IG51bGx9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpO1xuICB2YXIgbm9uRW51bWVyYWJsZVByb3BzID0gWyd2YWx1ZU9mJywgJ2lzUHJvdG90eXBlT2YnLCAndG9TdHJpbmcnLFxuICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdoYXNPd25Qcm9wZXJ0eScsICd0b0xvY2FsZVN0cmluZyddO1xuXG4gIHZhciBjb2xsZWN0Tm9uRW51bVByb3BzID0gZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIG5vbkVudW1JZHggPSBub25FbnVtZXJhYmxlUHJvcHMubGVuZ3RoO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgcHJvdG8gPSBfLmlzRnVuY3Rpb24oY29uc3RydWN0b3IpICYmIGNvbnN0cnVjdG9yLnByb3RvdHlwZSB8fCBPYmpQcm90bztcblxuICAgIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICAgIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcbiAgICBpZiAoaGFzKG9iaiwgcHJvcCkgJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIGtleXMucHVzaChwcm9wKTtcblxuICAgIHdoaWxlIChub25FbnVtSWR4LS0pIHtcbiAgICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07XG4gICAgICBpZiAocHJvcCBpbiBvYmogJiYgb2JqW3Byb3BdICE9PSBwcm90b1twcm9wXSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkge1xuICAgICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYC5cbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChoYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgICAvLyBBaGVtLCBJRSA8IDkuXG4gICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSBhbGwgdGhlIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdC5cbiAgXy5hbGxLZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50IG9mIHRoZSBvYmplY3QuXG4gIC8vIEluIGNvbnRyYXN0IHRvIF8ubWFwIGl0IHJldHVybnMgYW4gb2JqZWN0LlxuICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0cyA9IHt9O1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5c1tpbmRleF07XG4gICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgLy8gVGhlIG9wcG9zaXRlIG9mIF8ub2JqZWN0LlxuICBfLnBhaXJzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHBhaXJzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyc1tpXSA9IFtrZXlzW2ldLCBvYmpba2V5c1tpXV1dO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYC5cbiAgXy5mdW5jdGlvbnMgPSBfLm1ldGhvZHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG9ialtrZXldKSkgbmFtZXMucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXMuc29ydCgpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCBkZWZhdWx0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKGRlZmF1bHRzKSBvYmogPSBPYmplY3Qob2JqKTtcbiAgICAgIGlmIChsZW5ndGggPCAyIHx8IG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XSxcbiAgICAgICAgICAgIGtleXMgPSBrZXlzRnVuYyhzb3VyY2UpLFxuICAgICAgICAgICAgbCA9IGtleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmICghZGVmYXVsdHMgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuICBfLmV4dGVuZCA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cyk7XG5cbiAgLy8gQXNzaWducyBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgb3duIHByb3BlcnRpZXMgaW4gdGhlIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIC8vIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduKVxuICBfLmV4dGVuZE93biA9IF8uYXNzaWduID0gY3JlYXRlQXNzaWduZXIoXy5rZXlzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3QuXG4gIF8uZmluZEtleSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLCBrZXk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtrZXldLCBrZXksIG9iaikpIHJldHVybiBrZXk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEludGVybmFsIHBpY2sgaGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBgb2JqYCBoYXMga2V5IGBrZXlgLlxuICB2YXIga2V5SW5PYmogPSBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICByZXR1cm4ga2V5IGluIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLnBpY2sgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIHZhciByZXN1bHQgPSB7fSwgaXRlcmF0ZWUgPSBrZXlzWzBdO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBrZXlzWzFdKTtcbiAgICAgIGtleXMgPSBfLmFsbEtleXMob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBrZXlJbk9iajtcbiAgICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgICBvYmogPSBPYmplY3Qob2JqKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ub21pdCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIGl0ZXJhdGVlID0ga2V5c1swXSwgY29udGV4dDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaXRlcmF0ZWUgPSBfLm5lZ2F0ZShpdGVyYXRlZSk7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSBjb250ZXh0ID0ga2V5c1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IF8ubWFwKGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKSwgU3RyaW5nKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gIV8uY29udGFpbnMoa2V5cywga2V5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfLnBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7XG4gIH0pO1xuXG4gIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gIF8uZGVmYXVsdHMgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMsIHRydWUpO1xuXG4gIC8vIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgZ2l2ZW4gcHJvdG90eXBlIG9iamVjdC5cbiAgLy8gSWYgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBwcm92aWRlZCB0aGVuIHRoZXkgd2lsbCBiZSBhZGRlZCB0byB0aGVcbiAgLy8gY3JlYXRlZCBvYmplY3QuXG4gIF8uY3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlLCBwcm9wcykge1xuICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgaWYgKHByb3BzKSBfLmV4dGVuZE93bihyZXN1bHQsIHByb3BzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cbiAgXy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7XG4gIH07XG5cbiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLlxuICAvLyBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiwgaW5cbiAgLy8gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpbiB0aGUgY2hhaW4uXG4gIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikge1xuICAgIGludGVyY2VwdG9yKG9iaik7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5pc01hdGNoID0gZnVuY3Rpb24ob2JqZWN0LCBhdHRycykge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKGF0dHJzKSwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gIWxlbmd0aDtcbiAgICB2YXIgb2JqID0gT2JqZWN0KG9iamVjdCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoYXR0cnNba2V5XSAhPT0gb2JqW2tleV0gfHwgIShrZXkgaW4gb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuXG4gIC8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuXG4gIHZhciBlcSwgZGVlcEVxO1xuICBlcSA9IGZ1bmN0aW9uKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgIGlmIChhICE9PSBhKSByZXR1cm4gYiAhPT0gYjtcbiAgICAvLyBFeGhhdXN0IHByaW1pdGl2ZSBjaGVja3NcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmICh0eXBlICE9PSAnZnVuY3Rpb24nICYmIHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGRlZXBFcShhLCBiLCBhU3RhY2ssIGJTdGFjayk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgZGVlcEVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xuICAgIGlmIChiIGluc3RhbmNlb2YgXykgYiA9IGIuX3dyYXBwZWQ7XG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcbiAgICBpZiAoY2xhc3NOYW1lICE9PSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgIHJldHVybiAnJyArIGEgPT09ICcnICsgYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxuICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3ltYm9sXSc6XG4gICAgICAgIHJldHVybiBTeW1ib2xQcm90by52YWx1ZU9mLmNhbGwoYSkgPT09IFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChiKTtcbiAgICB9XG5cbiAgICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgaWYgKF8ua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XG4gICAgICAgIGlmICghKGhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wb3AoKTtcbiAgICBiU3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYik7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiBhcnJheSwgc3RyaW5nLCBvciBvYmplY3QgZW1wdHk/XG4gIC8vIEFuIFwiZW1wdHlcIiBvYmplY3QgaGFzIG5vIGVudW1lcmFibGUgb3duLXByb3BlcnRpZXMuXG4gIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikgJiYgKF8uaXNBcnJheShvYmopIHx8IF8uaXNTdHJpbmcob2JqKSB8fCBfLmlzQXJndW1lbnRzKG9iaikpKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICByZXR1cm4gXy5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD9cbiAgXy5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSk7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT9cbiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXlcbiAgXy5pc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0P1xuICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIHJldHVybiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGUgPT09ICdvYmplY3QnICYmICEhb2JqO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLCBpc0Vycm9yLCBpc01hcCwgaXNXZWFrTWFwLCBpc1NldCwgaXNXZWFrU2V0LlxuICBfLmVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCcsICdFcnJvcicsICdTeW1ib2wnLCAnTWFwJywgJ1dlYWtNYXAnLCAnU2V0JywgJ1dlYWtTZXQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgbmFtZSArICddJztcbiAgICB9O1xuICB9KTtcblxuICAvLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFIDwgOSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIGhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgU2FmYXJpIDggKCMxOTI5KSwgYW5kIFBoYW50b21KUyAoIzIyMzYpLlxuICB2YXIgbm9kZWxpc3QgPSByb290LmRvY3VtZW50ICYmIHJvb3QuZG9jdW1lbnQuY2hpbGROb2RlcztcbiAgaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnICYmIHR5cGVvZiBub2RlbGlzdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gIV8uaXNTeW1ib2wob2JqKSAmJiBpc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xuICB9O1xuXG4gIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD9cbiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgaXNOYU4ob2JqKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gaGFzKG9iaiwgcGF0aCk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcGF0aFtpXTtcbiAgICAgIGlmIChvYmogPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqID0gb2JqW2tleV07XG4gICAgfVxuICAgIHJldHVybiAhIWxlbmd0aDtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIHBhc3NlZCBhbiBvYmplY3QsIHdpbGwgdHJhdmVyc2UgdGhhdCBvYmplY3TigJlzXG4gIC8vIHByb3BlcnRpZXMgZG93biB0aGUgZ2l2ZW4gYHBhdGhgLCBzcGVjaWZpZWQgYXMgYW4gYXJyYXkgb2Yga2V5cyBvciBpbmRleGVzLlxuICBfLnByb3BlcnR5ID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gc2hhbGxvd1Byb3BlcnR5KHBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gZGVlcEdldChvYmosIHBhdGgpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gR2VuZXJhdGVzIGEgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gb2JqZWN0IHRoYXQgcmV0dXJucyBhIGdpdmVuIHByb3BlcnR5LlxuICBfLnByb3BlcnR5T2YgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpe307XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gIV8uaXNBcnJheShwYXRoKSA/IG9ialtwYXRoXSA6IGRlZXBHZXQob2JqLCBwYXRoKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZlxuICAvLyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5tYXRjaGVyID0gXy5tYXRjaGVzID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICBhdHRycyA9IF8uZXh0ZW5kT3duKHt9LCBhdHRycyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIF8uaXNNYXRjaChvYmosIGF0dHJzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxuICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRlZShpKTtcbiAgICByZXR1cm4gYWNjdW07XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gYW5kIG1heCAoaW5jbHVzaXZlKS5cbiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gIH07XG5cbiAgLy8gQSAocG9zc2libHkgZmFzdGVyKSB3YXkgdG8gZ2V0IHRoZSBjdXJyZW50IHRpbWVzdGFtcCBhcyBhbiBpbnRlZ2VyLlxuICBfLm5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfTtcblxuICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZC5cbiAgICB2YXIgc291cmNlID0gJyg/OicgKyBfLmtleXMobWFwKS5qb2luKCd8JykgKyAnKSc7XG4gICAgdmFyIHRlc3RSZWdleHAgPSBSZWdFeHAoc291cmNlKTtcbiAgICB2YXIgcmVwbGFjZVJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UsICdnJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nID09IG51bGwgPyAnJyA6ICcnICsgc3RyaW5nO1xuICAgICAgcmV0dXJuIHRlc3RSZWdleHAudGVzdChzdHJpbmcpID8gc3RyaW5nLnJlcGxhY2UocmVwbGFjZVJlZ2V4cCwgZXNjYXBlcikgOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgXy5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKGVzY2FwZU1hcCk7XG4gIF8udW5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKHVuZXNjYXBlTWFwKTtcblxuICAvLyBUcmF2ZXJzZXMgdGhlIGNoaWxkcmVuIG9mIGBvYmpgIGFsb25nIGBwYXRoYC4gSWYgYSBjaGlsZCBpcyBhIGZ1bmN0aW9uLCBpdFxuICAvLyBpcyBpbnZva2VkIHdpdGggaXRzIHBhcmVudCBhcyBjb250ZXh0LiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmluYWxcbiAgLy8gY2hpbGQsIG9yIGBmYWxsYmFja2AgaWYgYW55IGNoaWxkIGlzIHVuZGVmaW5lZC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmosIHBhdGgsIGZhbGxiYWNrKSB7XG4gICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHBhdGggPSBbcGF0aF07XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKGZhbGxiYWNrKSA/IGZhbGxiYWNrLmNhbGwob2JqKSA6IGZhbGxiYWNrO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcCA9IG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW3BhdGhbaV1dO1xuICAgICAgaWYgKHByb3AgPT09IHZvaWQgMCkge1xuICAgICAgICBwcm9wID0gZmFsbGJhY2s7XG4gICAgICAgIGkgPSBsZW5ndGg7IC8vIEVuc3VyZSB3ZSBkb24ndCBjb250aW51ZSBpdGVyYXRpbmcuXG4gICAgICB9XG4gICAgICBvYmogPSBfLmlzRnVuY3Rpb24ocHJvcCkgPyBwcm9wLmNhbGwob2JqKSA6IHByb3A7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZTogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICBpbnRlcnBvbGF0ZTogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIHZhciBlc2NhcGVSZWdFeHAgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVSZWdFeHAsIGVzY2FwZUNoYXIpO1xuICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZnNldC5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgICB2YXIgcmVuZGVyO1xuICAgIHRyeSB7XG4gICAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIGNoYWluUmVzdWx0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIG9iaikge1xuICAgIHJldHVybiBpbnN0YW5jZS5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdO1xuICAgICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XG4gICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIGZ1bmMuYXBwbHkoXywgYXJncykpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gXztcbiAgfTtcblxuICAvLyBBZGQgYWxsIG9mIHRoZSBVbmRlcnNjb3JlIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlciBvYmplY3QuXG4gIF8ubWl4aW4oXyk7XG5cbiAgLy8gQWRkIGFsbCBtdXRhdG9yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9iaiA9IHRoaXMuX3dyYXBwZWQ7XG4gICAgICBtZXRob2QuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKChuYW1lID09PSAnc2hpZnQnIHx8IG5hbWUgPT09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBFeHRyYWN0cyB0aGUgcmVzdWx0IGZyb20gYSB3cmFwcGVkIGFuZCBjaGFpbmVkIG9iamVjdC5cbiAgXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBQcm92aWRlIHVud3JhcHBpbmcgcHJveHkgZm9yIHNvbWUgbWV0aG9kcyB1c2VkIGluIGVuZ2luZSBvcGVyYXRpb25zXG4gIC8vIHN1Y2ggYXMgYXJpdGhtZXRpYyBhbmQgSlNPTiBzdHJpbmdpZmljYXRpb24uXG4gIF8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcblxuICBfLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5fd3JhcHBlZCk7XG4gIH07XG5cbiAgLy8gQU1EIHJlZ2lzdHJhdGlvbiBoYXBwZW5zIGF0IHRoZSBlbmQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQgbG9hZGVyc1xuICAvLyB0aGF0IG1heSBub3QgZW5mb3JjZSBuZXh0LXR1cm4gc2VtYW50aWNzIG9uIG1vZHVsZXMuIEV2ZW4gdGhvdWdoIGdlbmVyYWxcbiAgLy8gcHJhY3RpY2UgZm9yIEFNRCByZWdpc3RyYXRpb24gaXMgdG8gYmUgYW5vbnltb3VzLCB1bmRlcnNjb3JlIHJlZ2lzdGVyc1xuICAvLyBhcyBhIG5hbWVkIG1vZHVsZSBiZWNhdXNlLCBsaWtlIGpRdWVyeSwgaXQgaXMgYSBiYXNlIGxpYnJhcnkgdGhhdCBpc1xuICAvLyBwb3B1bGFyIGVub3VnaCB0byBiZSBidW5kbGVkIGluIGEgdGhpcmQgcGFydHkgbGliLCBidXQgbm90IGJlIHBhcnQgb2ZcbiAgLy8gYW4gQU1EIGxvYWQgcmVxdWVzdC4gVGhvc2UgY2FzZXMgY291bGQgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhblxuICAvLyBhbm9ueW1vdXMgZGVmaW5lKCkgaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBsb2FkZXIgcmVxdWVzdC5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKCd1bmRlcnNjb3JlJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbn0oKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {\n  "use strict";\n\n  return arr.indexOf;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvaW5kZXhPZi5qcz83OGY4Il0sIm5hbWVzIjpbImRlZmluZSIsImFyciIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsR0FBVixFQUFnQjtBQUNsQjs7QUFFQSxTQUFPQSxHQUFHLENBQUNDLE9BQVg7QUFDQSxDQU5LO0FBQUEsb0dBQU4iLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuL2FyclwiXG5dLCBmdW5jdGlvbiggYXJyICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gYXJyLmluZGV4T2Y7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(25)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (class2type) {\n  "use strict";\n\n  return class2type.hasOwnProperty;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvaGFzT3duLmpzPzBmNDIiXSwibmFtZXMiOlsiZGVmaW5lIiwiY2xhc3MydHlwZSIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCx1QkFETyxDQUFGLG1DQUVILFVBQVVDLFVBQVYsRUFBdUI7QUFDekI7O0FBRUEsU0FBT0EsVUFBVSxDQUFDQyxjQUFsQjtBQUNBLENBTks7QUFBQSxvR0FBTiIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4vY2xhc3MydHlwZVwiXG5dLCBmdW5jdGlvbiggY2xhc3MydHlwZSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(14), __webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, isFunction, rnothtmlwhite) {\n  "use strict"; // Convert String-formatted options into Object-formatted ones\n\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * "fired" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n        // Last fire value for non-forgettable lists\n    memory,\n        // Flag to know if list was already fired\n    fired,\n        // Flag to prevent firing\n    locked,\n        // Actual callback list\n    list = [],\n        // Queue of execution data for repeatable lists\n    queue = [],\n        // Index of currently firing callback (modified by add/remove as needed)\n    firingIndex = -1,\n        // Fire callbacks\n    fire = function () {\n      // Enforce single-firing\n      locked = locked || options.once; // Execute callbacks for all pending executions,\n      // respecting firingIndex overrides and runtime changes\n\n      fired = firing = true;\n\n      for (; queue.length; firingIndex = -1) {\n        memory = queue.shift();\n\n        while (++firingIndex < list.length) {\n          // Run callback and check for early termination\n          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n            // Jump to end and forget the data so .add doesn\'t re-fire\n            firingIndex = list.length;\n            memory = false;\n          }\n        }\n      } // Forget the data if we\'re done with it\n\n\n      if (!options.memory) {\n        memory = false;\n      }\n\n      firing = false; // Clean up if we\'re done firing for good\n\n      if (locked) {\n        // Keep an empty list if we have data for future add calls\n        if (memory) {\n          list = []; // Otherwise, this object is spent\n        } else {\n          list = "";\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function () {\n        if (list) {\n          // If we have memory from a past run, we should fire after adding\n          if (memory && !firing) {\n            firingIndex = list.length - 1;\n            queue.push(memory);\n          }\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              if (isFunction(arg)) {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && toType(arg) !== "string") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments);\n\n          if (memory && !firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function () {\n        jQuery.each(arguments, function (_, arg) {\n          var index;\n\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\n            list.splice(index, 1); // Handle firing indexes\n\n            if (index <= firingIndex) {\n              firingIndex--;\n            }\n          }\n        });\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function (fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n      },\n      // Remove all callbacks from the list\n      empty: function () {\n        if (list) {\n          list = [];\n        }\n\n        return this;\n      },\n      // Disable .fire and .add\n      // Abort any current/pending executions\n      // Clear all callbacks and values\n      disable: function () {\n        locked = queue = [];\n        list = memory = "";\n        return this;\n      },\n      disabled: function () {\n        return !list;\n      },\n      // Disable .fire\n      // Also disable .add unless we have memory (since it would have no effect)\n      // Abort any pending executions\n      lock: function () {\n        locked = queue = [];\n\n        if (!memory && !firing) {\n          list = memory = "";\n        }\n\n        return this;\n      },\n      locked: function () {\n        return !!locked;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function (context, args) {\n        if (!locked) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          queue.push(args);\n\n          if (!firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function () {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function () {\n        return !!fired;\n      }\n    };\n\n    return self;\n  };\n\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n  /**\n   * Determines whether an object can have data\n   */\n\n  return function (owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9kYXRhL3Zhci9hY2NlcHREYXRhLmpzPzRmNzkiXSwibmFtZXMiOlsiZGVmaW5lIiwib3duZXIiLCJub2RlVHlwZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFFbkI7QUFFQTs7OztBQUdBLFNBQU8sVUFBVUMsS0FBVixFQUFrQjtBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFPQSxLQUFLLENBQUNDLFFBQU4sS0FBbUIsQ0FBbkIsSUFBd0JELEtBQUssQ0FBQ0MsUUFBTixLQUFtQixDQUEzQyxJQUFnRCxDQUFHLENBQUNELEtBQUssQ0FBQ0MsUUFBakU7QUFDQSxHQVREO0FBV0MsQ0FsQks7QUFBQSxvR0FBTiIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggZnVuY3Rpb24oKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxuICovXG5yZXR1cm4gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(9), __webpack_require__(16), __webpack_require__(32)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, dataPriv) {\n  "use strict";\n\n  jQuery.extend({\n    queue: function (elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || "fx") + "queue";\n        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function (elem, type) {\n      type = type || "fx";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function () {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === "inprogress") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === "fx") {\n          queue.unshift("inprogress");\n        } // Clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function (elem, type) {\n      var key = type + "queueHooks";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks("once memory").add(function () {\n          dataPriv.remove(elem, [type + "queue", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function (type, data) {\n      var setter = 2;\n\n      if (typeof type !== "string") {\n        data = type;\n        type = "fx";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === "fx" && queue[0] !== "inprogress") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function (type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function (type) {\n      return this.queue(type || "fx", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function (type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function () {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== "string") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || "fx";\n\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + "queueHooks");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(22), __webpack_require__(6), __webpack_require__(3), __webpack_require__(36), __webpack_require__(10), __webpack_require__(37), __webpack_require__(58), __webpack_require__(59), __webpack_require__(60), __webpack_require__(9), __webpack_require__(87), __webpack_require__(8), __webpack_require__(34), __webpack_require__(16), __webpack_require__(15), __webpack_require__(28), __webpack_require__(23), __webpack_require__(90)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, camelCase, document, isFunction, rcssNum, rnothtmlwhite, cssExpand, isHiddenWithinTree, swap, adjustCSS, dataPriv, showHide) {\n  "use strict";\n\n  var fxNow,\n      inProgress,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rrun = /queueHooks$/;\n\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n\n      jQuery.fx.tick();\n    }\n  } // Animations created synchronously will run synchronously\n\n\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  } // Generate parameters to create a standard animation\n\n\n  function genFx(type, includeWidth) {\n    var which,\n        i = 0,\n        attrs = {\n      height: type\n    }; // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs["margin" + which] = attrs["padding" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  }\n\n  function createTween(value, prop, animation) {\n    var tween,\n        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),\n        index = 0,\n        length = collection.length;\n\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We\'re done with this property\n        return tween;\n      }\n    }\n  }\n\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n        value,\n        toggle,\n        hooks,\n        oldfire,\n        propTween,\n        restoreDisplay,\n        display,\n        isBox = "width" in props || "height" in props,\n        anim = this,\n        orig = {},\n        style = elem.style,\n        hidden = elem.nodeType && isHiddenWithinTree(elem),\n        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, "fx");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, "fx").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // Detect show/hide animations\n\n\n    for (prop in props) {\n      value = props[prop];\n\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === "toggle";\n\n        if (value === (hidden ? "hide" : "show")) {\n          // Pretend to be hidden if this is a "show" and\n          // there is still data from a stopped show/hide\n          if (value === "show" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true; // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    } // Bail out if this is a no-op like .hide().hide()\n\n\n    propTween = !jQuery.isEmptyObject(props);\n\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    } // Restrict "overflow" and "display" styles during box animations\n\n\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\n\n      restoreDisplay = dataShow && dataShow.display;\n\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, "display");\n      }\n\n      display = jQuery.css(elem, "display");\n\n      if (display === "none") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, "display");\n          showHide([elem]);\n        }\n      } // Animate inline elements as inline-block\n\n\n      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {\n        if (jQuery.css(elem, "float") === "none") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === "none" ? "" : display;\n            }\n          }\n\n          style.display = "inline-block";\n        }\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = "hidden";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    } // Implement show/hide animations\n\n\n    propTween = false;\n\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if ("hidden" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, "fxshow", {\n            display: restoreDisplay\n          });\n        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"\n\n\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        } // Show elements before animating them\n\n\n        if (hidden) {\n          showHide([elem], true);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n          // The final step of a "hide" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n\n          dataPriv.remove(elem, "fxshow");\n\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      } // Per-property setup\n\n\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && "expand" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // Not quite $.extend, this won\'t overwrite existing keys.\n        // Reusing \'index\' because we have the correct "name"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = Animation.prefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // Don\'t match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function () {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n      // Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]); // If there\'s more to do, yield\n\n      if (percent < 1 && length) {\n        return remaining;\n      } // If this was an empty animation, synthesize a final progress notification\n\n\n      if (!length) {\n        deferred.notifyWith(elem, [animation, 1, 0]);\n      } // Resolve the animation and report its conclusion\n\n\n      deferred.resolveWith(elem, [animation]);\n      return false;\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {},\n        easing: jQuery.easing._default\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function (prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function (gotoEnd) {\n        var index = 0,\n            // If we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // Resolve when we played the last frame; otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n\n        return result;\n      }\n    }\n\n    jQuery.map(props, createTween, animation);\n\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    } // Attach callbacks from options\n\n\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      "*": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function (props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = ["*"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function (callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    }; // Go to the end state if fx are off\n\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== "number") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    } // Normalize opt.queue - true/undefined/null -> "fx"\n\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = "fx";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.fn.extend({\n    fadeTo: function (speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function (prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function () {\n        // Operate on a copy of prop so per-property easing won\'t be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n        if (empty || dataPriv.get(this, "finish")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function (type, clearQueue, gotoEnd) {\n      var stopQueue = function (hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== "string") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue && type !== false) {\n        this.queue(type || "fx", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + "queueHooks",\n            timers = jQuery.timers,\n            data = dataPriv.get(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // Start the next in the queue if the last step wasn\'t forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function (type) {\n      if (type !== false) {\n        type = type || "fx";\n      }\n\n      return this.each(function () {\n        var index,\n            data = dataPriv.get(this),\n            queue = data[type + "queue"],\n            hooks = data[type + "queueHooks"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n        data.finish = true; // Empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        } // Look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // Look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // Turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each(["toggle", "show", "hide"], function (i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  }); // Generate shortcuts for custom animations\n\n  jQuery.each({\n    slideDown: genFx("show"),\n    slideUp: genFx("hide"),\n    slideToggle: genFx("toggle"),\n    fadeIn: {\n      opacity: "show"\n    },\n    fadeOut: {\n      opacity: "hide"\n    },\n    fadeToggle: {\n      opacity: "toggle"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n\n  jQuery.fx.tick = function () {\n    var timer,\n        i = 0,\n        timers = jQuery.timers;\n    fxNow = Date.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n\n    inProgress = true;\n    schedule();\n  };\n\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  };\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(57)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (pnum) {\n  "use strict";\n\n  return new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvcmNzc051bS5qcz8xNWIxIl0sIm5hbWVzIjpbImRlZmluZSIsInBudW0iLCJSZWdFeHAiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsSUFBVixFQUFpQjtBQUVwQjs7QUFFQSxTQUFPLElBQUlDLE1BQUosQ0FBWSxtQkFBbUJELElBQW5CLEdBQTBCLGFBQXRDLEVBQXFELEdBQXJELENBQVA7QUFFQyxDQVJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi92YXIvcG51bVwiXG5dLCBmdW5jdGlvbiggcG51bSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnJldHVybiBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return ["Top", "Right", "Bottom", "Left"];\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvdmFyL2Nzc0V4cGFuZC5qcz8zZmUxIl0sIm5hbWVzIjpbImRlZmluZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEI7O0FBRUEsU0FBTyxDQUFFLEtBQUYsRUFBUyxPQUFULEVBQWtCLFFBQWxCLEVBQTRCLE1BQTVCLENBQVA7QUFDQSxDQUpLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return /^(?:checkbox|radio)$/i;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvcmNoZWNrYWJsZVR5cGUuanM/ZmMyYyJdLCJuYW1lcyI6WyJkZWZpbmUiXSwibWFwcGluZ3MiOiJBQUFBQSxxRUFBUSxZQUFXO0FBQ2xCOztBQUVBLFNBQVMsdUJBQVQ7QUFDQSxDQUpLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(57)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (pnum) {\n  "use strict";\n\n  return new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvdmFyL3JudW1ub25weC5qcz9jNGJiIl0sIm5hbWVzIjpbImRlZmluZSIsInBudW0iLCJSZWdFeHAiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsSUFBVixFQUFpQjtBQUNuQjs7QUFFQSxTQUFPLElBQUlDLE1BQUosQ0FBWSxPQUFPRCxJQUFQLEdBQWMsaUJBQTFCLEVBQTZDLEdBQTdDLENBQVA7QUFDQSxDQU5LO0FBQUEsb0dBQU4iLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi8uLi92YXIvcG51bVwiXG5dLCBmdW5jdGlvbiggcG51bSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(27), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, documentElement, support) {\n  "use strict";\n\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they\'re executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n\n      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";\n      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn\'t\n\n      div.style.right = "60%";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don\'t get tricked when zoom affects offsetWidth (gh-4029)\n\n      div.style.position = "absolute";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container); // Nullify the div so it wouldn\'t be stored in the memory and\n      // it will also be a sign that checks already performed\n\n      div = null;\n    }\n\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n\n    var pixelPositionVal,\n        boxSizingReliableVal,\n        scrollboxSizeVal,\n        pixelBoxStylesVal,\n        reliableMarginLeftVal,\n        container = document.createElement("div"),\n        div = document.createElement("div"); // Finish early in limited (non-browser) environments\n\n    if (!div.style) {\n      return;\n    } // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (#8908)\n\n\n    div.style.backgroundClip = "content-box";\n    div.cloneNode(true).style.backgroundClip = "";\n    support.clearCloneStyle = div.style.backgroundClip === "content-box";\n    jQuery.extend(support, {\n      boxSizingReliable: function () {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function () {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function () {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function () {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function () {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      }\n    });\n  })();\n\n  return support;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, support) {\n  "use strict";\n\n  (function () {\n    var input = document.createElement("input"),\n        select = document.createElement("select"),\n        opt = select.appendChild(document.createElement("option"));\n    input.type = "checkbox"; // Support: Android <=4.3 only\n    // Default value for a checkbox should be "on"\n\n    support.checkOn = input.value !== ""; // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n\n    support.optSelected = opt.selected; // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n\n    input = document.createElement("input");\n    input.value = "t";\n    input.type = "radio";\n    support.radioValue = input.value === "t";\n  })();\n\n  return support;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hdHRyaWJ1dGVzL3N1cHBvcnQuanM/MTdjZCJdLCJuYW1lcyI6WyJkZWZpbmUiLCJkb2N1bWVudCIsInN1cHBvcnQiLCJpbnB1dCIsImNyZWF0ZUVsZW1lbnQiLCJzZWxlY3QiLCJvcHQiLCJhcHBlbmRDaGlsZCIsInR5cGUiLCJjaGVja09uIiwidmFsdWUiLCJvcHRTZWxlY3RlZCIsInNlbGVjdGVkIiwicmFkaW9WYWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCx1QkFGTyxDQUFGLG1DQUdILFVBQVVDLFFBQVYsRUFBb0JDLE9BQXBCLEVBQThCO0FBRWpDOztBQUVBLEdBQUUsWUFBVztBQUNaLFFBQUlDLEtBQUssR0FBR0YsUUFBUSxDQUFDRyxhQUFULENBQXdCLE9BQXhCLENBQVo7QUFBQSxRQUNDQyxNQUFNLEdBQUdKLFFBQVEsQ0FBQ0csYUFBVCxDQUF3QixRQUF4QixDQURWO0FBQUEsUUFFQ0UsR0FBRyxHQUFHRCxNQUFNLENBQUNFLFdBQVAsQ0FBb0JOLFFBQVEsQ0FBQ0csYUFBVCxDQUF3QixRQUF4QixDQUFwQixDQUZQO0FBSUFELFNBQUssQ0FBQ0ssSUFBTixHQUFhLFVBQWIsQ0FMWSxDQU9aO0FBQ0E7O0FBQ0FOLFdBQU8sQ0FBQ08sT0FBUixHQUFrQk4sS0FBSyxDQUFDTyxLQUFOLEtBQWdCLEVBQWxDLENBVFksQ0FXWjtBQUNBOztBQUNBUixXQUFPLENBQUNTLFdBQVIsR0FBc0JMLEdBQUcsQ0FBQ00sUUFBMUIsQ0FiWSxDQWVaO0FBQ0E7O0FBQ0FULFNBQUssR0FBR0YsUUFBUSxDQUFDRyxhQUFULENBQXdCLE9BQXhCLENBQVI7QUFDQUQsU0FBSyxDQUFDTyxLQUFOLEdBQWMsR0FBZDtBQUNBUCxTQUFLLENBQUNLLElBQU4sR0FBYSxPQUFiO0FBQ0FOLFdBQU8sQ0FBQ1csVUFBUixHQUFxQlYsS0FBSyxDQUFDTyxLQUFOLEtBQWdCLEdBQXJDO0FBQ0EsR0FyQkQ7O0FBdUJBLFNBQU9SLE9BQVA7QUFFQyxDQWhDSztBQUFBLG9HQUFOIiwiZmlsZSI6IjQxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vdmFyL2RvY3VtZW50XCIsXG5cdFwiLi4vdmFyL3N1cHBvcnRcIlxuXSwgZnVuY3Rpb24oIGRvY3VtZW50LCBzdXBwb3J0ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxucmV0dXJuIHN1cHBvcnQ7XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (rnothtmlwhite) {\n  "use strict"; // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(" ");\n  }\n\n  return stripAndCollapse;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL3N0cmlwQW5kQ29sbGFwc2UuanM/ZGNmNCJdLCJuYW1lcyI6WyJkZWZpbmUiLCJybm90aHRtbHdoaXRlIiwic3RyaXBBbmRDb2xsYXBzZSIsInZhbHVlIiwidG9rZW5zIiwibWF0Y2giLCJqb2luIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCx1QkFETyxDQUFGLG1DQUVILFVBQVVDLGFBQVYsRUFBMEI7QUFDNUIsZUFENEIsQ0FHNUI7QUFDQTs7QUFDQSxXQUFTQyxnQkFBVCxDQUEyQkMsS0FBM0IsRUFBbUM7QUFDbEMsUUFBSUMsTUFBTSxHQUFHRCxLQUFLLENBQUNFLEtBQU4sQ0FBYUosYUFBYixLQUFnQyxFQUE3QztBQUNBLFdBQU9HLE1BQU0sQ0FBQ0UsSUFBUCxDQUFhLEdBQWIsQ0FBUDtBQUNBOztBQUVELFNBQU9KLGdCQUFQO0FBQ0EsQ0FiSztBQUFBLG9HQUFOIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vdmFyL3Jub3RodG1sd2hpdGVcIlxuXSwgZnVuY3Rpb24oIHJub3RodG1sd2hpdGUgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cdHJldHVybiBzdHJpcEFuZENvbGxhcHNlO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///42\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(9), __webpack_require__(33), __webpack_require__(31), __webpack_require__(3), __webpack_require__(21), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, dataPriv, acceptData, hasOwn, isFunction, isWindow) {\n  "use strict";\n\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      stopPropagationCallback = function (e) {\n    e.stopPropagation();\n  };\n\n  jQuery.extend(jQuery.event, {\n    trigger: function (event, data, elem, onlyHandlers) {\n      var i,\n          cur,\n          tmp,\n          bubbleType,\n          ontype,\n          handle,\n          special,\n          lastElement,\n          eventPath = [elem || document],\n          type = hasOwn.call(event, "type") ? event.type : event,\n          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];\n      cur = lastElement = tmp = elem = elem || document; // Don\'t do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(".") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(".");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(".");\n      event.rnamespace = event.namespace ? new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don\'t do default actions on window, that\'s where global variables be (#6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don\'t re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n\n            elem[type]();\n\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function (type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function (type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function (type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n')},function(module,exports){eval('var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function("return this")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === "object") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLENBQUosQyxDQUVBOztBQUNBQSxDQUFDLEdBQUksWUFBVztBQUNmLFNBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsR0FBQyxHQUFHQSxDQUFDLElBQUksSUFBSUMsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUF0QixFQUFnQ0gsQ0FBQyxHQUFHRyxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLENBQWpCIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n')},function(module,exports){eval('module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, "loaded", {\n      enumerable: true,\n      get: function () {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, "id", {\n      enumerable: true,\n      get: function () {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJsIiwiaSJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFTRCxNQUFULEVBQWlCO0FBQ2pDLE1BQUksQ0FBQ0EsTUFBTSxDQUFDRSxlQUFaLEVBQTZCO0FBQzVCRixVQUFNLENBQUNHLFNBQVAsR0FBbUIsWUFBVyxDQUFFLENBQWhDOztBQUNBSCxVQUFNLENBQUNJLEtBQVAsR0FBZSxFQUFmLENBRjRCLENBRzVCOztBQUNBLFFBQUksQ0FBQ0osTUFBTSxDQUFDSyxRQUFaLEVBQXNCTCxNQUFNLENBQUNLLFFBQVAsR0FBa0IsRUFBbEI7QUFDdEJDLFVBQU0sQ0FBQ0MsY0FBUCxDQUFzQlAsTUFBdEIsRUFBOEIsUUFBOUIsRUFBd0M7QUFDdkNRLGdCQUFVLEVBQUUsSUFEMkI7QUFFdkNDLFNBQUcsRUFBRSxZQUFXO0FBQ2YsZUFBT1QsTUFBTSxDQUFDVSxDQUFkO0FBQ0E7QUFKc0MsS0FBeEM7QUFNQUosVUFBTSxDQUFDQyxjQUFQLENBQXNCUCxNQUF0QixFQUE4QixJQUE5QixFQUFvQztBQUNuQ1EsZ0JBQVUsRUFBRSxJQUR1QjtBQUVuQ0MsU0FBRyxFQUFFLFlBQVc7QUFDZixlQUFPVCxNQUFNLENBQUNXLENBQWQ7QUFDQTtBQUprQyxLQUFwQztBQU1BWCxVQUFNLENBQUNFLGVBQVAsR0FBeUIsQ0FBekI7QUFDQTs7QUFDRCxTQUFPRixNQUFQO0FBQ0EsQ0FyQkQiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {\n  "use strict";\n\n  return arr.concat;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvY29uY2F0LmpzP2UxNGYiXSwibmFtZXMiOlsiZGVmaW5lIiwiYXJyIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCx1QkFETyxDQUFGLG1DQUVILFVBQVVDLEdBQVYsRUFBZ0I7QUFDbEI7O0FBRUEsU0FBT0EsR0FBRyxDQUFDQyxNQUFYO0FBQ0EsQ0FOSztBQUFBLG9HQUFOIiwiZmlsZSI6IjQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9hcnJcIlxuXSwgZnVuY3Rpb24oIGFyciApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIGFyci5jb25jYXQ7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {\n  "use strict";\n\n  return arr.push;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvcHVzaC5qcz9jYjZhIl0sIm5hbWVzIjpbImRlZmluZSIsImFyciIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsR0FBVixFQUFnQjtBQUNsQjs7QUFFQSxTQUFPQSxHQUFHLENBQUNDLElBQVg7QUFDQSxDQU5LO0FBQUEsb0dBQU4iLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuL2FyclwiXG5dLCBmdW5jdGlvbiggYXJyICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gYXJyLnB1c2g7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///47\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(25)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (class2type) {\n  "use strict";\n\n  return class2type.toString;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvdG9TdHJpbmcuanM/OGRiMyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsVUFBVixFQUF1QjtBQUN6Qjs7QUFFQSxTQUFPQSxVQUFVLENBQUNDLFFBQWxCO0FBQ0EsQ0FOSztBQUFBLG9HQUFOIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9jbGFzczJ0eXBlXCJcbl0sIGZ1bmN0aW9uKCBjbGFzczJ0eXBlICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gY2xhc3MydHlwZS50b1N0cmluZztcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(31)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (hasOwn) {\n  "use strict";\n\n  return hasOwn.toString;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvZm5Ub1N0cmluZy5qcz8xYzA0Il0sIm5hbWVzIjpbImRlZmluZSIsImhhc093biIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCx1QkFETyxDQUFGLG1DQUVILFVBQVVDLE1BQVYsRUFBbUI7QUFDckI7O0FBRUEsU0FBT0EsTUFBTSxDQUFDQyxRQUFkO0FBQ0EsQ0FOSztBQUFBLG9HQUFOIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9oYXNPd25cIlxuXSwgZnVuY3Rpb24oIGhhc093biApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIGhhc093bi50b1N0cmluZztcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document) {\n  "use strict";\n\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n        val,\n        script = doc.createElement("script");\n    script.text = code;\n\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don\'t support the "nonce" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n\n  return DOMEval;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL0RPTUV2YWwuanM/ZmIyZiJdLCJuYW1lcyI6WyJkZWZpbmUiLCJkb2N1bWVudCIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsImkiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sQ0FBRixtQ0FFSCxVQUFVQyxRQUFWLEVBQXFCO0FBQ3ZCOztBQUVBLE1BQUlDLHlCQUF5QixHQUFHO0FBQy9CQyxRQUFJLEVBQUUsSUFEeUI7QUFFL0JDLE9BQUcsRUFBRSxJQUYwQjtBQUcvQkMsU0FBSyxFQUFFLElBSHdCO0FBSS9CQyxZQUFRLEVBQUU7QUFKcUIsR0FBaEM7O0FBT0EsV0FBU0MsT0FBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLElBQXhCLEVBQThCQyxHQUE5QixFQUFvQztBQUNuQ0EsT0FBRyxHQUFHQSxHQUFHLElBQUlULFFBQWI7QUFFQSxRQUFJVSxDQUFKO0FBQUEsUUFBT0MsR0FBUDtBQUFBLFFBQ0NDLE1BQU0sR0FBR0gsR0FBRyxDQUFDSSxhQUFKLENBQW1CLFFBQW5CLENBRFY7QUFHQUQsVUFBTSxDQUFDRSxJQUFQLEdBQWNQLElBQWQ7O0FBQ0EsUUFBS0MsSUFBTCxFQUFZO0FBQ1gsV0FBTUUsQ0FBTixJQUFXVCx5QkFBWCxFQUF1QztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBVSxXQUFHLEdBQUdILElBQUksQ0FBRUUsQ0FBRixDQUFKLElBQWFGLElBQUksQ0FBQ08sWUFBTCxJQUFxQlAsSUFBSSxDQUFDTyxZQUFMLENBQW1CTCxDQUFuQixDQUF4Qzs7QUFDQSxZQUFLQyxHQUFMLEVBQVc7QUFDVkMsZ0JBQU0sQ0FBQ0ksWUFBUCxDQUFxQk4sQ0FBckIsRUFBd0JDLEdBQXhCO0FBQ0E7QUFDRDtBQUNEOztBQUNERixPQUFHLENBQUNRLElBQUosQ0FBU0MsV0FBVCxDQUFzQk4sTUFBdEIsRUFBK0JPLFVBQS9CLENBQTBDQyxXQUExQyxDQUF1RFIsTUFBdkQ7QUFDQTs7QUFFRCxTQUFPTixPQUFQO0FBQ0EsQ0ExQ0s7QUFBQSxvR0FBTiIsImZpbGUiOiI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL3Zhci9kb2N1bWVudFwiXG5dLCBmdW5jdGlvbiggZG9jdW1lbnQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cdHJldHVybiBET01FdmFsO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  return jQuery.expr.match.needsContext;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy90cmF2ZXJzaW5nL3Zhci9ybmVlZHNDb250ZXh0LmpzP2ViOTMiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwiZXhwciIsIm1hdGNoIiwibmVlZHNDb250ZXh0Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHNCQUZPLENBQUYsbUNBR0gsVUFBVUMsTUFBVixFQUFtQjtBQUNyQjs7QUFFQSxTQUFPQSxNQUFNLENBQUNDLElBQVAsQ0FBWUMsS0FBWixDQUFrQkMsWUFBekI7QUFDQSxDQVBLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi8uLi9jb3JlXCIsXG5cdFwiLi4vLi4vc2VsZWN0b3JcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // rsingleTag matches a string consisting of a single HTML element with no attributes\n  // and captures the element\'s name\n\n  return /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL3Zhci9yc2luZ2xlVGFnLmpzPzc5MzAiXSwibmFtZXMiOlsiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUNsQixlQURrQixDQUdsQjtBQUNBOztBQUNBLFNBQVMsaUVBQVQ7QUFDQSxDQU5LO0FBQUEsb0dBQU4iLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvLyByc2luZ2xlVGFnIG1hdGNoZXMgYSBzdHJpbmcgY29uc2lzdGluZyBvZiBhIHNpbmdsZSBIVE1MIGVsZW1lbnQgd2l0aCBubyBhdHRyaWJ1dGVzXG5cdC8vIGFuZCBjYXB0dXJlcyB0aGUgZWxlbWVudCdzIG5hbWVcblx0cmV0dXJuICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(30), __webpack_require__(3), __webpack_require__(51), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, indexOf, isFunction, rneedsContext) {\n  "use strict"; // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    } // Single element\n\n\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    } // Arraylike of elements (jQuery, arguments, Array)\n\n\n    if (typeof qualifier !== "string") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    } // Filtered directly for both simple and complex selectors\n\n\n    return jQuery.filter(qualifier, elements, not);\n  }\n\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n\n    if (not) {\n      expr = ":not(" + expr + ")";\n    }\n\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n\n  jQuery.fn.extend({\n    find: function (selector) {\n      var i,\n          ret,\n          len = this.length,\n          self = this;\n\n      if (typeof selector !== "string") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      ret = this.pushStack([]);\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function (selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function (selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function (selector) {\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n      // so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy90cmF2ZXJzaW5nL2ZpbmRGaWx0ZXIuanM/NDc0ZCJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJpbmRleE9mIiwiaXNGdW5jdGlvbiIsInJuZWVkc0NvbnRleHQiLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImdyZXAiLCJlbGVtIiwiaSIsImNhbGwiLCJub2RlVHlwZSIsImZpbHRlciIsImV4cHIiLCJlbGVtcyIsImxlbmd0aCIsImZpbmQiLCJtYXRjaGVzU2VsZWN0b3IiLCJtYXRjaGVzIiwiZm4iLCJleHRlbmQiLCJzZWxlY3RvciIsInJldCIsImxlbiIsInNlbGYiLCJwdXNoU3RhY2siLCJjb250YWlucyIsInVuaXF1ZVNvcnQiLCJpcyIsInRlc3QiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sRUFHUCxzQkFITyxFQUlQLHVCQUpPLEVBS1Asc0JBTE8sQ0FBRixtQ0FNSCxVQUFVQyxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQkMsVUFBM0IsRUFBdUNDLGFBQXZDLEVBQXVEO0FBRTFELGVBRjBELENBSTFEOztBQUNBLFdBQVNDLE1BQVQsQ0FBaUJDLFFBQWpCLEVBQTJCQyxTQUEzQixFQUFzQ0MsR0FBdEMsRUFBNEM7QUFDM0MsUUFBS0wsVUFBVSxDQUFFSSxTQUFGLENBQWYsRUFBK0I7QUFDOUIsYUFBT04sTUFBTSxDQUFDUSxJQUFQLENBQWFILFFBQWIsRUFBdUIsVUFBVUksSUFBVixFQUFnQkMsQ0FBaEIsRUFBb0I7QUFDakQsZUFBTyxDQUFDLENBQUNKLFNBQVMsQ0FBQ0ssSUFBVixDQUFnQkYsSUFBaEIsRUFBc0JDLENBQXRCLEVBQXlCRCxJQUF6QixDQUFGLEtBQXNDRixHQUE3QztBQUNBLE9BRk0sQ0FBUDtBQUdBLEtBTDBDLENBTzNDOzs7QUFDQSxRQUFLRCxTQUFTLENBQUNNLFFBQWYsRUFBMEI7QUFD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QjtBQUM1QixhQUFPLEtBQUtJLFNBQUwsQ0FBZ0J0QixNQUFNLENBQUUsSUFBRixFQUFRa0IsUUFBUSxJQUFJLEVBQXBCLEVBQXdCLEtBQXhCLENBQXRCLENBQVA7QUFDQSxLQTFCZ0I7QUEyQmpCZixPQUFHLEVBQUUsVUFBVWUsUUFBVixFQUFxQjtBQUN6QixhQUFPLEtBQUtJLFNBQUwsQ0FBZ0J0QixNQUFNLENBQUUsSUFBRixFQUFRa0IsUUFBUSxJQUFJLEVBQXBCLEVBQXdCLElBQXhCLENBQXRCLENBQVA7QUFDQSxLQTdCZ0I7QUE4QmpCTyxNQUFFLEVBQUUsVUFBVVAsUUFBVixFQUFxQjtBQUN4QixhQUFPLENBQUMsQ0FBQ2xCLE1BQU0sQ0FDZCxJQURjLEVBR2Q7QUFDQTtBQUNBLGFBQU9rQixRQUFQLEtBQW9CLFFBQXBCLElBQWdDbkIsYUFBYSxDQUFDMkIsSUFBZCxDQUFvQlIsUUFBcEIsQ0FBaEMsR0FDQ3RCLE1BQU0sQ0FBRXNCLFFBQUYsQ0FEUCxHQUVDQSxRQUFRLElBQUksRUFQQyxFQVFkLEtBUmMsQ0FBTixDQVNQTixNQVRGO0FBVUE7QUF6Q2dCLEdBQWxCO0FBNENDLENBaEdLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCIsXG5cdFwiLi4vdmFyL2luZGV4T2ZcIixcblx0XCIuLi92YXIvaXNGdW5jdGlvblwiLFxuXHRcIi4vdmFyL3JuZWVkc0NvbnRleHRcIixcblx0XCIuLi9zZWxlY3RvclwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBpbmRleE9mLCBpc0Z1bmN0aW9uLCBybmVlZHNDb250ZXh0ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(84), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document) {\n  "use strict"; // The deferred used on DOM ready\n\n  var readyList = jQuery.Deferred();\n\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    .catch(function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function (wait) {\n      // Abort if there are pending holds or we\'re already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\n\n  function completed() {\n    document.removeEventListener("DOMContentLoaded", completed);\n    window.removeEventListener("load", completed);\n    jQuery.ready();\n  } // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals "interactive" too soon\n\n\n  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work\n\n    window.addEventListener("load", completed);\n  }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL3JlYWR5LmpzP2JlNzkiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwiZG9jdW1lbnQiLCJyZWFkeUxpc3QiLCJEZWZlcnJlZCIsImZuIiwicmVhZHkiLCJ0aGVuIiwiY2F0Y2giLCJlcnJvciIsInJlYWR5RXhjZXB0aW9uIiwiZXh0ZW5kIiwiaXNSZWFkeSIsInJlYWR5V2FpdCIsIndhaXQiLCJyZXNvbHZlV2l0aCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ3aW5kb3ciLCJyZWFkeVN0YXRlIiwiZG9jdW1lbnRFbGVtZW50IiwiZG9TY3JvbGwiLCJzZXRUaW1lb3V0IiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCxzQkFGTyxFQUdQLHVCQUhPLEVBSVAsdUJBSk8sQ0FBRixtQ0FLSCxVQUFVQyxNQUFWLEVBQWtCQyxRQUFsQixFQUE2QjtBQUVoQyxlQUZnQyxDQUloQzs7QUFDQSxNQUFJQyxTQUFTLEdBQUdGLE1BQU0sQ0FBQ0csUUFBUCxFQUFoQjs7QUFFQUgsUUFBTSxDQUFDSSxFQUFQLENBQVVDLEtBQVYsR0FBa0IsVUFBVUQsRUFBVixFQUFlO0FBRWhDRixhQUFTLENBQ1BJLElBREYsQ0FDUUYsRUFEUixFQUdDO0FBQ0E7QUFDQTtBQUxELEtBTUVHLEtBTkYsQ0FNUyxVQUFVQyxLQUFWLEVBQWtCO0FBQ3pCUixZQUFNLENBQUNTLGNBQVAsQ0FBdUJELEtBQXZCO0FBQ0EsS0FSRjtBQVVBLFdBQU8sSUFBUDtBQUNBLEdBYkQ7O0FBZUFSLFFBQU0sQ0FBQ1UsTUFBUCxDQUFlO0FBRWQ7QUFDQUMsV0FBTyxFQUFFLEtBSEs7QUFLZDtBQUNBO0FBQ0FDLGFBQVMsRUFBRSxDQVBHO0FBU2Q7QUFDQVAsU0FBSyxFQUFFLFVBQVVRLElBQVYsRUFBaUI7QUFFdkI7QUFDQSxVQUFLQSxJQUFJLEtBQUssSUFBVCxHQUFnQixFQUFFYixNQUFNLENBQUNZLFNBQXpCLEdBQXFDWixNQUFNLENBQUNXLE9BQWpELEVBQTJEO0FBQzFEO0FBQ0EsT0FMc0IsQ0FPdkI7OztBQUNBWCxZQUFNLENBQUNXLE9BQVAsR0FBaUIsSUFBakIsQ0FSdUIsQ0FVdkI7O0FBQ0EsVUFBS0UsSUFBSSxLQUFLLElBQVQsSUFBaUIsRUFBRWIsTUFBTSxDQUFDWSxTQUFULEdBQXFCLENBQTNDLEVBQStDO0FBQzlDO0FBQ0EsT0Fic0IsQ0FldkI7OztBQUNBVixlQUFTLENBQUNZLFdBQVYsQ0FBdUJiLFFBQXZCLEVBQWlDLENBQUVELE1BQUYsQ0FBakM7QUFDQTtBQTNCYSxHQUFmO0FBOEJBQSxRQUFNLENBQUNLLEtBQVAsQ0FBYUMsSUFBYixHQUFvQkosU0FBUyxDQUFDSSxJQUE5QixDQXBEZ0MsQ0FzRGhDOztBQUNBLFdBQVNTLFNBQVQsR0FBcUI7QUFDcEJkLFlBQVEsQ0FBQ2UsbUJBQVQsQ0FBOEIsa0JBQTlCLEVBQWtERCxTQUFsRDtBQUNBRSxVQUFNLENBQUNELG1CQUFQLENBQTRCLE1BQTVCLEVBQW9DRCxTQUFwQztBQUNBZixVQUFNLENBQUNLLEtBQVA7QUFDQSxHQTNEK0IsQ0E2RGhDO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFLSixRQUFRLENBQUNpQixVQUFULEtBQXdCLFVBQXhCLElBQ0ZqQixRQUFRLENBQUNpQixVQUFULEtBQXdCLFNBQXhCLElBQXFDLENBQUNqQixRQUFRLENBQUNrQixlQUFULENBQXlCQyxRQURsRSxFQUMrRTtBQUU5RTtBQUNBSCxVQUFNLENBQUNJLFVBQVAsQ0FBbUJyQixNQUFNLENBQUNLLEtBQTFCO0FBRUEsR0FORCxNQU1PO0FBRU47QUFDQUosWUFBUSxDQUFDcUIsZ0JBQVQsQ0FBMkIsa0JBQTNCLEVBQStDUCxTQUEvQyxFQUhNLENBS047O0FBQ0FFLFVBQU0sQ0FBQ0ssZ0JBQVAsQ0FBeUIsTUFBekIsRUFBaUNQLFNBQWpDO0FBQ0E7QUFFQSxDQXJGSztBQUFBLG9HQUFOIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL3Zhci9kb2N1bWVudFwiLFxuXHRcIi4uL2NvcmUvcmVhZHlFeGNlcHRpb25cIixcblx0XCIuLi9kZWZlcnJlZFwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBkb2N1bWVudCApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///54\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(22), __webpack_require__(10), __webpack_require__(33)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, camelCase, rnothtmlwhite, acceptData) {\n  "use strict";\n\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function (owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando]; // If not, create one\n\n      if (!value) {\n        value = {}; // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see #8335.\n        // Always return an empty object.\n\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return value;\n    },\n    set: function (owner, data, value) {\n      var prop,\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n\n      if (typeof data === "string") {\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n\n      return cache;\n    },\n    get: function (owner, key) {\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function (owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the "read" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === "string" && value === undefined) {\n        return this.get(owner, key);\n      } // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the "set" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function (owner, key) {\n      var i,\n          cache = owner[this.expando];\n\n      if (cache === undefined) {\n        return;\n      }\n\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key); // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n\n        i = key.length;\n\n        while (i--) {\n          delete cache[key[i]];\n        }\n      } // Remove the expando if there\'s no more data\n\n\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function (owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  return Data;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(55)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Data) {\n  "use strict";\n\n  return new Data();\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9kYXRhL3Zhci9kYXRhVXNlci5qcz82ODA4Il0sIm5hbWVzIjpbImRlZmluZSIsIkRhdGEiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsSUFBVixFQUFpQjtBQUNuQjs7QUFFQSxTQUFPLElBQUlBLElBQUosRUFBUDtBQUNBLENBTks7QUFBQSxvR0FBTiIsImZpbGUiOiI1Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL0RhdGFcIlxuXSwgZnVuY3Rpb24oIERhdGEgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHJldHVybiBuZXcgRGF0YSgpO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvcG51bS5qcz81MTAxIl0sIm5hbWVzIjpbImRlZmluZSIsInNvdXJjZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEI7O0FBRUEsU0FBUyxxQ0FBRixDQUEwQ0MsTUFBakQ7QUFDQSxDQUpLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///57\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(26) // css is assumed\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isAttached) {\n  "use strict"; // isHiddenWithinTree reports if an element has a non-"none" display style (inline and/or\n  // through the CSS cascade), which is useful in deciding whether or not to make it visible.\n  // It differs from the :hidden selector (jQuery.expr.pseudos.hidden) in two important ways:\n  // * A hidden ancestor does not force an element to be classified as hidden.\n  // * Being disconnected from the document does not force an element to be classified as hidden.\n  // These differences improve the behavior of .toggle() et al. when applied to elements that are\n  // detached or contained within hidden ancestors (gh-2404, gh-2863).\n\n  return function (elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem; // Inline style trumps all\n\n    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, "display") === "none";\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvdmFyL2lzSGlkZGVuV2l0aGluVHJlZS5qcz8yZTliIl0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsImlzQXR0YWNoZWQiLCJlbGVtIiwiZWwiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sQ0FJUDtBQUpPLENBQUYsbUNBS0gsVUFBVUMsTUFBVixFQUFrQkMsVUFBbEIsRUFBK0I7QUFDakMsZUFEaUMsQ0FHakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBTyxVQUFVQyxJQUFWLEVBQWdCQyxFQUFoQixFQUFxQjtBQUUzQjtBQUNBO0FBQ0FELFFBQUksR0FBR0MsRUFBRSxJQUFJRCxJQUFiLENBSjJCLENBTTNCOztBQUNBLFdBQU9BLElBQUksQ0FBQ0UsS0FBTCxDQUFXQyxPQUFYLEtBQXVCLE1BQXZCLElBQ05ILElBQUksQ0FBQ0UsS0FBTCxDQUFXQyxPQUFYLEtBQXVCLEVBQXZCLElBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQUosY0FBVSxDQUFFQyxJQUFGLENBTlYsSUFRQUYsTUFBTSxDQUFDTSxHQUFQLENBQVlKLElBQVosRUFBa0IsU0FBbEIsTUFBa0MsTUFUbkM7QUFVQSxHQWpCRDtBQWtCQSxDQWpDSztBQUFBLG9HQUFOIiwiZmlsZSI6IjU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vLi4vY29yZVwiLFxuXHRcIi4uLy4uL2NvcmUvaXNBdHRhY2hlZFwiXG5cblx0Ly8gY3NzIGlzIGFzc3VtZWRcbl0sIGZ1bmN0aW9uKCBqUXVlcnksIGlzQXR0YWNoZWQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8vIGlzSGlkZGVuV2l0aGluVHJlZSByZXBvcnRzIGlmIGFuIGVsZW1lbnQgaGFzIGEgbm9uLVwibm9uZVwiIGRpc3BsYXkgc3R5bGUgKGlubGluZSBhbmQvb3Jcblx0Ly8gdGhyb3VnaCB0aGUgQ1NTIGNhc2NhZGUpLCB3aGljaCBpcyB1c2VmdWwgaW4gZGVjaWRpbmcgd2hldGhlciBvciBub3QgdG8gbWFrZSBpdCB2aXNpYmxlLlxuXHQvLyBJdCBkaWZmZXJzIGZyb20gdGhlIDpoaWRkZW4gc2VsZWN0b3IgKGpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuKSBpbiB0d28gaW1wb3J0YW50IHdheXM6XG5cdC8vICogQSBoaWRkZW4gYW5jZXN0b3IgZG9lcyBub3QgZm9yY2UgYW4gZWxlbWVudCB0byBiZSBjbGFzc2lmaWVkIGFzIGhpZGRlbi5cblx0Ly8gKiBCZWluZyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnQgZG9lcyBub3QgZm9yY2UgYW4gZWxlbWVudCB0byBiZSBjbGFzc2lmaWVkIGFzIGhpZGRlbi5cblx0Ly8gVGhlc2UgZGlmZmVyZW5jZXMgaW1wcm92ZSB0aGUgYmVoYXZpb3Igb2YgLnRvZ2dsZSgpIGV0IGFsLiB3aGVuIGFwcGxpZWQgdG8gZWxlbWVudHMgdGhhdCBhcmVcblx0Ly8gZGV0YWNoZWQgb3IgY29udGFpbmVkIHdpdGhpbiBoaWRkZW4gYW5jZXN0b3JzIChnaC0yNDA0LCBnaC0yODYzKS5cblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///58\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // A method for quickly swapping in/out CSS properties to get correct calculations.\n\n  return function (elem, options, callback, args) {\n    var ret,\n        name,\n        old = {}; // Remember the old values, and insert the new ones\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.apply(elem, args || []); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvdmFyL3N3YXAuanM/YTYzZSJdLCJuYW1lcyI6WyJkZWZpbmUiLCJlbGVtIiwib3B0aW9ucyIsImNhbGxiYWNrIiwiYXJncyIsInJldCIsIm5hbWUiLCJvbGQiLCJzdHlsZSIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUVuQixlQUZtQixDQUluQjs7QUFDQSxTQUFPLFVBQVVDLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCQyxRQUF6QixFQUFtQ0MsSUFBbkMsRUFBMEM7QUFDaEQsUUFBSUMsR0FBSjtBQUFBLFFBQVNDLElBQVQ7QUFBQSxRQUNDQyxHQUFHLEdBQUcsRUFEUCxDQURnRCxDQUloRDs7QUFDQSxTQUFNRCxJQUFOLElBQWNKLE9BQWQsRUFBd0I7QUFDdkJLLFNBQUcsQ0FBRUQsSUFBRixDQUFILEdBQWNMLElBQUksQ0FBQ08sS0FBTCxDQUFZRixJQUFaLENBQWQ7QUFDQUwsVUFBSSxDQUFDTyxLQUFMLENBQVlGLElBQVosSUFBcUJKLE9BQU8sQ0FBRUksSUFBRixDQUE1QjtBQUNBOztBQUVERCxPQUFHLEdBQUdGLFFBQVEsQ0FBQ00sS0FBVCxDQUFnQlIsSUFBaEIsRUFBc0JHLElBQUksSUFBSSxFQUE5QixDQUFOLENBVmdELENBWWhEOztBQUNBLFNBQU1FLElBQU4sSUFBY0osT0FBZCxFQUF3QjtBQUN2QkQsVUFBSSxDQUFDTyxLQUFMLENBQVlGLElBQVosSUFBcUJDLEdBQUcsQ0FBRUQsSUFBRixDQUF4QjtBQUNBOztBQUVELFdBQU9ELEdBQVA7QUFDQSxHQWxCRDtBQW9CQyxDQXpCSztBQUFBLG9HQUFOIiwiZmlsZSI6IjU5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG5yZXR1cm4gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///59\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(36)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, rcssNum) {\n  "use strict";\n\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n        scale,\n        maxIterations = 20,\n        currentValue = tween ? function () {\n      return tween.cur();\n    } : function () {\n      return jQuery.css(elem, prop, "");\n    },\n        initial = currentValue(),\n        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),\n        // Starting value computation is required for potential unit mismatches\n    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2; // Trust units reported by jQuery.css\n\n      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point\n\n      initialInUnit = +initial || 1;\n\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n\n        initialInUnit = initialInUnit / scale;\n      }\n\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on\n\n      valueParts = valueParts || [];\n    }\n\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\n\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n\n    return adjusted;\n  }\n\n  return adjustCSS;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvYWRqdXN0Q1NTLmpzP2E5YjAiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwicmNzc051bSIsImFkanVzdENTUyIsImVsZW0iLCJwcm9wIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJjdXIiLCJjc3MiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJub2RlVHlwZSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHVCQUZPLENBQUYsbUNBR0gsVUFBVUMsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7QUFFL0I7O0FBRUEsV0FBU0MsU0FBVCxDQUFvQkMsSUFBcEIsRUFBMEJDLElBQTFCLEVBQWdDQyxVQUFoQyxFQUE0Q0MsS0FBNUMsRUFBb0Q7QUFDbkQsUUFBSUMsUUFBSjtBQUFBLFFBQWNDLEtBQWQ7QUFBQSxRQUNDQyxhQUFhLEdBQUcsRUFEakI7QUFBQSxRQUVDQyxZQUFZLEdBQUdKLEtBQUssR0FDbkIsWUFBVztBQUNWLGFBQU9BLEtBQUssQ0FBQ0ssR0FBTixFQUFQO0FBQ0EsS0FIa0IsR0FJbkIsWUFBVztBQUNWLGFBQU9YLE1BQU0sQ0FBQ1ksR0FBUCxDQUFZVCxJQUFaLEVBQWtCQyxJQUFsQixFQUF3QixFQUF4QixDQUFQO0FBQ0EsS0FSSDtBQUFBLFFBU0NTLE9BQU8sR0FBR0gsWUFBWSxFQVR2QjtBQUFBLFFBVUNJLElBQUksR0FBR1QsVUFBVSxJQUFJQSxVQUFVLENBQUUsQ0FBRixDQUF4QixLQUFtQ0wsTUFBTSxDQUFDZSxTQUFQLENBQWtCWCxJQUFsQixJQUEyQixFQUEzQixHQUFnQyxJQUFuRSxDQVZSO0FBQUEsUUFZQztBQUNBWSxpQkFBYSxHQUFHYixJQUFJLENBQUNjLFFBQUwsS0FDYmpCLE1BQU0sQ0FBQ2UsU0FBUCxDQUFrQlgsSUFBbEIsS0FBNEJVLElBQUksS0FBSyxJQUFULElBQWlCLENBQUNELE9BRGpDLEtBRWZaLE9BQU8sQ0FBQ2lCLElBQVIsQ0FBY2xCLE1BQU0sQ0FBQ1ksR0FBUCxDQUFZVCxJQUFaLEVBQWtCQyxJQUFsQixDQUFkLENBZkY7O0FBaUJBLFFBQUtZLGFBQWEsSUFBSUEsYUFBYSxDQUFFLENBQUYsQ0FBYixLQUF1QkYsSUFBN0MsRUFBb0Q7QUFFbkQ7QUFDQTtBQUNBRCxhQUFPLEdBQUdBLE9BQU8sR0FBRyxDQUFwQixDQUptRCxDQU1uRDs7QUFDQUMsVUFBSSxHQUFHQSxJQUFJLElBQUlFLGFBQWEsQ0FBRSxDQUFGLENBQTVCLENBUG1ELENBU25EOztBQUNBQSxtQkFBYSxHQUFHLENBQUNILE9BQUQsSUFBWSxDQUE1Qjs7QUFFQSxhQUFRSixhQUFhLEVBQXJCLEVBQTBCO0FBRXpCO0FBQ0E7QUFDQVQsY0FBTSxDQUFDbUIsS0FBUCxDQUFjaEIsSUFBZCxFQUFvQkMsSUFBcEIsRUFBMEJZLGFBQWEsR0FBR0YsSUFBMUM7O0FBQ0EsWUFBSyxDQUFFLElBQUlOLEtBQU4sS0FBa0IsS0FBTUEsS0FBSyxHQUFHRSxZQUFZLEtBQUtHLE9BQWpCLElBQTRCLEdBQTFDLENBQWxCLEtBQXVFLENBQTVFLEVBQWdGO0FBQy9FSix1QkFBYSxHQUFHLENBQWhCO0FBQ0E7O0FBQ0RPLHFCQUFhLEdBQUdBLGFBQWEsR0FBR1IsS0FBaEM7QUFFQTs7QUFFRFEsbUJBQWEsR0FBR0EsYUFBYSxHQUFHLENBQWhDO0FBQ0FoQixZQUFNLENBQUNtQixLQUFQLENBQWNoQixJQUFkLEVBQW9CQyxJQUFwQixFQUEwQlksYUFBYSxHQUFHRixJQUExQyxFQXpCbUQsQ0EyQm5EOztBQUNBVCxnQkFBVSxHQUFHQSxVQUFVLElBQUksRUFBM0I7QUFDQTs7QUFFRCxRQUFLQSxVQUFMLEVBQWtCO0FBQ2pCVyxtQkFBYSxHQUFHLENBQUNBLGFBQUQsSUFBa0IsQ0FBQ0gsT0FBbkIsSUFBOEIsQ0FBOUMsQ0FEaUIsQ0FHakI7O0FBQ0FOLGNBQVEsR0FBR0YsVUFBVSxDQUFFLENBQUYsQ0FBVixHQUNWVyxhQUFhLEdBQUcsQ0FBRVgsVUFBVSxDQUFFLENBQUYsQ0FBVixHQUFrQixDQUFwQixJQUEwQkEsVUFBVSxDQUFFLENBQUYsQ0FEMUMsR0FFVixDQUFDQSxVQUFVLENBQUUsQ0FBRixDQUZaOztBQUdBLFVBQUtDLEtBQUwsRUFBYTtBQUNaQSxhQUFLLENBQUNRLElBQU4sR0FBYUEsSUFBYjtBQUNBUixhQUFLLENBQUNjLEtBQU4sR0FBY0osYUFBZDtBQUNBVixhQUFLLENBQUNlLEdBQU4sR0FBWWQsUUFBWjtBQUNBO0FBQ0Q7O0FBQ0QsV0FBT0EsUUFBUDtBQUNBOztBQUVELFNBQU9MLFNBQVA7QUFDQyxDQXpFSztBQUFBLG9HQUFOIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL3Zhci9yY3NzTnVtXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnksIHJjc3NOdW0gKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxucmV0dXJuIGFkanVzdENTUztcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // rtagName captures the name from the first start tag in a string of HTML\n  // https://html.spec.whatwg.org/multipage/syntax.html#tag-open-state\n  // https://html.spec.whatwg.org/multipage/syntax.html#tag-name-state\n\n  return /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vdmFyL3J0YWdOYW1lLmpzPzI2YzkiXSwibmFtZXMiOlsiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUNsQixlQURrQixDQUdsQjtBQUNBO0FBQ0E7O0FBQ0EsU0FBUyxnQ0FBVDtBQUNBLENBUEs7QUFBQSxvR0FBTiIsImZpbGUiOiI2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggZnVuY3Rpb24oKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8vIHJ0YWdOYW1lIGNhcHR1cmVzIHRoZSBuYW1lIGZyb20gdGhlIGZpcnN0IHN0YXJ0IHRhZyBpbiBhIHN0cmluZyBvZiBIVE1MXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3RhZy1vcGVuLXN0YXRlXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3RhZy1uYW1lLXN0YXRlXG5cdHJldHVybiAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return /^$|^module$|\\/(?:java|ecma)script/i;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vdmFyL3JzY3JpcHRUeXBlLmpzPzQ1ZTgiXSwibmFtZXMiOlsiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUNsQjs7QUFFQSxTQUFTLG9DQUFUO0FBQ0EsQ0FKSztBQUFBLG9HQUFOIiwiZmlsZSI6IjYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict"; // We have to close these tags to support XHTML (#13200)\n\n  var wrapMap = {\n    // Support: IE <=9 only\n    option: [1, "<select multiple=\'multiple\'>", "</select>"],\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, "<table>", "</table>"],\n    col: [2, "<table><colgroup>", "</colgroup></table>"],\n    tr: [2, "<table><tbody>", "</tbody></table>"],\n    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],\n    _default: [0, "", ""]\n  }; // Support: IE <=9 only\n\n  wrapMap.optgroup = wrapMap.option;\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td;\n  return wrapMap;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vd3JhcE1hcC5qcz9jMmE3Il0sIm5hbWVzIjpbImRlZmluZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUVuQixlQUZtQixDQUluQjs7QUFDQSxNQUFJQyxPQUFPLEdBQUc7QUFFYjtBQUNBQyxVQUFNLEVBQUUsQ0FBRSxDQUFGLEVBQUssOEJBQUwsRUFBcUMsV0FBckMsQ0FISztBQUtiO0FBQ0E7QUFDQTtBQUNBQyxTQUFLLEVBQUUsQ0FBRSxDQUFGLEVBQUssU0FBTCxFQUFnQixVQUFoQixDQVJNO0FBU2JDLE9BQUcsRUFBRSxDQUFFLENBQUYsRUFBSyxtQkFBTCxFQUEwQixxQkFBMUIsQ0FUUTtBQVViQyxNQUFFLEVBQUUsQ0FBRSxDQUFGLEVBQUssZ0JBQUwsRUFBdUIsa0JBQXZCLENBVlM7QUFXYkMsTUFBRSxFQUFFLENBQUUsQ0FBRixFQUFLLG9CQUFMLEVBQTJCLHVCQUEzQixDQVhTO0FBYWJDLFlBQVEsRUFBRSxDQUFFLENBQUYsRUFBSyxFQUFMLEVBQVMsRUFBVDtBQWJHLEdBQWQsQ0FMbUIsQ0FxQm5COztBQUNBTixTQUFPLENBQUNPLFFBQVIsR0FBbUJQLE9BQU8sQ0FBQ0MsTUFBM0I7QUFFQUQsU0FBTyxDQUFDUSxLQUFSLEdBQWdCUixPQUFPLENBQUNTLEtBQVIsR0FBZ0JULE9BQU8sQ0FBQ1UsUUFBUixHQUFtQlYsT0FBTyxDQUFDVyxPQUFSLEdBQWtCWCxPQUFPLENBQUNFLEtBQTdFO0FBQ0FGLFNBQU8sQ0FBQ1ksRUFBUixHQUFhWixPQUFPLENBQUNLLEVBQXJCO0FBRUEsU0FBT0wsT0FBUDtBQUNDLENBNUJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5yZXR1cm4gd3JhcE1hcDtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///63\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, nodeName) {\n  "use strict";\n\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (#15151)\n    var ret;\n\n    if (typeof context.getElementsByTagName !== "undefined") {\n      ret = context.getElementsByTagName(tag || "*");\n    } else if (typeof context.querySelectorAll !== "undefined") {\n      ret = context.querySelectorAll(tag || "*");\n    } else {\n      ret = [];\n    }\n\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n\n    return ret;\n  }\n\n  return getAll;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vZ2V0QWxsLmpzP2FmMDMiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5Iiwibm9kZU5hbWUiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwidW5kZWZpbmVkIiwibWVyZ2UiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sQ0FBRixtQ0FHSCxVQUFVQyxNQUFWLEVBQWtCQyxRQUFsQixFQUE2QjtBQUVoQzs7QUFFQSxXQUFTQyxNQUFULENBQWlCQyxPQUFqQixFQUEwQkMsR0FBMUIsRUFBZ0M7QUFFL0I7QUFDQTtBQUNBLFFBQUlDLEdBQUo7O0FBRUEsUUFBSyxPQUFPRixPQUFPLENBQUNHLG9CQUFmLEtBQXdDLFdBQTdDLEVBQTJEO0FBQzFERCxTQUFHLEdBQUdGLE9BQU8sQ0FBQ0csb0JBQVIsQ0FBOEJGLEdBQUcsSUFBSSxHQUFyQyxDQUFOO0FBRUEsS0FIRCxNQUdPLElBQUssT0FBT0QsT0FBTyxDQUFDSSxnQkFBZixLQUFvQyxXQUF6QyxFQUF1RDtBQUM3REYsU0FBRyxHQUFHRixPQUFPLENBQUNJLGdCQUFSLENBQTBCSCxHQUFHLElBQUksR0FBakMsQ0FBTjtBQUVBLEtBSE0sTUFHQTtBQUNOQyxTQUFHLEdBQUcsRUFBTjtBQUNBOztBQUVELFFBQUtELEdBQUcsS0FBS0ksU0FBUixJQUFxQkosR0FBRyxJQUFJSCxRQUFRLENBQUVFLE9BQUYsRUFBV0MsR0FBWCxDQUF6QyxFQUE0RDtBQUMzRCxhQUFPSixNQUFNLENBQUNTLEtBQVAsQ0FBYyxDQUFFTixPQUFGLENBQWQsRUFBMkJFLEdBQTNCLENBQVA7QUFDQTs7QUFFRCxXQUFPQSxHQUFQO0FBQ0E7O0FBRUQsU0FBT0gsTUFBUDtBQUNDLENBL0JLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCIsXG5cdFwiLi4vY29yZS9ub2RlTmFtZVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBub2RlTmFtZSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxucmV0dXJuIGdldEFsbDtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (dataPriv) {\n  "use strict"; // Mark scripts as having already been evaluated\n\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));\n    }\n  }\n\n  return setGlobalEval;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vc2V0R2xvYmFsRXZhbC5qcz9lMzA5Il0sIm5hbWVzIjpbImRlZmluZSIsImRhdGFQcml2Iiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJpIiwibCIsImxlbmd0aCIsInNldCIsImdldCJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sQ0FBRixtQ0FFSCxVQUFVQyxRQUFWLEVBQXFCO0FBRXhCLGVBRndCLENBSXhCOztBQUNBLFdBQVNDLGFBQVQsQ0FBd0JDLEtBQXhCLEVBQStCQyxXQUEvQixFQUE2QztBQUM1QyxRQUFJQyxDQUFDLEdBQUcsQ0FBUjtBQUFBLFFBQ0NDLENBQUMsR0FBR0gsS0FBSyxDQUFDSSxNQURYOztBQUdBLFdBQVFGLENBQUMsR0FBR0MsQ0FBWixFQUFlRCxDQUFDLEVBQWhCLEVBQXFCO0FBQ3BCSixjQUFRLENBQUNPLEdBQVQsQ0FDQ0wsS0FBSyxDQUFFRSxDQUFGLENBRE4sRUFFQyxZQUZELEVBR0MsQ0FBQ0QsV0FBRCxJQUFnQkgsUUFBUSxDQUFDUSxHQUFULENBQWNMLFdBQVcsQ0FBRUMsQ0FBRixDQUF6QixFQUFnQyxZQUFoQyxDQUhqQjtBQUtBO0FBQ0Q7O0FBRUQsU0FBT0gsYUFBUDtBQUNDLENBckJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9kYXRhL3Zhci9kYXRhUHJpdlwiXG5dLCBmdW5jdGlvbiggZGF0YVByaXYgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cbnJldHVybiBzZXRHbG9iYWxFdmFsO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///65\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(14), __webpack_require__(26), __webpack_require__(61), __webpack_require__(62), __webpack_require__(63), __webpack_require__(64), __webpack_require__(65)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, isAttached, rtagName, rscriptType, wrapMap, getAll, setGlobalEval) {\n  "use strict";\n\n  var rhtml = /<|&#?\\w+;/;\n\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n        tmp,\n        tag,\n        wrap,\n        attached,\n        j,\n        fragment = context.createDocumentFragment(),\n        nodes = [],\n        i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      elem = elems[i];\n\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === "object") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation\n\n          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\n\n          j = wrap[0];\n\n          while (j--) {\n            tmp = tmp.lastChild;\n          } // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n\n\n          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n          tmp.textContent = "";\n        }\n      }\n    } // Remove wrapper from fragment\n\n\n    fragment.textContent = "";\n    i = 0;\n\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n\n        continue;\n      }\n\n      attached = isAttached(elem); // Append to fragment\n\n      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history\n\n      if (attached) {\n        setGlobalEval(tmp);\n      } // Capture executables\n\n\n      if (scripts) {\n        j = 0;\n\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || "")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  return buildFragment;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///66\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return function (elem) {\n    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n    var view = elem.ownerDocument.defaultView;\n\n    if (!view || !view.opener) {\n      view = window;\n    }\n\n    return view.getComputedStyle(elem);\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvdmFyL2dldFN0eWxlcy5qcz85MGE3Il0sIm5hbWVzIjpbImRlZmluZSIsImVsZW0iLCJ2aWV3Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3Iiwib3BlbmVyIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEI7O0FBRUEsU0FBTyxVQUFVQyxJQUFWLEVBQWlCO0FBRXZCO0FBQ0E7QUFDQTtBQUNBLFFBQUlDLElBQUksR0FBR0QsSUFBSSxDQUFDRSxhQUFMLENBQW1CQyxXQUE5Qjs7QUFFQSxRQUFLLENBQUNGLElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNHLE1BQXBCLEVBQTZCO0FBQzVCSCxVQUFJLEdBQUdJLE1BQVA7QUFDQTs7QUFFRCxXQUFPSixJQUFJLENBQUNLLGdCQUFMLENBQXVCTixJQUF2QixDQUFQO0FBQ0EsR0FaRDtBQWFBLENBaEJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///67\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(26), __webpack_require__(89), __webpack_require__(39), __webpack_require__(67), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isAttached, rboxStyle, rnumnonpx, getStyles, support) {\n  "use strict";\n\n  function curCSS(elem, name, computed) {\n    var width,\n        minWidth,\n        maxWidth,\n        ret,\n        // Support: Firefox 51+\n    // Retrieving style before computed somehow\n    // fixes an issue with getting wrong values\n    // on detached elements\n    style = elem.style;\n    computed = computed || getStyles(elem); // getPropertyValue is needed for:\n    //   .css(\'filter\') (IE 9 only, #12537)\n    //   .css(\'--customProperty) (#3144)\n\n    if (computed) {\n      ret = computed.getPropertyValue(name) || computed[name];\n\n      if (ret === "" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      } // A tribute to the "awesome hack by Dean Edwards"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n\n\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width; // Revert the changed values\n\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n\n    return ret !== undefined ? // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + "" : ret;\n  }\n\n  return curCSS;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvY3VyQ1NTLmpzPzQyZmMiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwiaXNBdHRhY2hlZCIsInJib3hTdHlsZSIsInJudW1ub25weCIsImdldFN0eWxlcyIsInN1cHBvcnQiLCJjdXJDU1MiLCJlbGVtIiwibmFtZSIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwicmV0Iiwic3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJ0ZXN0IiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHVCQUZPLEVBR1AsdUJBSE8sRUFJUCx1QkFKTyxFQUtQLHVCQUxPLEVBTVAsdUJBTk8sQ0FBRixtQ0FPSCxVQUFVQyxNQUFWLEVBQWtCQyxVQUFsQixFQUE4QkMsU0FBOUIsRUFBeUNDLFNBQXpDLEVBQW9EQyxTQUFwRCxFQUErREMsT0FBL0QsRUFBeUU7QUFFNUU7O0FBRUEsV0FBU0MsTUFBVCxDQUFpQkMsSUFBakIsRUFBdUJDLElBQXZCLEVBQTZCQyxRQUE3QixFQUF3QztBQUN2QyxRQUFJQyxLQUFKO0FBQUEsUUFBV0MsUUFBWDtBQUFBLFFBQXFCQyxRQUFyQjtBQUFBLFFBQStCQyxHQUEvQjtBQUFBLFFBRUM7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsU0FBSyxHQUFHUCxJQUFJLENBQUNPLEtBTmQ7QUFRQUwsWUFBUSxHQUFHQSxRQUFRLElBQUlMLFNBQVMsQ0FBRUcsSUFBRixDQUFoQyxDQVR1QyxDQVd2QztBQUNBO0FBQ0E7O0FBQ0EsUUFBS0UsUUFBTCxFQUFnQjtBQUNmSSxTQUFHLEdBQUdKLFFBQVEsQ0FBQ00sZ0JBQVQsQ0FBMkJQLElBQTNCLEtBQXFDQyxRQUFRLENBQUVELElBQUYsQ0FBbkQ7O0FBRUEsVUFBS0ssR0FBRyxLQUFLLEVBQVIsSUFBYyxDQUFDWixVQUFVLENBQUVNLElBQUYsQ0FBOUIsRUFBeUM7QUFDeENNLFdBQUcsR0FBR2IsTUFBTSxDQUFDYyxLQUFQLENBQWNQLElBQWQsRUFBb0JDLElBQXBCLENBQU47QUFDQSxPQUxjLENBT2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBSyxDQUFDSCxPQUFPLENBQUNXLGNBQVIsRUFBRCxJQUE2QmIsU0FBUyxDQUFDYyxJQUFWLENBQWdCSixHQUFoQixDQUE3QixJQUFzRFgsU0FBUyxDQUFDZSxJQUFWLENBQWdCVCxJQUFoQixDQUEzRCxFQUFvRjtBQUVuRjtBQUNBRSxhQUFLLEdBQUdJLEtBQUssQ0FBQ0osS0FBZDtBQUNBQyxnQkFBUSxHQUFHRyxLQUFLLENBQUNILFFBQWpCO0FBQ0FDLGdCQUFRLEdBQUdFLEtBQUssQ0FBQ0YsUUFBakIsQ0FMbUYsQ0FPbkY7O0FBQ0FFLGFBQUssQ0FBQ0gsUUFBTixHQUFpQkcsS0FBSyxDQUFDRixRQUFOLEdBQWlCRSxLQUFLLENBQUNKLEtBQU4sR0FBY0csR0FBaEQ7QUFDQUEsV0FBRyxHQUFHSixRQUFRLENBQUNDLEtBQWYsQ0FUbUYsQ0FXbkY7O0FBQ0FJLGFBQUssQ0FBQ0osS0FBTixHQUFjQSxLQUFkO0FBQ0FJLGFBQUssQ0FBQ0gsUUFBTixHQUFpQkEsUUFBakI7QUFDQUcsYUFBSyxDQUFDRixRQUFOLEdBQWlCQSxRQUFqQjtBQUNBO0FBQ0Q7O0FBRUQsV0FBT0MsR0FBRyxLQUFLSyxTQUFSLEdBRU47QUFDQTtBQUNBTCxPQUFHLEdBQUcsRUFKQSxHQUtOQSxHQUxEO0FBTUE7O0FBRUQsU0FBT1AsTUFBUDtBQUNDLENBaEVLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCIsXG5cdFwiLi4vY29yZS9pc0F0dGFjaGVkXCIsXG5cdFwiLi92YXIvcmJveFN0eWxlXCIsXG5cdFwiLi92YXIvcm51bW5vbnB4XCIsXG5cdFwiLi92YXIvZ2V0U3R5bGVzXCIsXG5cdFwiLi9zdXBwb3J0XCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnksIGlzQXR0YWNoZWQsIHJib3hTdHlsZSwgcm51bW5vbnB4LCBnZXRTdHlsZXMsIHN1cHBvcnQgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxucmV0dXJuIGN1ckNTUztcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///68\n')},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  \"use strict\";\n\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we'll check on the first run if it's really needed.\n    return {\n      get: function () {\n        if (conditionFn()) {\n          // Hook not needed (or it's not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        } // Hook needed; redefine it so that the support test is not executed again.\n\n\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n\n  return addGetHookIf;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvYWRkR2V0SG9va0lmLmpzPzdkYzkiXSwibmFtZXMiOlsiZGVmaW5lIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJnZXQiLCJhcHBseSIsImFyZ3VtZW50cyJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFFbkI7O0FBRUEsV0FBU0MsWUFBVCxDQUF1QkMsV0FBdkIsRUFBb0NDLE1BQXBDLEVBQTZDO0FBRTVDO0FBQ0EsV0FBTztBQUNOQyxTQUFHLEVBQUUsWUFBVztBQUNmLFlBQUtGLFdBQVcsRUFBaEIsRUFBcUI7QUFFcEI7QUFDQTtBQUNBLGlCQUFPLEtBQUtFLEdBQVo7QUFDQTtBQUNBLFNBUGMsQ0FTZjs7O0FBQ0EsZUFBTyxDQUFFLEtBQUtBLEdBQUwsR0FBV0QsTUFBYixFQUFzQkUsS0FBdEIsQ0FBNkIsSUFBN0IsRUFBbUNDLFNBQW5DLENBQVA7QUFDQTtBQVpLLEtBQVA7QUFjQTs7QUFFRCxTQUFPTCxZQUFQO0FBRUMsQ0F6Qks7QUFBQSxvR0FBTiIsImZpbGUiOiI2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggZnVuY3Rpb24oKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxucmV0dXJuIGFkZEdldEhvb2tJZjtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, jQuery) {\n  "use strict";\n\n  var cssPrefixes = ["Webkit", "Moz", "ms"],\n      emptyStyle = document.createElement("div").style,\n      vendorProps = {}; // Return a vendor-prefixed property or undefined\n\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n\n\n  function finalPropName(name) {\n    var final = jQuery.cssProps[name] || vendorProps[name];\n\n    if (final) {\n      return final;\n    }\n\n    if (name in emptyStyle) {\n      return name;\n    }\n\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n\n  return finalPropName;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvZmluYWxQcm9wTmFtZS5qcz82MzEwIl0sIm5hbWVzIjpbImRlZmluZSIsImRvY3VtZW50IiwialF1ZXJ5IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwidmVuZG9yUHJvcHMiLCJ2ZW5kb3JQcm9wTmFtZSIsIm5hbWUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImkiLCJsZW5ndGgiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCxzQkFGTyxDQUFGLG1DQUdILFVBQVVDLFFBQVYsRUFBb0JDLE1BQXBCLEVBQTZCO0FBRWhDOztBQUVBLE1BQUlDLFdBQVcsR0FBRyxDQUFFLFFBQUYsRUFBWSxLQUFaLEVBQW1CLElBQW5CLENBQWxCO0FBQUEsTUFDQ0MsVUFBVSxHQUFHSCxRQUFRLENBQUNJLGFBQVQsQ0FBd0IsS0FBeEIsRUFBZ0NDLEtBRDlDO0FBQUEsTUFFQ0MsV0FBVyxHQUFHLEVBRmYsQ0FKZ0MsQ0FRaEM7O0FBQ0EsV0FBU0MsY0FBVCxDQUF5QkMsSUFBekIsRUFBZ0M7QUFFL0I7QUFDQSxRQUFJQyxPQUFPLEdBQUdELElBQUksQ0FBRSxDQUFGLENBQUosQ0FBVUUsV0FBVixLQUEwQkYsSUFBSSxDQUFDRyxLQUFMLENBQVksQ0FBWixDQUF4QztBQUFBLFFBQ0NDLENBQUMsR0FBR1YsV0FBVyxDQUFDVyxNQURqQjs7QUFHQSxXQUFRRCxDQUFDLEVBQVQsRUFBYztBQUNiSixVQUFJLEdBQUdOLFdBQVcsQ0FBRVUsQ0FBRixDQUFYLEdBQW1CSCxPQUExQjs7QUFDQSxVQUFLRCxJQUFJLElBQUlMLFVBQWIsRUFBMEI7QUFDekIsZUFBT0ssSUFBUDtBQUNBO0FBQ0Q7QUFDRCxHQXJCK0IsQ0F1QmhDOzs7QUFDQSxXQUFTTSxhQUFULENBQXdCTixJQUF4QixFQUErQjtBQUM5QixRQUFJTyxLQUFLLEdBQUdkLE1BQU0sQ0FBQ2UsUUFBUCxDQUFpQlIsSUFBakIsS0FBMkJGLFdBQVcsQ0FBRUUsSUFBRixDQUFsRDs7QUFFQSxRQUFLTyxLQUFMLEVBQWE7QUFDWixhQUFPQSxLQUFQO0FBQ0E7O0FBQ0QsUUFBS1AsSUFBSSxJQUFJTCxVQUFiLEVBQTBCO0FBQ3pCLGFBQU9LLElBQVA7QUFDQTs7QUFDRCxXQUFPRixXQUFXLENBQUVFLElBQUYsQ0FBWCxHQUFzQkQsY0FBYyxDQUFFQyxJQUFGLENBQWQsSUFBMEJBLElBQXZEO0FBQ0E7O0FBRUQsU0FBT00sYUFBUDtBQUVDLENBekNLO0FBQUEsb0dBQU4iLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi92YXIvZG9jdW1lbnRcIixcblx0XCIuLi9jb3JlXCJcbl0sIGZ1bmN0aW9uKCBkb2N1bWVudCwgalF1ZXJ5ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5yZXR1cm4gZmluYWxQcm9wTmFtZTtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///70\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(41), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, support) {\n  "use strict";\n\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n      rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function (name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function (name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set properties on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        return elem[name] = value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function (elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn\'t always return the\n          // correct value when it hasn\'t been explicitly set\n          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n          // Use proper attribute retrieval(#12072)\n          var tabindex = jQuery.find.attr(elem, "tabindex");\n\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      "for": "htmlFor",\n      "class": "className"\n    }\n  }); // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule "no-unused-expressions" is disabled for this code\n  // since it considers such accessions noop\n\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function (elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n\n        return null;\n      },\n      set: function (elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent) {\n          parent.selectedIndex;\n\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n\n  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///71\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return Date.now();\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hamF4L3Zhci9ub25jZS5qcz9mZWZjIl0sIm5hbWVzIjpbImRlZmluZSIsIkRhdGUiLCJub3ciXSwibWFwcGluZ3MiOiJBQUFBQSxxRUFBUSxZQUFXO0FBQ2xCOztBQUVBLFNBQU9DLElBQUksQ0FBQ0MsR0FBTCxFQUFQO0FBQ0EsQ0FKSztBQUFBLG9HQUFOIiwiZmlsZSI6IjcyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIERhdGUubm93KCk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return /\\?/;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hamF4L3Zhci9ycXVlcnkuanM/MGRjZiJdLCJuYW1lcyI6WyJkZWZpbmUiXSwibWFwcGluZ3MiOiJBQUFBQSxxRUFBUSxZQUFXO0FBQ2xCOztBQUVBLFNBQVMsSUFBVDtBQUNBLENBSks7QUFBQSxvR0FBTiIsImZpbGUiOiI3My5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggZnVuY3Rpb24oKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHJldHVybiAoIC9cXD8vICk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(14), __webpack_require__(38), __webpack_require__(3), __webpack_require__(8), __webpack_require__(15), // filter\n__webpack_require__(71)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, rcheckableType, isFunction) {\n  "use strict";\n\n  var rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === "object") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  } // Serialize an array of form elements or a set of\n  // key/values into a query string\n\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function (key, valueOrFunction) {\n      // If value is a function, invoke it and use its return value\n      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);\n    };\n\n    if (a == null) {\n      return "";\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the "old" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join("&");\n  };\n\n  jQuery.fn.extend({\n    serialize: function () {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function () {\n      return this.map(function () {\n        // Can add propHook for "elements" to filter or add form elements\n        var elements = jQuery.prop(this, "elements");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (i, elem) {\n        var val = jQuery(this).val();\n\n        if (val == null) {\n          return null;\n        }\n\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, "\\r\\n")\n            };\n          });\n        }\n\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, "\\r\\n")\n        };\n      }).get();\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74\n')},function(module,exports,__webpack_require__){eval("// Backbone.Radio v2.0.0\n(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(29), __webpack_require__(4)) : undefined;\n})(this, function (_, Backbone) {\n  'use strict';\n\n  _ = 'default' in _ ? _['default'] : _;\n  Backbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n  };\n\n  var previousRadio = Backbone.Radio;\n  var Radio = Backbone.Radio = {};\n  Radio.VERSION = '2.0.0'; // This allows you to run multiple instances of Radio on the same\n  // webapp. After loading the new version, call `noConflict()` to\n  // get a reference to it. At the same time the old version will be\n  // returned to Backbone.Radio.\n\n  Radio.noConflict = function () {\n    Backbone.Radio = previousRadio;\n    return this;\n  }; // Whether or not we're in DEBUG mode or not. DEBUG mode helps you\n  // get around the issues of lack of warnings when events are mis-typed.\n\n\n  Radio.DEBUG = false; // Format debug text.\n\n  Radio._debugText = function (warning, eventName, channelName) {\n    return warning + (channelName ? ' on the ' + channelName + ' channel' : '') + ': \"' + eventName + '\"';\n  }; // This is the method that's called when an unregistered event was called.\n  // By default, it logs warning to the console. By overriding this you could\n  // make it throw an Error, for instance. This would make firing a nonexistent event\n  // have the same consequence as firing a nonexistent method on an Object.\n\n\n  Radio.debugLog = function (warning, eventName, channelName) {\n    if (Radio.DEBUG && console && console.warn) {\n      console.warn(Radio._debugText(warning, eventName, channelName));\n    }\n  };\n\n  var eventSplitter = /\\s+/; // An internal method used to handle Radio's method overloading for Requests.\n  // It's borrowed from Backbone.Events. It differs from Backbone's overload\n  // API (which is used in Backbone.Events) in that it doesn't support space-separated\n  // event names.\n\n  Radio._eventsApi = function (obj, action, name, rest) {\n    if (!name) {\n      return false;\n    }\n\n    var results = {}; // Handle event maps.\n\n    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n      for (var key in name) {\n        var result = obj[action].apply(obj, [key, name[key]].concat(rest));\n        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result;\n      }\n\n      return results;\n    } // Handle space separated event names.\n\n\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n\n      for (var i = 0, l = names.length; i < l; i++) {\n        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest));\n      }\n\n      return results;\n    }\n\n    return false;\n  }; // An optimized way to execute callbacks.\n\n\n  Radio._callHandler = function (callback, context, args) {\n    var a1 = args[0],\n        a2 = args[1],\n        a3 = args[2];\n\n    switch (args.length) {\n      case 0:\n        return callback.call(context);\n\n      case 1:\n        return callback.call(context, a1);\n\n      case 2:\n        return callback.call(context, a1, a2);\n\n      case 3:\n        return callback.call(context, a1, a2, a3);\n\n      default:\n        return callback.apply(context, args);\n    }\n  }; // A helper used by `off` methods to the handler from the store\n\n\n  function removeHandler(store, name, callback, context) {\n    var event = store[name];\n\n    if ((!callback || callback === event.callback || callback === event.callback._callback) && (!context || context === event.context)) {\n      delete store[name];\n      return true;\n    }\n  }\n\n  function removeHandlers(store, name, callback, context) {\n    store || (store = {});\n    var names = name ? [name] : _.keys(store);\n    var matched = false;\n\n    for (var i = 0, length = names.length; i < length; i++) {\n      name = names[i]; // If there's no event by this name, log it and continue\n      // with the loop\n\n      if (!store[name]) {\n        continue;\n      }\n\n      if (removeHandler(store, name, callback, context)) {\n        matched = true;\n      }\n    }\n\n    return matched;\n  }\n  /*\n   * tune-in\n   * -------\n   * Get console logs of a channel's activity\n   *\n   */\n\n\n  var _logs = {}; // This is to produce an identical function in both tuneIn and tuneOut,\n  // so that Backbone.Events unregisters it.\n\n  function _partial(channelName) {\n    return _logs[channelName] || (_logs[channelName] = _.bind(Radio.log, Radio, channelName));\n  }\n\n  _.extend(Radio, {\n    // Log information about the channel and event\n    log: function log(channelName, eventName) {\n      if (typeof console === 'undefined') {\n        return;\n      }\n\n      var args = _.toArray(arguments).slice(2);\n\n      console.log('[' + channelName + '] \"' + eventName + '\"', args);\n    },\n    // Logs all events on this channel to the console. It sets an\n    // internal value on the channel telling it we're listening,\n    // then sets a listener on the Backbone.Events\n    tuneIn: function tuneIn(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = true;\n      channel.on('all', _partial(channelName));\n      return this;\n    },\n    // Stop logging all of the activities on this channel to the console\n    tuneOut: function tuneOut(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = false;\n      channel.off('all', _partial(channelName));\n      delete _logs[channelName];\n      return this;\n    }\n  });\n  /*\n   * Backbone.Radio.Requests\n   * -----------------------\n   * A messaging system for requesting data.\n   *\n   */\n\n\n  function makeCallback(callback) {\n    return _.isFunction(callback) ? callback : function () {\n      return callback;\n    };\n  }\n\n  Radio.Requests = {\n    // Make a request\n    request: function request(name) {\n      var args = _.toArray(arguments).slice(1);\n\n      var results = Radio._eventsApi(this, 'request', name, args);\n\n      if (results) {\n        return results;\n      }\n\n      var channelName = this.channelName;\n      var requests = this._requests; // Check if we should log the request, and if so, do it\n\n      if (channelName && this._tunedIn) {\n        Radio.log.apply(this, [channelName, name].concat(args));\n      } // If the request isn't handled, log it in DEBUG mode and exit\n\n\n      if (requests && (requests[name] || requests['default'])) {\n        var handler = requests[name] || requests['default'];\n        args = requests[name] ? args : arguments;\n        return Radio._callHandler(handler.callback, handler.context, args);\n      } else {\n        Radio.debugLog('An unhandled request was fired', name, channelName);\n      }\n    },\n    // Set up a handler for a request\n    reply: function reply(name, callback, context) {\n      if (Radio._eventsApi(this, 'reply', name, [callback, context])) {\n        return this;\n      }\n\n      this._requests || (this._requests = {});\n\n      if (this._requests[name]) {\n        Radio.debugLog('A request was overwritten', name, this.channelName);\n      }\n\n      this._requests[name] = {\n        callback: makeCallback(callback),\n        context: context || this\n      };\n      return this;\n    },\n    // Set up a handler that can only be requested once\n    replyOnce: function replyOnce(name, callback, context) {\n      if (Radio._eventsApi(this, 'replyOnce', name, [callback, context])) {\n        return this;\n      }\n\n      var self = this;\n\n      var once = _.once(function () {\n        self.stopReplying(name);\n        return makeCallback(callback).apply(this, arguments);\n      });\n\n      return this.reply(name, once, context);\n    },\n    // Remove handler(s)\n    stopReplying: function stopReplying(name, callback, context) {\n      if (Radio._eventsApi(this, 'stopReplying', name)) {\n        return this;\n      } // Remove everything if there are no arguments passed\n\n\n      if (!name && !callback && !context) {\n        delete this._requests;\n      } else if (!removeHandlers(this._requests, name, callback, context)) {\n        Radio.debugLog('Attempted to remove the unregistered request', name, this.channelName);\n      }\n\n      return this;\n    }\n  };\n  /*\n   * Backbone.Radio.channel\n   * ----------------------\n   * Get a reference to a channel by name.\n   *\n   */\n\n  Radio._channels = {};\n\n  Radio.channel = function (channelName) {\n    if (!channelName) {\n      throw new Error('You must provide a name for the channel.');\n    }\n\n    if (Radio._channels[channelName]) {\n      return Radio._channels[channelName];\n    } else {\n      return Radio._channels[channelName] = new Radio.Channel(channelName);\n    }\n  };\n  /*\n   * Backbone.Radio.Channel\n   * ----------------------\n   * A Channel is an object that extends from Backbone.Events,\n   * and Radio.Requests.\n   *\n   */\n\n\n  Radio.Channel = function (channelName) {\n    this.channelName = channelName;\n  };\n\n  _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {\n    // Remove all handlers from the messaging systems of this channel\n    reset: function reset() {\n      this.off();\n      this.stopListening();\n      this.stopReplying();\n      return this;\n    }\n  });\n  /*\n   * Top-level API\n   * -------------\n   * Supplies the 'top-level API' for working with Channels directly\n   * from Backbone.Radio.\n   *\n   */\n\n\n  var channel;\n  var args;\n  var systems = [Backbone.Events, Radio.Requests];\n\n  _.each(systems, function (system) {\n    _.each(system, function (method, methodName) {\n      Radio[methodName] = function (channelName) {\n        args = _.toArray(arguments).slice(1);\n        channel = this.channel(channelName);\n        return channel[methodName].apply(channel, args);\n      };\n    });\n  });\n\n  Radio.reset = function (channelName) {\n    var channels = !channelName ? this._channels : [this._channels[channelName]];\n\n    _.each(channels, function (channel) {\n      channel.reset();\n    });\n  };\n\n  return Radio;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI3NS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///75\n")},function(module,exports,__webpack_require__){eval("/**\n* @license\n* MarionetteJS (Backbone.Marionette)\n* ----------------------------------\n* v4.1.2\n*\n* Copyright (c)2019 Derick Bailey, Muted Solutions, LLC.\n* Distributed under MIT license\n*\n* http://marionettejs.com\n*/\n(function (global, factory) {\n   true ? factory(exports, __webpack_require__(4), __webpack_require__(29), __webpack_require__(75)) : undefined;\n})(this, function (exports, Backbone, _, Radio) {\n  'use strict';\n\n  Backbone = Backbone && Backbone.hasOwnProperty('default') ? Backbone['default'] : Backbone;\n  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;\n  Radio = Radio && Radio.hasOwnProperty('default') ? Radio['default'] : Radio;\n  var version = \"4.1.2\"; //Internal utility for creating context style global utils\n\n  var proxy = function proxy(method) {\n    return function (context) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return method.apply(context, args);\n    };\n  }; // Marionette.extend\n\n\n  var extend = Backbone.Model.extend; // ----------------------\n  // Pass in a mapping of events => functions or function names\n  // and return a mapping of events => functions\n\n  var normalizeMethods = function normalizeMethods(hash) {\n    var _this = this;\n\n    if (!hash) {\n      return;\n    }\n\n    return _.reduce(hash, function (normalizedHash, method, name) {\n      if (!_.isFunction(method)) {\n        method = _this[method];\n      }\n\n      if (method) {\n        normalizedHash[name] = method;\n      }\n\n      return normalizedHash;\n    }, {});\n  }; // Error\n\n\n  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number', 'url'];\n  var MarionetteError = extend.call(Error, {\n    urlRoot: \"http://marionettejs.com/docs/v\".concat(version, \"/\"),\n    url: '',\n    constructor: function constructor(options) {\n      var error = Error.call(this, options.message);\n\n      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n      if (Error.captureStackTrace) {\n        this.captureStackTrace();\n      }\n\n      this.url = this.urlRoot + this.url;\n    },\n    captureStackTrace: function captureStackTrace() {\n      Error.captureStackTrace(this, MarionetteError);\n    },\n    toString: function toString() {\n      return \"\".concat(this.name, \": \").concat(this.message, \" See: \").concat(this.url);\n    }\n  }); // Bind Entity Events & Unbind Entity Events\n\n  function normalizeBindings(context, bindings) {\n    if (!_.isObject(bindings)) {\n      throw new MarionetteError({\n        message: 'Bindings must be an object.',\n        url: 'common.html#bindevents'\n      });\n    }\n\n    return normalizeMethods.call(context, bindings);\n  }\n\n  function bindEvents(entity, bindings) {\n    if (!entity || !bindings) {\n      return this;\n    }\n\n    this.listenTo(entity, normalizeBindings(this, bindings));\n    return this;\n  }\n\n  function unbindEvents(entity, bindings) {\n    if (!entity) {\n      return this;\n    }\n\n    if (!bindings) {\n      this.stopListening(entity);\n      return this;\n    }\n\n    this.stopListening(entity, normalizeBindings(this, bindings));\n    return this;\n  } // Export Public API\n  // Bind/Unbind Radio Requests\n\n\n  function normalizeBindings$1(context, bindings) {\n    if (!_.isObject(bindings)) {\n      throw new MarionetteError({\n        message: 'Bindings must be an object.',\n        url: 'common.html#bindrequests'\n      });\n    }\n\n    return normalizeMethods.call(context, bindings);\n  }\n\n  function bindRequests(channel, bindings) {\n    if (!channel || !bindings) {\n      return this;\n    }\n\n    channel.reply(normalizeBindings$1(this, bindings), this);\n    return this;\n  }\n\n  function unbindRequests(channel, bindings) {\n    if (!channel) {\n      return this;\n    }\n\n    if (!bindings) {\n      channel.stopReplying(null, null, this);\n      return this;\n    }\n\n    channel.stopReplying(normalizeBindings$1(this, bindings));\n    return this;\n  } // Marionette.getOption\n  // --------------------\n  // Retrieve an object, function or other value from the\n  // object or its `options`, with `options` taking precedence.\n\n\n  var getOption = function getOption(optionName) {\n    if (!optionName) {\n      return;\n    }\n\n    if (this.options && this.options[optionName] !== undefined) {\n      return this.options[optionName];\n    } else {\n      return this[optionName];\n    }\n  };\n\n  var mergeOptions = function mergeOptions(options, keys) {\n    var _this = this;\n\n    if (!options) {\n      return;\n    }\n\n    _.each(keys, function (key) {\n      var option = options[key];\n\n      if (option !== undefined) {\n        _this[key] = option;\n      }\n    });\n  }; // DOM Refresh\n\n\n  function triggerMethodChildren(view, event, shouldTrigger) {\n    if (!view._getImmediateChildren) {\n      return;\n    }\n\n    _.each(view._getImmediateChildren(), function (child) {\n      if (!shouldTrigger(child)) {\n        return;\n      }\n\n      child.triggerMethod(event, child);\n    });\n  }\n\n  function shouldTriggerAttach(view) {\n    return !view._isAttached;\n  }\n\n  function shouldAttach(view) {\n    if (!shouldTriggerAttach(view)) {\n      return false;\n    }\n\n    view._isAttached = true;\n    return true;\n  }\n\n  function shouldTriggerDetach(view) {\n    return view._isAttached;\n  }\n\n  function shouldDetach(view) {\n    view._isAttached = false;\n    return true;\n  }\n\n  function triggerDOMRefresh(view) {\n    if (view._isAttached && view._isRendered) {\n      view.triggerMethod('dom:refresh', view);\n    }\n  }\n\n  function triggerDOMRemove(view) {\n    if (view._isAttached && view._isRendered) {\n      view.triggerMethod('dom:remove', view);\n    }\n  }\n\n  function handleBeforeAttach() {\n    triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n  }\n\n  function handleAttach() {\n    triggerMethodChildren(this, 'attach', shouldAttach);\n    triggerDOMRefresh(this);\n  }\n\n  function handleBeforeDetach() {\n    triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n    triggerDOMRemove(this);\n  }\n\n  function handleDetach() {\n    triggerMethodChildren(this, 'detach', shouldDetach);\n  }\n\n  function handleBeforeRender() {\n    triggerDOMRemove(this);\n  }\n\n  function handleRender() {\n    triggerDOMRefresh(this);\n  } // Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n  // whenever a rendered view is attached or an attached view is rendered.\n\n\n  function monitorViewEvents(view) {\n    if (view._areViewEventsMonitored || view.monitorViewEvents === false) {\n      return;\n    }\n\n    view._areViewEventsMonitored = true;\n    view.on({\n      'before:attach': handleBeforeAttach,\n      'attach': handleAttach,\n      'before:detach': handleBeforeDetach,\n      'detach': handleDetach,\n      'before:render': handleBeforeRender,\n      'render': handleRender\n    });\n  } // Trigger Method\n\n\n  var splitter = /(^|:)(\\w)/gi; // Only calc getOnMethodName once\n\n  var methodCache = {}; // take the event section (\"section1:section2:section3\")\n  // and turn it in to uppercase name onSection1Section2Section3\n\n  function getEventName(match, prefix, eventName) {\n    return eventName.toUpperCase();\n  }\n\n  var getOnMethodName = function getOnMethodName(event) {\n    if (!methodCache[event]) {\n      methodCache[event] = 'on' + event.replace(splitter, getEventName);\n    }\n\n    return methodCache[event];\n  }; // Trigger an event and/or a corresponding method name. Examples:\n  //\n  // `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n  // call the \"onFoo\" method.\n  //\n  // `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n  // call the \"onFooBar\" method.\n\n\n  function triggerMethod(event) {\n    // get the method name from the event name\n    var methodName = getOnMethodName(event);\n    var method = getOption.call(this, methodName);\n    var result; // call the onMethodName if it exists\n\n    if (_.isFunction(method)) {\n      // pass all args, except the event name\n      result = method.apply(this, _.drop(arguments));\n    } // trigger the event\n\n\n    this.trigger.apply(this, arguments);\n    return result;\n  }\n\n  var Events = {\n    triggerMethod: triggerMethod\n  };\n  var CommonMixin = {\n    // Imports the \"normalizeMethods\" to transform hashes of\n    // events=>function references/names to a hash of events=>function references\n    normalizeMethods: normalizeMethods,\n    _setOptions: function _setOptions(options, classOptions) {\n      this.options = _.extend({}, _.result(this, 'options'), options);\n      this.mergeOptions(options, classOptions);\n    },\n    // A handy way to merge passed-in options onto the instance\n    mergeOptions: mergeOptions,\n    // Enable getting options from this or this.options by name.\n    getOption: getOption,\n    // Enable binding view's events from another entity.\n    bindEvents: bindEvents,\n    // Enable unbinding view's events from another entity.\n    unbindEvents: unbindEvents,\n    // Enable binding view's requests.\n    bindRequests: bindRequests,\n    // Enable unbinding view's requests.\n    unbindRequests: unbindRequests,\n    triggerMethod: triggerMethod\n  };\n\n  _.extend(CommonMixin, Backbone.Events);\n\n  var DestroyMixin = {\n    _isDestroyed: false,\n    isDestroyed: function isDestroyed() {\n      return this._isDestroyed;\n    },\n    destroy: function destroy(options) {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:destroy', this, options);\n      this._isDestroyed = true;\n      this.triggerMethod('destroy', this, options);\n      this.stopListening();\n      return this;\n    }\n  }; // - channelName\n  // - radioEvents\n  // - radioRequests\n\n  var RadioMixin = {\n    _initRadio: function _initRadio() {\n      var channelName = _.result(this, 'channelName');\n\n      if (!channelName) {\n        return;\n      }\n      /* istanbul ignore next */\n\n\n      if (!Radio) {\n        throw new MarionetteError({\n          message: 'The dependency \"backbone.radio\" is missing.',\n          url: 'backbone.radio.html#marionette-integration'\n        });\n      }\n\n      var channel = this._channel = Radio.channel(channelName);\n\n      var radioEvents = _.result(this, 'radioEvents');\n\n      this.bindEvents(channel, radioEvents);\n\n      var radioRequests = _.result(this, 'radioRequests');\n\n      this.bindRequests(channel, radioRequests);\n      this.on('destroy', this._destroyRadio);\n    },\n    _destroyRadio: function _destroyRadio() {\n      this._channel.stopReplying(null, null, this);\n    },\n    getChannel: function getChannel() {\n      return this._channel;\n    }\n  }; // Object\n\n  var ClassOptions = ['channelName', 'radioEvents', 'radioRequests']; // Object borrows many conventions and utilities from Backbone.\n\n  var MarionetteObject = function MarionetteObject(options) {\n    this._setOptions(options, ClassOptions);\n\n    this.cid = _.uniqueId(this.cidPrefix);\n\n    this._initRadio();\n\n    this.initialize.apply(this, arguments);\n  };\n\n  MarionetteObject.extend = extend; // Object Methods\n  // --------------\n\n  _.extend(MarionetteObject.prototype, CommonMixin, DestroyMixin, RadioMixin, {\n    cidPrefix: 'mno',\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {}\n  }); // Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n\n\n  var _invoke = _.invokeMap || _.invoke; // - behaviors\n  // Takes care of getting the behavior class\n  // given options and a key.\n  // If a user passes in options.behaviorClass\n  // default to using that.\n  // If a user passes in a Behavior Class directly, use that\n  // Otherwise an error is thrown\n\n\n  function getBehaviorClass(options) {\n    if (options.behaviorClass) {\n      return {\n        BehaviorClass: options.behaviorClass,\n        options: options\n      };\n    } //treat functions as a Behavior constructor\n\n\n    if (_.isFunction(options)) {\n      return {\n        BehaviorClass: options,\n        options: {}\n      };\n    }\n\n    throw new MarionetteError({\n      message: 'Unable to get behavior class. A Behavior constructor should be passed directly or as behaviorClass property of options',\n      url: 'marionette.behavior.html#defining-and-attaching-behaviors'\n    });\n  } // Iterate over the behaviors object, for each behavior\n  // instantiate it and get its grouped behaviors.\n  // This accepts a list of behaviors in either an object or array form\n\n\n  function parseBehaviors(view, behaviors, allBehaviors) {\n    return _.reduce(behaviors, function (reducedBehaviors, behaviorDefiniton) {\n      var _getBehaviorClass = getBehaviorClass(behaviorDefiniton),\n          BehaviorClass = _getBehaviorClass.BehaviorClass,\n          options = _getBehaviorClass.options;\n\n      var behavior = new BehaviorClass(options, view);\n      reducedBehaviors.push(behavior);\n      return parseBehaviors(view, _.result(behavior, 'behaviors'), reducedBehaviors);\n    }, allBehaviors);\n  }\n\n  var BehaviorsMixin = {\n    _initBehaviors: function _initBehaviors() {\n      this._behaviors = parseBehaviors(this, _.result(this, 'behaviors'), []);\n    },\n    _getBehaviorTriggers: function _getBehaviorTriggers() {\n      var triggers = _invoke(this._behaviors, '_getTriggers');\n\n      return _.reduce(triggers, function (memo, _triggers) {\n        return _.extend(memo, _triggers);\n      }, {});\n    },\n    _getBehaviorEvents: function _getBehaviorEvents() {\n      var events = _invoke(this._behaviors, '_getEvents');\n\n      return _.reduce(events, function (memo, _events) {\n        return _.extend(memo, _events);\n      }, {});\n    },\n    // proxy behavior $el to the view's $el.\n    _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n      _invoke(this._behaviors, 'proxyViewProperties');\n    },\n    // delegate modelEvents and collectionEvents\n    _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n      _invoke(this._behaviors, 'delegateEntityEvents');\n    },\n    // undelegate modelEvents and collectionEvents\n    _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n      _invoke(this._behaviors, 'undelegateEntityEvents');\n    },\n    _destroyBehaviors: function _destroyBehaviors(options) {\n      // Call destroy on each behavior after\n      // destroying the view.\n      // This unbinds event listeners\n      // that behaviors have registered for.\n      _invoke(this._behaviors, 'destroy', options);\n    },\n    // Remove a behavior\n    _removeBehavior: function _removeBehavior(behavior) {\n      // Don't worry about the clean up if the view is destroyed\n      if (this._isDestroyed) {\n        return;\n      } // Remove behavior-only triggers and events\n\n\n      this.undelegate(\".trig\".concat(behavior.cid, \" .\").concat(behavior.cid));\n      this._behaviors = _.without(this._behaviors, behavior);\n    },\n    _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n      _invoke(this._behaviors, 'bindUIElements');\n    },\n    _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n      _invoke(this._behaviors, 'unbindUIElements');\n    },\n    _triggerEventOnBehaviors: function _triggerEventOnBehaviors(eventName, view, options) {\n      _invoke(this._behaviors, 'triggerMethod', eventName, view, options);\n    }\n  }; // - collectionEvents\n  // - modelEvents\n\n  var DelegateEntityEventsMixin = {\n    // Handle `modelEvents`, and `collectionEvents` configuration\n    _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n      if (model) {\n        this._modelEvents = _.result(this, 'modelEvents');\n        this.bindEvents(model, this._modelEvents);\n      }\n\n      if (collection) {\n        this._collectionEvents = _.result(this, 'collectionEvents');\n        this.bindEvents(collection, this._collectionEvents);\n      }\n    },\n    // Remove any previously delegate entity events\n    _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n      if (this._modelEvents) {\n        this.unbindEvents(model, this._modelEvents);\n        delete this._modelEvents;\n      }\n\n      if (this._collectionEvents) {\n        this.unbindEvents(collection, this._collectionEvents);\n        delete this._collectionEvents;\n      }\n    },\n    // Remove cached event handlers\n    _deleteEntityEventHandlers: function _deleteEntityEventHandlers() {\n      delete this._modelEvents;\n      delete this._collectionEvents;\n    }\n  }; // - template\n  // - templateContext\n\n  var TemplateRenderMixin = {\n    // Internal method to render the template with the serialized data\n    // and template context\n    _renderTemplate: function _renderTemplate(template) {\n      // Add in entity data and template context\n      var data = this.mixinTemplateContext(this.serializeData()) || {}; // Render and add to el\n\n      var html = this._renderHtml(template, data);\n\n      if (typeof html !== 'undefined') {\n        this.attachElContent(html);\n      }\n    },\n    // Get the template for this view instance.\n    // You can set a `template` attribute in the view definition\n    // or pass a `template: TemplateFunction` parameter in\n    // to the constructor options.\n    getTemplate: function getTemplate() {\n      return this.template;\n    },\n    // Mix in template context methods. Looks for a\n    // `templateContext` attribute, which can either be an\n    // object literal, or a function that returns an object\n    // literal. All methods and attributes from this object\n    // are copies to the object passed in.\n    mixinTemplateContext: function mixinTemplateContext(serializedData) {\n      var templateContext = _.result(this, 'templateContext');\n\n      if (!templateContext) {\n        return serializedData;\n      }\n\n      if (!serializedData) {\n        return templateContext;\n      }\n\n      return _.extend({}, serializedData, templateContext);\n    },\n    // Serialize the view's model *or* collection, if\n    // it exists, for the template\n    serializeData: function serializeData() {\n      // If we have a model, we serialize that\n      if (this.model) {\n        return this.serializeModel();\n      } // Otherwise, we serialize the collection,\n      // making it available under the `items` property\n\n\n      if (this.collection) {\n        return {\n          items: this.serializeCollection()\n        };\n      }\n    },\n    // Prepares the special `model` property of a view\n    // for being displayed in the template. Override this if\n    // you need a custom transformation for your view's model\n    serializeModel: function serializeModel() {\n      return this.model.attributes;\n    },\n    // Serialize a collection\n    serializeCollection: function serializeCollection() {\n      return _.map(this.collection.models, function (model) {\n        return model.attributes;\n      });\n    },\n    // Renders the data into the template\n    _renderHtml: function _renderHtml(template, data) {\n      return template(data);\n    },\n    // Attaches the content of a given view.\n    // This method can be overridden to optimize rendering,\n    // or to render in a non standard way.\n    //\n    // For example, using `innerHTML` instead of `$el.html`\n    //\n    // ```js\n    // attachElContent(html) {\n    //   this.el.innerHTML = html;\n    // }\n    // ```\n    attachElContent: function attachElContent(html) {\n      this.Dom.setContents(this.el, html, this.$el);\n    }\n  }; // Borrow event splitter from Backbone\n\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/; // Set event name to be namespaced using a unique index\n  // to generate a non colliding event namespace\n  // http://api.jquery.com/event.namespace/\n\n  var getNamespacedEventName = function getNamespacedEventName(eventName, namespace) {\n    var match = eventName.match(delegateEventSplitter);\n    return \"\".concat(match[1], \".\").concat(namespace, \" \").concat(match[2]);\n  }; // Add Feature flags here\n  // e.g. 'class' => false\n\n\n  var FEATURES = {\n    childViewEventPrefix: false,\n    triggersStopPropagation: true,\n    triggersPreventDefault: true,\n    DEV_MODE: false\n  };\n\n  function isEnabled(name) {\n    return !!FEATURES[name];\n  }\n\n  function setEnabled(name, state) {\n    return FEATURES[name] = state;\n  } // 'click:foo'\n\n\n  function buildViewTrigger(view, triggerDef) {\n    if (_.isString(triggerDef)) {\n      triggerDef = {\n        event: triggerDef\n      };\n    }\n\n    var eventName = triggerDef.event;\n    var shouldPreventDefault = !!triggerDef.preventDefault;\n\n    if (isEnabled('triggersPreventDefault')) {\n      shouldPreventDefault = triggerDef.preventDefault !== false;\n    }\n\n    var shouldStopPropagation = !!triggerDef.stopPropagation;\n\n    if (isEnabled('triggersStopPropagation')) {\n      shouldStopPropagation = triggerDef.stopPropagation !== false;\n    }\n\n    return function (event) {\n      if (shouldPreventDefault) {\n        event.preventDefault();\n      }\n\n      if (shouldStopPropagation) {\n        event.stopPropagation();\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      view.triggerMethod.apply(view, [eventName, view, event].concat(args));\n    };\n  }\n\n  var TriggersMixin = {\n    // Configure `triggers` to forward DOM events to view\n    // events. `triggers: {\"click .foo\": \"do:foo\"}`\n    _getViewTriggers: function _getViewTriggers(view, triggers) {\n      var _this = this; // Configure the triggers, prevent default\n      // action and stop propagation of DOM events\n\n\n      return _.reduce(triggers, function (events, value, key) {\n        key = getNamespacedEventName(key, \"trig\".concat(_this.cid));\n        events[key] = buildViewTrigger(view, value);\n        return events;\n      }, {});\n    }\n  }; // a given key for triggers and events\n  // swaps the @ui with the associated selector.\n  // Returns a new, non-mutated, parsed events hash.\n\n  var _normalizeUIKeys = function normalizeUIKeys(hash, ui) {\n    return _.reduce(hash, function (memo, val, key) {\n      var normalizedKey = _normalizeUIString(key, ui);\n\n      memo[normalizedKey] = val;\n      return memo;\n    }, {});\n  };\n\n  var uiRegEx = /@ui\\.[a-zA-Z-_$0-9]*/g; // utility method for parsing @ui. syntax strings\n  // into associated selector\n\n  var _normalizeUIString = function normalizeUIString(uiString, ui) {\n    return uiString.replace(uiRegEx, function (r) {\n      return ui[r.slice(4)];\n    });\n  }; // allows for the use of the @ui. syntax within\n  // a given value for regions\n  // swaps the @ui with the associated selector\n\n\n  var _normalizeUIValues = function normalizeUIValues(hash, ui, property) {\n    _.each(hash, function (val, key) {\n      if (_.isString(val)) {\n        hash[key] = _normalizeUIString(val, ui);\n      } else if (val) {\n        var propertyVal = val[property];\n\n        if (_.isString(propertyVal)) {\n          val[property] = _normalizeUIString(propertyVal, ui);\n        }\n      }\n    });\n\n    return hash;\n  };\n\n  var UIMixin = {\n    // normalize the keys of passed hash with the views `ui` selectors.\n    // `{\"@ui.foo\": \"bar\"}`\n    normalizeUIKeys: function normalizeUIKeys(hash) {\n      var uiBindings = this._getUIBindings();\n\n      return _normalizeUIKeys(hash, uiBindings);\n    },\n    // normalize the passed string with the views `ui` selectors.\n    // `\"@ui.bar\"`\n    normalizeUIString: function normalizeUIString(uiString) {\n      var uiBindings = this._getUIBindings();\n\n      return _normalizeUIString(uiString, uiBindings);\n    },\n    // normalize the values of passed hash with the views `ui` selectors.\n    // `{foo: \"@ui.bar\"}`\n    normalizeUIValues: function normalizeUIValues(hash, property) {\n      var uiBindings = this._getUIBindings();\n\n      return _normalizeUIValues(hash, uiBindings, property);\n    },\n    _getUIBindings: function _getUIBindings() {\n      var uiBindings = _.result(this, '_uiBindings');\n\n      return uiBindings || _.result(this, 'ui');\n    },\n    // This method binds the elements specified in the \"ui\" hash inside the view's code with\n    // the associated jQuery selectors.\n    _bindUIElements: function _bindUIElements() {\n      var _this = this;\n\n      if (!this.ui) {\n        return;\n      } // store the ui hash in _uiBindings so they can be reset later\n      // and so re-rendering the view will be able to find the bindings\n\n\n      if (!this._uiBindings) {\n        this._uiBindings = this.ui;\n      } // get the bindings result, as a function or otherwise\n\n\n      var bindings = _.result(this, '_uiBindings'); // empty the ui so we don't have anything to start with\n\n\n      this._ui = {}; // bind each of the selectors\n\n      _.each(bindings, function (selector, key) {\n        _this._ui[key] = _this.$(selector);\n      });\n\n      this.ui = this._ui;\n    },\n    _unbindUIElements: function _unbindUIElements() {\n      var _this2 = this;\n\n      if (!this.ui || !this._uiBindings) {\n        return;\n      } // delete all of the existing ui bindings\n\n\n      _.each(this.ui, function ($el, name) {\n        delete _this2.ui[name];\n      }); // reset the ui element to the original bindings configuration\n\n\n      this.ui = this._uiBindings;\n      delete this._uiBindings;\n      delete this._ui;\n    },\n    _getUI: function _getUI(name) {\n      return this._ui[name];\n    }\n  }; // DomApi\n\n  function _getEl(el) {\n    return el instanceof Backbone.$ ? el : Backbone.$(el);\n  } // Static setter\n\n\n  function setDomApi(mixin) {\n    this.prototype.Dom = _.extend({}, this.prototype.Dom, mixin);\n    return this;\n  }\n\n  var DomApi = {\n    // Returns a new HTML DOM node instance\n    createBuffer: function createBuffer() {\n      return document.createDocumentFragment();\n    },\n    // Returns the document element for a given DOM element\n    getDocumentEl: function getDocumentEl(el) {\n      return el.ownerDocument.documentElement;\n    },\n    // Lookup the `selector` string\n    // Selector may also be a DOM element\n    // Returns an array-like object of nodes\n    getEl: function getEl(selector) {\n      return _getEl(selector);\n    },\n    // Finds the `selector` string with the el\n    // Returns an array-like object of nodes\n    findEl: function findEl(el, selector) {\n      return _getEl(el).find(selector);\n    },\n    // Returns true if the el contains the node childEl\n    hasEl: function hasEl(el, childEl) {\n      return el.contains(childEl && childEl.parentNode);\n    },\n    // Detach `el` from the DOM without removing listeners\n    detachEl: function detachEl(el) {\n      var _$el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _getEl(el);\n\n      _$el.detach();\n    },\n    // Remove `oldEl` from the DOM and put `newEl` in its place\n    replaceEl: function replaceEl(newEl, oldEl) {\n      if (newEl === oldEl) {\n        return;\n      }\n\n      var parent = oldEl.parentNode;\n\n      if (!parent) {\n        return;\n      }\n\n      parent.replaceChild(newEl, oldEl);\n    },\n    // Swaps the location of `el1` and `el2` in the DOM\n    swapEl: function swapEl(el1, el2) {\n      if (el1 === el2) {\n        return;\n      }\n\n      var parent1 = el1.parentNode;\n      var parent2 = el2.parentNode;\n\n      if (!parent1 || !parent2) {\n        return;\n      }\n\n      var next1 = el1.nextSibling;\n      var next2 = el2.nextSibling;\n      parent1.insertBefore(el2, next1);\n      parent2.insertBefore(el1, next2);\n    },\n    // Replace the contents of `el` with the HTML string of `html`\n    setContents: function setContents(el, html) {\n      var _$el = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _getEl(el);\n\n      _$el.html(html);\n    },\n    // Takes the DOM node `el` and appends the DOM node `contents`\n    // to the end of the element's contents.\n    appendContents: function appendContents(el, contents) {\n      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref$_$el = _ref._$el,\n          _$el = _ref$_$el === void 0 ? _getEl(el) : _ref$_$el,\n          _ref$_$contents = _ref._$contents,\n          _$contents = _ref$_$contents === void 0 ? _getEl(contents) : _ref$_$contents;\n\n      _$el.append(_$contents);\n    },\n    // Does the el have child nodes\n    hasContents: function hasContents(el) {\n      return !!el && el.hasChildNodes();\n    },\n    // Remove the inner contents of `el` from the DOM while leaving\n    // `el` itself in the DOM.\n    detachContents: function detachContents(el) {\n      var _$el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _getEl(el);\n\n      _$el.contents().detach();\n    }\n  }; // ViewMixin\n  // - behaviors\n  // - childViewEventPrefix\n  // - childViewEvents\n  // - childViewTriggers\n  // - collectionEvents\n  // - modelEvents\n  // - triggers\n  // - ui\n\n  var ViewMixin = {\n    Dom: DomApi,\n    _isElAttached: function _isElAttached() {\n      return !!this.el && this.Dom.hasEl(this.Dom.getDocumentEl(this.el), this.el);\n    },\n    supportsRenderLifecycle: true,\n    supportsDestroyLifecycle: true,\n    _isDestroyed: false,\n    isDestroyed: function isDestroyed() {\n      return !!this._isDestroyed;\n    },\n    _isRendered: false,\n    isRendered: function isRendered() {\n      return !!this._isRendered;\n    },\n    _isAttached: false,\n    isAttached: function isAttached() {\n      return !!this._isAttached;\n    },\n    // Overriding Backbone.View's `delegateEvents` to handle\n    // `events` and `triggers`\n    delegateEvents: function delegateEvents(events) {\n      this._proxyBehaviorViewProperties();\n\n      this._buildEventProxies();\n\n      var combinedEvents = _.extend({}, this._getBehaviorEvents(), this._getEvents(events), this._getBehaviorTriggers(), this._getTriggers());\n\n      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n      return this;\n    },\n    // Allows Backbone.View events to utilize `@ui.` selectors\n    _getEvents: function _getEvents(events) {\n      if (events) {\n        return this.normalizeUIKeys(events);\n      }\n\n      if (!this.events) {\n        return;\n      }\n\n      return this.normalizeUIKeys(_.result(this, 'events'));\n    },\n    // Configure `triggers` to forward DOM events to view\n    // events. `triggers: {\"click .foo\": \"do:foo\"}`\n    _getTriggers: function _getTriggers() {\n      if (!this.triggers) {\n        return;\n      } // Allow `triggers` to be configured as a function\n\n\n      var triggers = this.normalizeUIKeys(_.result(this, 'triggers')); // Configure the triggers, prevent default\n      // action and stop propagation of DOM events\n\n      return this._getViewTriggers(this, triggers);\n    },\n    // Handle `modelEvents`, and `collectionEvents` configuration\n    delegateEntityEvents: function delegateEntityEvents() {\n      this._delegateEntityEvents(this.model, this.collection); // bind each behaviors model and collection events\n\n\n      this._delegateBehaviorEntityEvents();\n\n      return this;\n    },\n    // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n    undelegateEntityEvents: function undelegateEntityEvents() {\n      this._undelegateEntityEvents(this.model, this.collection); // unbind each behaviors model and collection events\n\n\n      this._undelegateBehaviorEntityEvents();\n\n      return this;\n    },\n    // Handle destroying the view and its children.\n    destroy: function destroy(options) {\n      if (this._isDestroyed || this._isDestroying) {\n        return this;\n      }\n\n      this._isDestroying = true;\n      var shouldTriggerDetach = this._isAttached && !this._disableDetachEvents;\n      this.triggerMethod('before:destroy', this, options);\n\n      if (shouldTriggerDetach) {\n        this.triggerMethod('before:detach', this);\n      } // unbind UI elements\n\n\n      this.unbindUIElements(); // remove the view from the DOM\n\n      this._removeElement();\n\n      if (shouldTriggerDetach) {\n        this._isAttached = false;\n        this.triggerMethod('detach', this);\n      } // remove children after the remove to prevent extra paints\n\n\n      this._removeChildren();\n\n      this._isDestroyed = true;\n      this._isRendered = false; // Destroy behaviors after _isDestroyed flag\n\n      this._destroyBehaviors(options);\n\n      this._deleteEntityEventHandlers();\n\n      this.triggerMethod('destroy', this, options);\n\n      this._triggerEventOnBehaviors('destroy', this, options);\n\n      this.stopListening();\n      return this;\n    },\n    // Equates to this.$el.remove\n    _removeElement: function _removeElement() {\n      this.$el.off().removeData();\n      this.Dom.detachEl(this.el, this.$el);\n    },\n    // This method binds the elements specified in the \"ui\" hash\n    bindUIElements: function bindUIElements() {\n      this._bindUIElements();\n\n      this._bindBehaviorUIElements();\n\n      return this;\n    },\n    // This method unbinds the elements specified in the \"ui\" hash\n    unbindUIElements: function unbindUIElements() {\n      this._unbindUIElements();\n\n      this._unbindBehaviorUIElements();\n\n      return this;\n    },\n    getUI: function getUI(name) {\n      return this._getUI(name);\n    },\n    // Cache `childViewEvents` and `childViewTriggers`\n    _buildEventProxies: function _buildEventProxies() {\n      this._childViewEvents = this.normalizeMethods(_.result(this, 'childViewEvents'));\n      this._childViewTriggers = _.result(this, 'childViewTriggers');\n      this._eventPrefix = this._getEventPrefix();\n    },\n    _getEventPrefix: function _getEventPrefix() {\n      var defaultPrefix = isEnabled('childViewEventPrefix') ? 'childview' : false;\n\n      var prefix = _.result(this, 'childViewEventPrefix', defaultPrefix);\n\n      return prefix === false ? prefix : prefix + ':';\n    },\n    _proxyChildViewEvents: function _proxyChildViewEvents(view) {\n      if (this._childViewEvents || this._childViewTriggers || this._eventPrefix) {\n        this.listenTo(view, 'all', this._childViewEventHandler);\n      }\n    },\n    _childViewEventHandler: function _childViewEventHandler(eventName) {\n      var childViewEvents = this._childViewEvents; // call collectionView childViewEvent if defined\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (childViewEvents && childViewEvents[eventName]) {\n        childViewEvents[eventName].apply(this, args);\n      } // use the parent view's proxyEvent handlers\n\n\n      var childViewTriggers = this._childViewTriggers; // Call the event with the proxy name on the parent layout\n\n      if (childViewTriggers && childViewTriggers[eventName]) {\n        this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n      }\n\n      if (this._eventPrefix) {\n        this.triggerMethod.apply(this, [this._eventPrefix + eventName].concat(args));\n      }\n    }\n  };\n\n  _.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TemplateRenderMixin, TriggersMixin, UIMixin);\n\n  function renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      view.triggerMethod('before:render', view);\n    }\n\n    view.render();\n    view._isRendered = true;\n\n    if (!view.supportsRenderLifecycle) {\n      view.triggerMethod('render', view);\n    }\n  }\n\n  function destroyView(view, disableDetachEvents) {\n    if (view.destroy) {\n      // Attach flag for public destroy function internal check\n      view._disableDetachEvents = disableDetachEvents;\n      view.destroy();\n      return;\n    } // Destroy for non-Marionette Views\n\n\n    if (!view.supportsDestroyLifecycle) {\n      view.triggerMethod('before:destroy', view);\n    }\n\n    var shouldTriggerDetach = view._isAttached && !disableDetachEvents;\n\n    if (shouldTriggerDetach) {\n      view.triggerMethod('before:detach', view);\n    }\n\n    view.remove();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      view.triggerMethod('detach', view);\n    }\n\n    view._isDestroyed = true;\n\n    if (!view.supportsDestroyLifecycle) {\n      view.triggerMethod('destroy', view);\n    }\n  } // Region\n\n\n  var classErrorName = 'RegionError';\n  var ClassOptions$1 = ['allowMissingEl', 'parentEl', 'replaceElement'];\n\n  var Region = function Region(options) {\n    this._setOptions(options, ClassOptions$1);\n\n    this.cid = _.uniqueId(this.cidPrefix); // getOption necessary because options.el may be passed as undefined\n\n    this._initEl = this.el = this.getOption('el'); // Handle when this.el is passed in as a $ wrapped element.\n\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n    this.$el = this._getEl(this.el);\n    this.initialize.apply(this, arguments);\n  };\n\n  Region.extend = extend;\n  Region.setDomApi = setDomApi; // Region Methods\n  // --------------\n\n  _.extend(Region.prototype, CommonMixin, {\n    Dom: DomApi,\n    cidPrefix: 'mnr',\n    replaceElement: false,\n    _isReplaced: false,\n    _isSwappingView: false,\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {},\n    // Displays a view instance inside of the region. If necessary handles calling the `render`\n    // method for you. Reads content directly from the `el` attribute.\n    show: function show(view, options) {\n      if (!this._ensureElement(options)) {\n        return;\n      }\n\n      view = this._getView(view, options);\n\n      if (view === this.currentView) {\n        return this;\n      }\n\n      if (view._isShown) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: 'View is already shown in a Region or CollectionView',\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      this._isSwappingView = !!this.currentView;\n      this.triggerMethod('before:show', this, view, options); // Assume an attached view is already in the region for pre-existing DOM\n\n      if (this.currentView || !view._isAttached) {\n        this.empty(options);\n      }\n\n      this._setupChildView(view);\n\n      this.currentView = view;\n      renderView(view);\n\n      this._attachView(view, options);\n\n      this.triggerMethod('show', this, view, options);\n      this._isSwappingView = false;\n      return this;\n    },\n    _getEl: function _getEl(el) {\n      if (!el) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: 'An \"el\" must be specified for a region.',\n          url: 'marionette.region.html#additional-options'\n        });\n      }\n\n      return this.getEl(el);\n    },\n    _setEl: function _setEl() {\n      this.$el = this._getEl(this.el);\n\n      if (this.$el.length) {\n        this.el = this.$el[0];\n      } // Make sure the $el contains only the el\n\n\n      if (this.$el.length > 1) {\n        this.$el = this.Dom.getEl(this.el);\n      }\n    },\n    // Set the `el` of the region and move any current view to the new `el`.\n    _setElement: function _setElement(el) {\n      if (el === this.el) {\n        return this;\n      }\n\n      var shouldReplace = this._isReplaced;\n\n      this._restoreEl();\n\n      this.el = el;\n\n      this._setEl();\n\n      if (this.currentView) {\n        var view = this.currentView;\n\n        if (shouldReplace) {\n          this._replaceEl(view);\n        } else {\n          this.attachHtml(view);\n        }\n      }\n\n      return this;\n    },\n    _setupChildView: function _setupChildView(view) {\n      monitorViewEvents(view);\n\n      this._proxyChildViewEvents(view); // We need to listen for if a view is destroyed in a way other than through the region.\n      // If this happens we need to remove the reference to the currentView since once a view\n      // has been destroyed we can not reuse it.\n\n\n      view.on('destroy', this._empty, this);\n    },\n    _proxyChildViewEvents: function _proxyChildViewEvents(view) {\n      var parentView = this._parentView;\n\n      if (!parentView) {\n        return;\n      }\n\n      parentView._proxyChildViewEvents(view);\n    },\n    // If the regions parent view is not monitoring its attach/detach events\n    _shouldDisableMonitoring: function _shouldDisableMonitoring() {\n      return this._parentView && this._parentView.monitorViewEvents === false;\n    },\n    _isElAttached: function _isElAttached() {\n      return this.Dom.hasEl(this.Dom.getDocumentEl(this.el), this.el);\n    },\n    _attachView: function _attachView(view) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          replaceElement = _ref.replaceElement;\n\n      var shouldTriggerAttach = !view._isAttached && this._isElAttached() && !this._shouldDisableMonitoring();\n      var shouldReplaceEl = typeof replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!replaceElement;\n\n      if (shouldTriggerAttach) {\n        view.triggerMethod('before:attach', view);\n      }\n\n      if (shouldReplaceEl) {\n        this._replaceEl(view);\n      } else {\n        this.attachHtml(view);\n      }\n\n      if (shouldTriggerAttach) {\n        view._isAttached = true;\n        view.triggerMethod('attach', view);\n      } // Corresponds that view is shown in a marionette Region or CollectionView\n\n\n      view._isShown = true;\n    },\n    _ensureElement: function _ensureElement() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!_.isObject(this.el)) {\n        this._setEl();\n      }\n\n      if (!this.$el || this.$el.length === 0) {\n        var allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n        if (allowMissingEl) {\n          return false;\n        } else {\n          throw new MarionetteError({\n            name: classErrorName,\n            message: \"An \\\"el\\\" must exist in DOM for this region \".concat(this.cid),\n            url: 'marionette.region.html#additional-options'\n          });\n        }\n      }\n\n      return true;\n    },\n    _getView: function _getView(view) {\n      if (!view) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.',\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      if (view._isDestroyed) {\n        throw new MarionetteError({\n          name: classErrorName,\n          message: \"View (cid: \\\"\".concat(view.cid, \"\\\") has already been destroyed and cannot be used.\"),\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      if (view instanceof Backbone.View) {\n        return view;\n      }\n\n      var viewOptions = this._getViewOptions(view);\n\n      return new View(viewOptions);\n    },\n    // This allows for a template or a static string to be\n    // used as a template\n    _getViewOptions: function _getViewOptions(viewOptions) {\n      if (_.isFunction(viewOptions)) {\n        return {\n          template: viewOptions\n        };\n      }\n\n      if (_.isObject(viewOptions)) {\n        return viewOptions;\n      }\n\n      var template = function template() {\n        return viewOptions;\n      };\n\n      return {\n        template: template\n      };\n    },\n    // Override this method to change how the region finds the DOM element that it manages. Return\n    // a jQuery selector object scoped to a provided parent el or the document if none exists.\n    getEl: function getEl(el) {\n      var context = _.result(this, 'parentEl');\n\n      if (context && _.isString(el)) {\n        return this.Dom.findEl(context, el);\n      }\n\n      return this.Dom.getEl(el);\n    },\n    _replaceEl: function _replaceEl(view) {\n      // Always restore the el to ensure the regions el is present before replacing\n      this._restoreEl();\n\n      view.on('before:destroy', this._restoreEl, this);\n      this.Dom.replaceEl(view.el, this.el);\n      this._isReplaced = true;\n    },\n    // Restore the region's element in the DOM.\n    _restoreEl: function _restoreEl() {\n      // There is nothing to replace\n      if (!this._isReplaced) {\n        return;\n      }\n\n      var view = this.currentView;\n\n      if (!view) {\n        return;\n      }\n\n      this._detachView(view);\n\n      this._isReplaced = false;\n    },\n    // Check to see if the region's el was replaced.\n    isReplaced: function isReplaced() {\n      return !!this._isReplaced;\n    },\n    // Check to see if a view is being swapped by another\n    isSwappingView: function isSwappingView() {\n      return !!this._isSwappingView;\n    },\n    // Override this method to change how the new view is appended to the `$el` that the\n    // region is managing\n    attachHtml: function attachHtml(view) {\n      this.Dom.appendContents(this.el, view.el, {\n        _$el: this.$el,\n        _$contents: view.$el\n      });\n    },\n    // Destroy the current view, if there is one. If there is no current view,\n    // it will detach any html inside the region's `el`.\n    empty: function empty() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        allowMissingEl: true\n      };\n      var view = this.currentView; // If there is no view in the region we should only detach current html\n\n      if (!view) {\n        if (this._ensureElement(options)) {\n          this.detachHtml();\n        }\n\n        return this;\n      }\n\n      this._empty(view, true);\n\n      return this;\n    },\n    _empty: function _empty(view, shouldDestroy) {\n      view.off('destroy', this._empty, this);\n      this.triggerMethod('before:empty', this, view);\n\n      this._restoreEl();\n\n      delete this.currentView;\n\n      if (!view._isDestroyed) {\n        if (shouldDestroy) {\n          this.removeView(view);\n        } else {\n          this._detachView(view);\n        }\n\n        view._isShown = false;\n\n        this._stopChildViewEvents(view);\n      }\n\n      this.triggerMethod('empty', this, view);\n    },\n    _stopChildViewEvents: function _stopChildViewEvents(view) {\n      var parentView = this._parentView;\n\n      if (!parentView) {\n        return;\n      }\n\n      this._parentView.stopListening(view);\n    },\n    // Non-Marionette safe view.destroy\n    destroyView: function destroyView$1(view) {\n      if (view._isDestroyed) {\n        return view;\n      }\n\n      destroyView(view, this._shouldDisableMonitoring());\n      return view;\n    },\n    // Override this method to determine what happens when the view\n    // is removed from the region when the view is not being detached\n    removeView: function removeView(view) {\n      this.destroyView(view);\n    },\n    // Empties the Region without destroying the view\n    // Returns the detached view\n    detachView: function detachView() {\n      var view = this.currentView;\n\n      if (!view) {\n        return;\n      }\n\n      this._empty(view);\n\n      return view;\n    },\n    _detachView: function _detachView(view) {\n      var shouldTriggerDetach = view._isAttached && !this._shouldDisableMonitoring();\n      var shouldRestoreEl = this._isReplaced;\n\n      if (shouldTriggerDetach) {\n        view.triggerMethod('before:detach', view);\n      }\n\n      if (shouldRestoreEl) {\n        this.Dom.replaceEl(this.el, view.el);\n      } else {\n        this.detachHtml();\n      }\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        view.triggerMethod('detach', view);\n      }\n    },\n    // Override this method to change how the region detaches current content\n    detachHtml: function detachHtml() {\n      this.Dom.detachContents(this.el, this.$el);\n    },\n    // Checks whether a view is currently present within the region. Returns `true` if there is\n    // and `false` if no view is present.\n    hasView: function hasView() {\n      return !!this.currentView;\n    },\n    // Reset the region by destroying any existing view and clearing out the cached `$el`.\n    // The next time a view is shown via this region, the region will re-query the DOM for\n    // the region's `el`.\n    reset: function reset(options) {\n      this.empty(options);\n      this.el = this._initEl;\n      delete this.$el;\n      return this;\n    },\n    _isDestroyed: false,\n    isDestroyed: function isDestroyed() {\n      return this._isDestroyed;\n    },\n    // Destroy the region, remove any child view\n    // and remove the region from any associated view\n    destroy: function destroy(options) {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:destroy', this, options);\n      this._isDestroyed = true;\n      this.reset(options);\n\n      if (this._name) {\n        this._parentView._removeReferences(this._name);\n      }\n\n      delete this._parentView;\n      delete this._name;\n      this.triggerMethod('destroy', this, options);\n      this.stopListening();\n      return this;\n    }\n  });\n\n  function buildRegion(definition, defaults) {\n    if (definition instanceof Region) {\n      return definition;\n    }\n\n    if (_.isString(definition)) {\n      return buildRegionFromObject(defaults, {\n        el: definition\n      });\n    }\n\n    if (_.isFunction(definition)) {\n      return buildRegionFromObject(defaults, {\n        regionClass: definition\n      });\n    }\n\n    if (_.isObject(definition)) {\n      return buildRegionFromObject(defaults, definition);\n    }\n\n    throw new MarionetteError({\n      message: 'Improper region configuration type.',\n      url: 'marionette.region.html#defining-regions'\n    });\n  }\n\n  function buildRegionFromObject(defaults, definition) {\n    var options = _.extend({}, defaults, definition);\n\n    var RegionClass = options.regionClass;\n    delete options.regionClass;\n    return new RegionClass(options);\n  } // - regions\n  // - regionClass\n\n\n  var RegionsMixin = {\n    regionClass: Region,\n    // Internal method to initialize the regions that have been defined in a\n    // `regions` attribute on this View.\n    _initRegions: function _initRegions() {\n      // init regions hash\n      this.regions = this.regions || {};\n      this._regions = {};\n      this.addRegions(_.result(this, 'regions'));\n    },\n    // Internal method to re-initialize all of the regions by updating\n    // the `el` that they point to\n    _reInitRegions: function _reInitRegions() {\n      _invoke(this._regions, 'reset');\n    },\n    // Add a single region, by name, to the View\n    addRegion: function addRegion(name, definition) {\n      var regions = {};\n      regions[name] = definition;\n      return this.addRegions(regions)[name];\n    },\n    // Add multiple regions as a {name: definition, name2: def2} object literal\n    addRegions: function addRegions(regions) {\n      // If there's nothing to add, stop here.\n      if (_.isEmpty(regions)) {\n        return;\n      } // Normalize region selectors hash to allow\n      // a user to use the @ui. syntax.\n\n\n      regions = this.normalizeUIValues(regions, 'el'); // Add the regions definitions to the regions property\n\n      this.regions = _.extend({}, this.regions, regions);\n      return this._addRegions(regions);\n    },\n    // internal method to build and add regions\n    _addRegions: function _addRegions(regionDefinitions) {\n      var _this = this;\n\n      var defaults = {\n        regionClass: this.regionClass,\n        parentEl: _.partial(_.result, this, 'el')\n      };\n      return _.reduce(regionDefinitions, function (regions, definition, name) {\n        regions[name] = buildRegion(definition, defaults);\n\n        _this._addRegion(regions[name], name);\n\n        return regions;\n      }, {});\n    },\n    _addRegion: function _addRegion(region, name) {\n      this.triggerMethod('before:add:region', this, name, region);\n      region._parentView = this;\n      region._name = name;\n      this._regions[name] = region;\n      this.triggerMethod('add:region', this, name, region);\n    },\n    // Remove a single region from the View, by name\n    removeRegion: function removeRegion(name) {\n      var region = this._regions[name];\n\n      this._removeRegion(region, name);\n\n      return region;\n    },\n    // Remove all regions from the View\n    removeRegions: function removeRegions() {\n      var regions = this._getRegions();\n\n      _.each(this._regions, this._removeRegion.bind(this));\n\n      return regions;\n    },\n    _removeRegion: function _removeRegion(region, name) {\n      this.triggerMethod('before:remove:region', this, name, region);\n      region.destroy();\n      this.triggerMethod('remove:region', this, name, region);\n    },\n    // Called in a region's destroy\n    _removeReferences: function _removeReferences(name) {\n      delete this.regions[name];\n      delete this._regions[name];\n    },\n    // Empty all regions in the region manager, but\n    // leave them attached\n    emptyRegions: function emptyRegions() {\n      var regions = this.getRegions();\n\n      _invoke(regions, 'empty');\n\n      return regions;\n    },\n    // Checks to see if view contains region\n    // Accepts the region name\n    // hasRegion('main')\n    hasRegion: function hasRegion(name) {\n      return !!this.getRegion(name);\n    },\n    // Provides access to regions\n    // Accepts the region name\n    // getRegion('main')\n    getRegion: function getRegion(name) {\n      if (!this._isRendered) {\n        this.render();\n      }\n\n      return this._regions[name];\n    },\n    _getRegions: function _getRegions() {\n      return _.clone(this._regions);\n    },\n    // Get all regions\n    getRegions: function getRegions() {\n      if (!this._isRendered) {\n        this.render();\n      }\n\n      return this._getRegions();\n    },\n    showChildView: function showChildView(name, view, options) {\n      var region = this.getRegion(name);\n      region.show(view, options);\n      return view;\n    },\n    detachChildView: function detachChildView(name) {\n      return this.getRegion(name).detachView();\n    },\n    getChildView: function getChildView(name) {\n      return this.getRegion(name).currentView;\n    }\n  }; // Static setter for the renderer\n\n  function setRenderer(renderer) {\n    this.prototype._renderHtml = renderer;\n    return this;\n  } // View\n\n\n  var ClassOptions$2 = ['behaviors', 'childViewEventPrefix', 'childViewEvents', 'childViewTriggers', 'collectionEvents', 'events', 'modelEvents', 'regionClass', 'regions', 'template', 'templateContext', 'triggers', 'ui']; // Used by _getImmediateChildren\n\n  function childReducer(children, region) {\n    if (region.currentView) {\n      children.push(region.currentView);\n    }\n\n    return children;\n  } // The standard view. Includes view events, automatic rendering\n  // templates, nested views, and more.\n\n\n  var View = Backbone.View.extend({\n    constructor: function constructor(options) {\n      this._setOptions(options, ClassOptions$2);\n\n      monitorViewEvents(this);\n\n      this._initBehaviors();\n\n      this._initRegions();\n\n      Backbone.View.prototype.constructor.apply(this, arguments);\n      this.delegateEntityEvents();\n\n      this._triggerEventOnBehaviors('initialize', this, options);\n    },\n    // Overriding Backbone.View's `setElement` to handle\n    // if an el was previously defined. If so, the view might be\n    // rendered or attached on setElement.\n    setElement: function setElement() {\n      Backbone.View.prototype.setElement.apply(this, arguments);\n      this._isRendered = this.Dom.hasContents(this.el);\n      this._isAttached = this._isElAttached();\n\n      if (this._isRendered) {\n        this.bindUIElements();\n      }\n\n      return this;\n    },\n    // If a template is available, renders it into the view's `el`\n    // Re-inits regions and binds UI.\n    render: function render() {\n      var template = this.getTemplate();\n\n      if (template === false || this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:render', this); // If this is not the first render call, then we need to\n      // re-initialize the `el` for each region\n\n      if (this._isRendered) {\n        this._reInitRegions();\n      }\n\n      this._renderTemplate(template);\n\n      this.bindUIElements();\n      this._isRendered = true;\n      this.triggerMethod('render', this);\n      return this;\n    },\n    // called by ViewMixin destroy\n    _removeChildren: function _removeChildren() {\n      this.removeRegions();\n    },\n    _getImmediateChildren: function _getImmediateChildren() {\n      return _.reduce(this._regions, childReducer, []);\n    }\n  }, {\n    setRenderer: setRenderer,\n    setDomApi: setDomApi\n  });\n\n  _.extend(View.prototype, ViewMixin, RegionsMixin); // shut down child views.\n\n\n  var Container = function Container() {\n    this._init();\n  }; // Mix in methods from Underscore, for iteration, and other\n  // collection related features.\n  // Borrowing this code from Backbone.Collection:\n  // https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\n\n\n  var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', 'last', 'without', 'isEmpty', 'pluck', 'reduce', 'partition'];\n\n  _.each(methods, function (method) {\n    Container.prototype[method] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _[method].apply(_, [this._views].concat(args));\n    };\n  });\n\n  function stringComparator(comparator, view) {\n    return view.model && view.model.get(comparator);\n  } // Container Methods\n  // -----------------\n\n\n  _.extend(Container.prototype, {\n    // Initializes an empty container\n    _init: function _init() {\n      this._views = [];\n      this._viewsByCid = {};\n      this._indexByModel = {};\n\n      this._updateLength();\n    },\n    // Add a view to this container. Stores the view\n    // by `cid` and makes it searchable by the model\n    // cid (and model itself). Additionally it stores\n    // the view by index in the _views array\n    _add: function _add(view) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._views.length;\n\n      this._addViewIndexes(view); // add to end by default\n\n\n      this._views.splice(index, 0, view);\n\n      this._updateLength();\n    },\n    _addViewIndexes: function _addViewIndexes(view) {\n      // store the view\n      this._viewsByCid[view.cid] = view; // index it by model\n\n      if (view.model) {\n        this._indexByModel[view.model.cid] = view;\n      }\n    },\n    // Sort (mutate) and return the array of the child views.\n    _sort: function _sort(comparator, context) {\n      if (typeof comparator === 'string') {\n        comparator = _.partial(stringComparator, comparator);\n        return this._sortBy(comparator);\n      }\n\n      if (comparator.length === 1) {\n        return this._sortBy(comparator.bind(context));\n      }\n\n      return this._views.sort(comparator.bind(context));\n    },\n    // Makes `_.sortBy` mutate the array to match `this._views.sort`\n    _sortBy: function _sortBy(comparator) {\n      var sortedViews = _.sortBy(this._views, comparator);\n\n      this._set(sortedViews);\n\n      return sortedViews;\n    },\n    // Replace array contents without overwriting the reference.\n    // Should not add/remove views\n    _set: function _set(views, shouldReset) {\n      this._views.length = 0;\n\n      this._views.push.apply(this._views, views.slice(0));\n\n      if (shouldReset) {\n        this._viewsByCid = {};\n        this._indexByModel = {};\n\n        _.each(views, this._addViewIndexes.bind(this));\n\n        this._updateLength();\n      }\n    },\n    // Swap views by index\n    _swap: function _swap(view1, view2) {\n      var view1Index = this.findIndexByView(view1);\n      var view2Index = this.findIndexByView(view2);\n\n      if (view1Index === -1 || view2Index === -1) {\n        return;\n      }\n\n      var swapView = this._views[view1Index];\n      this._views[view1Index] = this._views[view2Index];\n      this._views[view2Index] = swapView;\n    },\n    // Find a view by the model that was attached to it.\n    // Uses the model's `cid` to find it.\n    findByModel: function findByModel(model) {\n      return this.findByModelCid(model.cid);\n    },\n    // Find a view by the `cid` of the model that was attached to it.\n    findByModelCid: function findByModelCid(modelCid) {\n      return this._indexByModel[modelCid];\n    },\n    // Find a view by index.\n    findByIndex: function findByIndex(index) {\n      return this._views[index];\n    },\n    // Find the index of a view instance\n    findIndexByView: function findIndexByView(view) {\n      return this._views.indexOf(view);\n    },\n    // Retrieve a view by its `cid` directly\n    findByCid: function findByCid(cid) {\n      return this._viewsByCid[cid];\n    },\n    hasView: function hasView(view) {\n      return !!this.findByCid(view.cid);\n    },\n    // Remove a view and clean up index references.\n    _remove: function _remove(view) {\n      if (!this._viewsByCid[view.cid]) {\n        return;\n      } // delete model index\n\n\n      if (view.model) {\n        delete this._indexByModel[view.model.cid];\n      } // remove the view from the container\n\n\n      delete this._viewsByCid[view.cid];\n      var index = this.findIndexByView(view);\n\n      this._views.splice(index, 1);\n\n      this._updateLength();\n    },\n    // Update the `.length` attribute on this container\n    _updateLength: function _updateLength() {\n      this.length = this._views.length;\n    }\n  }); // Collection View\n\n\n  var classErrorName$1 = 'CollectionViewError';\n  var ClassOptions$3 = ['behaviors', 'childView', 'childViewContainer', 'childViewEventPrefix', 'childViewEvents', 'childViewOptions', 'childViewTriggers', 'collectionEvents', 'emptyView', 'emptyViewOptions', 'events', 'modelEvents', 'sortWithCollection', 'template', 'templateContext', 'triggers', 'ui', 'viewComparator', 'viewFilter']; // A view that iterates over a Backbone.Collection\n  // and renders an individual child view for each model.\n\n  var CollectionView = Backbone.View.extend({\n    // flag for maintaining the sorted order of the collection\n    sortWithCollection: true,\n    // constructor\n    constructor: function constructor(options) {\n      this._setOptions(options, ClassOptions$3);\n\n      monitorViewEvents(this);\n\n      this._initChildViewStorage();\n\n      this._initBehaviors();\n\n      Backbone.View.prototype.constructor.apply(this, arguments); // Init empty region\n\n      this.getEmptyRegion();\n      this.delegateEntityEvents();\n\n      this._triggerEventOnBehaviors('initialize', this, options);\n    },\n    // Internal method to set up the `children` object for storing all of the child views\n    // `_children` represents all child views\n    // `children` represents only views filtered to be shown\n    _initChildViewStorage: function _initChildViewStorage() {\n      this._children = new Container();\n      this.children = new Container();\n    },\n    // Create an region to show the emptyView\n    getEmptyRegion: function getEmptyRegion() {\n      var $emptyEl = this.$container || this.$el;\n\n      if (this._emptyRegion && !this._emptyRegion.isDestroyed()) {\n        this._emptyRegion._setElement($emptyEl[0]);\n\n        return this._emptyRegion;\n      }\n\n      this._emptyRegion = new Region({\n        el: $emptyEl[0],\n        replaceElement: false\n      });\n      this._emptyRegion._parentView = this;\n      return this._emptyRegion;\n    },\n    // Configured the initial events that the collection view binds to.\n    _initialEvents: function _initialEvents() {\n      if (this._isRendered) {\n        return;\n      }\n\n      this.listenTo(this.collection, {\n        'sort': this._onCollectionSort,\n        'reset': this._onCollectionReset,\n        'update': this._onCollectionUpdate\n      });\n    },\n    // Internal method. This checks for any changes in the order of the collection.\n    // If the index of any view doesn't match, it will re-sort.\n    _onCollectionSort: function _onCollectionSort(collection, _ref) {\n      var add = _ref.add,\n          merge = _ref.merge,\n          remove = _ref.remove;\n\n      if (!this.sortWithCollection || this.viewComparator === false) {\n        return;\n      } // If the data is changing we will handle the sort later in `_onCollectionUpdate`\n\n\n      if (add || remove || merge) {\n        return;\n      } // If the only thing happening here is sorting, sort.\n\n\n      this.sort();\n    },\n    _onCollectionReset: function _onCollectionReset() {\n      this._destroyChildren();\n\n      this._addChildModels(this.collection.models);\n\n      this.sort();\n    },\n    // Handle collection update model additions and  removals\n    _onCollectionUpdate: function _onCollectionUpdate(collection, options) {\n      var changes = options.changes; // Remove first since it'll be a shorter array lookup.\n\n      var removedViews = changes.removed.length && this._removeChildModels(changes.removed);\n\n      this._addedViews = changes.added.length && this._addChildModels(changes.added);\n\n      this._detachChildren(removedViews);\n\n      this.sort(); // Destroy removed child views after all of the render is complete\n\n      this._removeChildViews(removedViews);\n    },\n    _removeChildModels: function _removeChildModels(models) {\n      var _this = this;\n\n      return _.reduce(models, function (views, model) {\n        var removeView = _this._removeChildModel(model);\n\n        if (removeView) {\n          views.push(removeView);\n        }\n\n        return views;\n      }, []);\n    },\n    _removeChildModel: function _removeChildModel(model) {\n      var view = this._children.findByModel(model);\n\n      if (view) {\n        this._removeChild(view);\n      }\n\n      return view;\n    },\n    _removeChild: function _removeChild(view) {\n      this.triggerMethod('before:remove:child', this, view);\n\n      this.children._remove(view);\n\n      this._children._remove(view);\n\n      this.triggerMethod('remove:child', this, view);\n    },\n    // Added views are returned for consistency with _removeChildModels\n    _addChildModels: function _addChildModels(models) {\n      return _.map(models, this._addChildModel.bind(this));\n    },\n    _addChildModel: function _addChildModel(model) {\n      var view = this._createChildView(model);\n\n      this._addChild(view);\n\n      return view;\n    },\n    _createChildView: function _createChildView(model) {\n      var ChildView = this._getChildView(model);\n\n      var childViewOptions = this._getChildViewOptions(model);\n\n      var view = this.buildChildView(model, ChildView, childViewOptions);\n      return view;\n    },\n    _addChild: function _addChild(view, index) {\n      this.triggerMethod('before:add:child', this, view);\n\n      this._setupChildView(view);\n\n      this._children._add(view, index);\n\n      this.children._add(view, index);\n\n      this.triggerMethod('add:child', this, view);\n    },\n    // Retrieve the `childView` class\n    // The `childView` property can be either a view class or a function that\n    // returns a view class. If it is a function, it will receive the model that\n    // will be passed to the view instance (created from the returned view class)\n    _getChildView: function _getChildView(child) {\n      var childView = this.childView;\n\n      if (!childView) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: 'A \"childView\" must be specified',\n          url: 'marionette.collectionview.html#collectionviews-childview'\n        });\n      }\n\n      childView = this._getView(childView, child);\n\n      if (!childView) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: '\"childView\" must be a view class or a function that returns a view class',\n          url: 'marionette.collectionview.html#collectionviews-childview'\n        });\n      }\n\n      return childView;\n    },\n    // First check if the `view` is a view class (the common case)\n    // Then check if it's a function (which we assume that returns a view class)\n    _getView: function _getView(view, child) {\n      if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n        return view;\n      } else if (_.isFunction(view)) {\n        return view.call(this, child);\n      }\n    },\n    _getChildViewOptions: function _getChildViewOptions(child) {\n      if (_.isFunction(this.childViewOptions)) {\n        return this.childViewOptions(child);\n      }\n\n      return this.childViewOptions;\n    },\n    // Build a `childView` for a model in the collection.\n    // Override to customize the build\n    buildChildView: function buildChildView(child, ChildViewClass, childViewOptions) {\n      var options = _.extend({\n        model: child\n      }, childViewOptions);\n\n      return new ChildViewClass(options);\n    },\n    _setupChildView: function _setupChildView(view) {\n      monitorViewEvents(view); // We need to listen for if a view is destroyed in a way other\n      // than through the CollectionView.\n      // If this happens we need to remove the reference to the view\n      // since once a view has been destroyed we can not reuse it.\n\n      view.on('destroy', this.removeChildView, this); // set up the child view event forwarding\n\n      this._proxyChildViewEvents(view);\n    },\n    // used by ViewMixin's `_childViewEventHandler`\n    _getImmediateChildren: function _getImmediateChildren() {\n      return this.children._views;\n    },\n    // Overriding Backbone.View's `setElement` to handle\n    // if an el was previously defined. If so, the view might be\n    // attached on setElement.\n    setElement: function setElement() {\n      Backbone.View.prototype.setElement.apply(this, arguments);\n      this._isAttached = this._isElAttached();\n      return this;\n    },\n    // Render children views.\n    render: function render() {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this.triggerMethod('before:render', this);\n\n      this._destroyChildren();\n\n      if (this.collection) {\n        this._addChildModels(this.collection.models);\n\n        this._initialEvents();\n      }\n\n      var template = this.getTemplate();\n\n      if (template) {\n        this._renderTemplate(template);\n\n        this.bindUIElements();\n      }\n\n      this._getChildViewContainer();\n\n      this.sort();\n      this._isRendered = true;\n      this.triggerMethod('render', this);\n      return this;\n    },\n    // Get a container within the template to add the children within\n    _getChildViewContainer: function _getChildViewContainer() {\n      var childViewContainer = _.result(this, 'childViewContainer');\n\n      this.$container = childViewContainer ? this.$(childViewContainer) : this.$el;\n\n      if (!this.$container.length) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: \"The specified \\\"childViewContainer\\\" was not found: \".concat(childViewContainer),\n          url: 'marionette.collectionview.html#defining-the-childviewcontainer'\n        });\n      }\n    },\n    // Sorts the children then filters and renders the results.\n    sort: function sort() {\n      this._sortChildren();\n\n      this.filter();\n      return this;\n    },\n    // Sorts views by viewComparator and sets the children to the new order\n    _sortChildren: function _sortChildren() {\n      if (!this._children.length) {\n        return;\n      }\n\n      var viewComparator = this.getComparator();\n\n      if (!viewComparator) {\n        return;\n      } // If children are sorted prevent added to end perf\n\n\n      delete this._addedViews;\n      this.triggerMethod('before:sort', this);\n\n      this._children._sort(viewComparator, this);\n\n      this.triggerMethod('sort', this);\n    },\n    // Sets the view's `viewComparator` and applies the sort if the view is ready.\n    // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n    setComparator: function setComparator(comparator) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          preventRender = _ref2.preventRender;\n\n      var comparatorChanged = this.viewComparator !== comparator;\n      var shouldSort = comparatorChanged && !preventRender;\n      this.viewComparator = comparator;\n\n      if (shouldSort) {\n        this.sort();\n      }\n\n      return this;\n    },\n    // Clears the `viewComparator` and follows the same rules for rendering as `setComparator`.\n    removeComparator: function removeComparator(options) {\n      return this.setComparator(null, options);\n    },\n    // If viewComparator is overriden it will be returned here.\n    // Additionally override this function to provide custom\n    // viewComparator logic\n    getComparator: function getComparator() {\n      if (this.viewComparator) {\n        return this.viewComparator;\n      }\n\n      if (!this.sortWithCollection || this.viewComparator === false || !this.collection) {\n        return false;\n      }\n\n      return this._viewComparator;\n    },\n    // Default internal view comparator that order the views by\n    // the order of the collection\n    _viewComparator: function _viewComparator(view) {\n      return this.collection.indexOf(view.model);\n    },\n    // This method filters the children views and renders the results\n    filter: function filter() {\n      if (this._isDestroyed) {\n        return this;\n      }\n\n      this._filterChildren();\n\n      this._renderChildren();\n\n      return this;\n    },\n    _filterChildren: function _filterChildren() {\n      var _this2 = this;\n\n      if (!this._children.length) {\n        return;\n      }\n\n      var viewFilter = this._getFilter();\n\n      if (!viewFilter) {\n        var shouldReset = this.children.length !== this._children.length;\n\n        this.children._set(this._children._views, shouldReset);\n\n        return;\n      } // If children are filtered prevent added to end perf\n\n\n      delete this._addedViews;\n      this.triggerMethod('before:filter', this);\n      var attachViews = [];\n      var detachViews = [];\n\n      _.each(this._children._views, function (view, key, children) {\n        (viewFilter.call(_this2, view, key, children) ? attachViews : detachViews).push(view);\n      });\n\n      this._detachChildren(detachViews); // reset children\n\n\n      this.children._set(attachViews, true);\n\n      this.triggerMethod('filter', this, attachViews, detachViews);\n    },\n    // This method returns a function for the viewFilter\n    _getFilter: function _getFilter() {\n      var viewFilter = this.getFilter();\n\n      if (!viewFilter) {\n        return false;\n      }\n\n      if (_.isFunction(viewFilter)) {\n        return viewFilter;\n      } // Support filter predicates `{ fooFlag: true }`\n\n\n      if (_.isObject(viewFilter)) {\n        var matcher = _.matches(viewFilter);\n\n        return function (view) {\n          return matcher(view.model && view.model.attributes);\n        };\n      } // Filter by model attribute\n\n\n      if (_.isString(viewFilter)) {\n        return function (view) {\n          return view.model && view.model.get(viewFilter);\n        };\n      }\n\n      throw new MarionetteError({\n        name: classErrorName$1,\n        message: '\"viewFilter\" must be a function, predicate object literal, a string indicating a model attribute, or falsy',\n        url: 'marionette.collectionview.html#defining-the-viewfilter'\n      });\n    },\n    // Override this function to provide custom\n    // viewFilter logic\n    getFilter: function getFilter() {\n      return this.viewFilter;\n    },\n    // Sets the view's `viewFilter` and applies the filter if the view is ready.\n    // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n    setFilter: function setFilter(filter) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          preventRender = _ref3.preventRender;\n\n      var filterChanged = this.viewFilter !== filter;\n      var shouldRender = filterChanged && !preventRender;\n      this.viewFilter = filter;\n\n      if (shouldRender) {\n        this.filter();\n      }\n\n      return this;\n    },\n    // Clears the `viewFilter` and follows the same rules for rendering as `setFilter`.\n    removeFilter: function removeFilter(options) {\n      return this.setFilter(null, options);\n    },\n    _detachChildren: function _detachChildren(detachingViews) {\n      _.each(detachingViews, this._detachChildView.bind(this));\n    },\n    _detachChildView: function _detachChildView(view) {\n      var shouldTriggerDetach = view._isAttached && this.monitorViewEvents !== false;\n\n      if (shouldTriggerDetach) {\n        view.triggerMethod('before:detach', view);\n      }\n\n      this.detachHtml(view);\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        view.triggerMethod('detach', view);\n      }\n\n      view._isShown = false;\n    },\n    // Override this method to change how the collectionView detaches a child view\n    detachHtml: function detachHtml(view) {\n      this.Dom.detachEl(view.el, view.$el);\n    },\n    _renderChildren: function _renderChildren() {\n      // If there are unrendered views prevent add to end perf\n      if (this._hasUnrenderedViews) {\n        delete this._addedViews;\n        delete this._hasUnrenderedViews;\n      }\n\n      var views = this._addedViews || this.children._views;\n      this.triggerMethod('before:render:children', this, views);\n\n      if (this.isEmpty()) {\n        this._showEmptyView();\n      } else {\n        this._destroyEmptyView();\n\n        var els = this._getBuffer(views);\n\n        this._attachChildren(els, views);\n      }\n\n      delete this._addedViews;\n      this.triggerMethod('render:children', this, views);\n    },\n    // Renders each view and creates a fragment buffer from them\n    _getBuffer: function _getBuffer(views) {\n      var _this3 = this;\n\n      var elBuffer = this.Dom.createBuffer();\n\n      _.each(views, function (view) {\n        renderView(view); // corresponds that view is shown in a Region or CollectionView\n\n        view._isShown = true;\n\n        _this3.Dom.appendContents(elBuffer, view.el, {\n          _$contents: view.$el\n        });\n      });\n\n      return elBuffer;\n    },\n    _attachChildren: function _attachChildren(els, views) {\n      var shouldTriggerAttach = this._isAttached && this.monitorViewEvents !== false;\n      views = shouldTriggerAttach ? views : [];\n\n      _.each(views, function (view) {\n        if (view._isAttached) {\n          return;\n        }\n\n        view.triggerMethod('before:attach', view);\n      });\n\n      this.attachHtml(els, this.$container);\n\n      _.each(views, function (view) {\n        if (view._isAttached) {\n          return;\n        }\n\n        view._isAttached = true;\n        view.triggerMethod('attach', view);\n      });\n    },\n    // Override this method to do something other than `.append`.\n    // You can attach any HTML at this point including the els.\n    attachHtml: function attachHtml(els, $container) {\n      this.Dom.appendContents($container[0], els, {\n        _$el: $container\n      });\n    },\n    isEmpty: function isEmpty() {\n      return !this.children.length;\n    },\n    _showEmptyView: function _showEmptyView() {\n      var EmptyView = this._getEmptyView();\n\n      if (!EmptyView) {\n        return;\n      }\n\n      var options = this._getEmptyViewOptions();\n\n      var emptyRegion = this.getEmptyRegion();\n      emptyRegion.show(new EmptyView(options));\n    },\n    // Retrieve the empty view class\n    _getEmptyView: function _getEmptyView() {\n      var emptyView = this.emptyView;\n\n      if (!emptyView) {\n        return;\n      }\n\n      return this._getView(emptyView);\n    },\n    // Remove the emptyView\n    _destroyEmptyView: function _destroyEmptyView() {\n      var emptyRegion = this.getEmptyRegion(); // Only empty if a view is show so the region\n      // doesn't detach any other unrelated HTML\n\n      if (emptyRegion.hasView()) {\n        emptyRegion.empty();\n      }\n    },\n    //\n    _getEmptyViewOptions: function _getEmptyViewOptions() {\n      var emptyViewOptions = this.emptyViewOptions || this.childViewOptions;\n\n      if (_.isFunction(emptyViewOptions)) {\n        return emptyViewOptions.call(this);\n      }\n\n      return emptyViewOptions;\n    },\n    swapChildViews: function swapChildViews(view1, view2) {\n      if (!this._children.hasView(view1) || !this._children.hasView(view2)) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: 'Both views must be children of the collection view to swap.',\n          url: 'marionette.collectionview.html#swapping-child-views'\n        });\n      }\n\n      this._children._swap(view1, view2);\n\n      this.Dom.swapEl(view1.el, view2.el); // If the views are not filtered the same, refilter\n\n      if (this.children.hasView(view1) !== this.children.hasView(view2)) {\n        this.filter();\n      } else {\n        this.children._swap(view1, view2);\n      }\n\n      return this;\n    },\n    // Render the child's view and add it to the HTML for the collection view at a given index, based on the current sort\n    addChildView: function addChildView(view, index) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!view || view._isDestroyed) {\n        return view;\n      }\n\n      if (view._isShown) {\n        throw new MarionetteError({\n          name: classErrorName$1,\n          message: 'View is already shown in a Region or CollectionView',\n          url: 'marionette.region.html#showing-a-view'\n        });\n      }\n\n      if (_.isObject(index)) {\n        options = index;\n      } // If options has defined index we should use it\n\n\n      if (options.index != null) {\n        index = options.index;\n      }\n\n      if (!this._isRendered) {\n        this.render();\n      }\n\n      this._addChild(view, index);\n\n      if (options.preventRender) {\n        this._hasUnrenderedViews = true;\n        return view;\n      }\n\n      var hasIndex = typeof index !== 'undefined';\n      var isAddedToEnd = !hasIndex || index >= this._children.length; // Only cache views if added to the end and there is no unrendered views\n\n      if (isAddedToEnd && !this._hasUnrenderedViews) {\n        this._addedViews = [view];\n      }\n\n      if (hasIndex) {\n        this._renderChildren();\n      } else {\n        this.sort();\n      }\n\n      return view;\n    },\n    // Detach a view from the children.  Best used when adding a\n    // childView from `addChildView`\n    detachChildView: function detachChildView(view) {\n      this.removeChildView(view, {\n        shouldDetach: true\n      });\n      return view;\n    },\n    // Remove the child view and destroy it.  Best used when adding a\n    // childView from `addChildView`\n    // The options argument is for internal use only\n    removeChildView: function removeChildView(view, options) {\n      if (!view) {\n        return view;\n      }\n\n      this._removeChildView(view, options);\n\n      this._removeChild(view);\n\n      if (this.isEmpty()) {\n        this._showEmptyView();\n      }\n\n      return view;\n    },\n    _removeChildViews: function _removeChildViews(views) {\n      _.each(views, this._removeChildView.bind(this));\n    },\n    _removeChildView: function _removeChildView(view) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          shouldDetach = _ref4.shouldDetach;\n\n      view.off('destroy', this.removeChildView, this);\n\n      if (shouldDetach) {\n        this._detachChildView(view);\n      } else {\n        this._destroyChildView(view);\n      }\n\n      this.stopListening(view);\n    },\n    _destroyChildView: function _destroyChildView(view) {\n      if (view._isDestroyed) {\n        return;\n      }\n\n      var shouldDisableEvents = this.monitorViewEvents === false;\n      destroyView(view, shouldDisableEvents);\n    },\n    // called by ViewMixin destroy\n    _removeChildren: function _removeChildren() {\n      this._destroyChildren();\n\n      var emptyRegion = this.getEmptyRegion();\n      emptyRegion.destroy();\n      delete this._addedViews;\n    },\n    // Destroy the child views that this collection view is holding on to, if any\n    _destroyChildren: function _destroyChildren() {\n      if (!this._children.length) {\n        return;\n      }\n\n      this.triggerMethod('before:destroy:children', this);\n\n      if (this.monitorViewEvents === false) {\n        this.Dom.detachContents(this.el, this.$el);\n      }\n\n      this._removeChildViews(this._children._views); // After all children have been destroyed re-init the container\n\n\n      this._children._init();\n\n      this.children._init();\n\n      this.triggerMethod('destroy:children', this);\n    }\n  }, {\n    setDomApi: setDomApi,\n    setRenderer: setRenderer\n  });\n\n  _.extend(CollectionView.prototype, ViewMixin); // Behavior\n\n\n  var ClassOptions$4 = ['collectionEvents', 'events', 'modelEvents', 'triggers', 'ui'];\n\n  var Behavior = function Behavior(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n\n    this._setOptions(options, ClassOptions$4);\n\n    this.cid = _.uniqueId(this.cidPrefix); // Construct an internal UI hash using the behaviors UI\n    // hash combined and overridden by the view UI hash.\n    // This allows the user to use UI hash elements defined\n    // in the parent view as well as those defined in the behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override\n    // a selector under an UI key.\n\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui')); // Proxy view triggers\n\n    this.listenTo(view, 'all', this.triggerMethod);\n    this.initialize.apply(this, arguments);\n  };\n\n  Behavior.extend = extend; // Behavior Methods\n  // --------------\n\n  _.extend(Behavior.prototype, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin, {\n    cidPrefix: 'mnb',\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {},\n    // proxy behavior $ method to the view\n    // this is useful for doing jquery DOM lookups\n    // scoped to behaviors view.\n    $: function $() {\n      return this.view.$.apply(this.view, arguments);\n    },\n    // Stops the behavior from listening to events.\n    destroy: function destroy() {\n      this.stopListening();\n\n      this.view._removeBehavior(this);\n\n      this._deleteEntityEventHandlers();\n\n      return this;\n    },\n    proxyViewProperties: function proxyViewProperties() {\n      this.$el = this.view.$el;\n      this.el = this.view.el;\n      return this;\n    },\n    bindUIElements: function bindUIElements() {\n      this._bindUIElements();\n\n      return this;\n    },\n    unbindUIElements: function unbindUIElements() {\n      this._unbindUIElements();\n\n      return this;\n    },\n    getUI: function getUI(name) {\n      return this._getUI(name);\n    },\n    // Handle `modelEvents`, and `collectionEvents` configuration\n    delegateEntityEvents: function delegateEntityEvents() {\n      this._delegateEntityEvents(this.view.model, this.view.collection);\n\n      return this;\n    },\n    undelegateEntityEvents: function undelegateEntityEvents() {\n      this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n      return this;\n    },\n    _getEvents: function _getEvents() {\n      var _this = this;\n\n      if (!this.events) {\n        return;\n      } // Normalize behavior events hash to allow\n      // a user to use the @ui. syntax.\n\n\n      var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events')); // binds the handler to the behavior and builds a unique eventName\n\n      return _.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n        if (!_.isFunction(behaviorHandler)) {\n          behaviorHandler = _this[behaviorHandler];\n        }\n\n        if (!behaviorHandler) {\n          return events;\n        }\n\n        key = getNamespacedEventName(key, _this.cid);\n        events[key] = behaviorHandler.bind(_this);\n        return events;\n      }, {});\n    },\n    // Internal method to build all trigger handlers for a given behavior\n    _getTriggers: function _getTriggers() {\n      if (!this.triggers) {\n        return;\n      } // Normalize behavior triggers hash to allow\n      // a user to use the @ui. syntax.\n\n\n      var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n      return this._getViewTriggers(this.view, behaviorTriggers);\n    }\n  }); // Application\n\n\n  var ClassOptions$5 = ['channelName', 'radioEvents', 'radioRequests', 'region', 'regionClass'];\n\n  var Application = function Application(options) {\n    this._setOptions(options, ClassOptions$5);\n\n    this.cid = _.uniqueId(this.cidPrefix);\n\n    this._initRegion();\n\n    this._initRadio();\n\n    this.initialize.apply(this, arguments);\n  };\n\n  Application.extend = extend; // Application Methods\n  // --------------\n\n  _.extend(Application.prototype, CommonMixin, DestroyMixin, RadioMixin, {\n    cidPrefix: 'mna',\n    // This is a noop method intended to be overridden\n    initialize: function initialize() {},\n    // Kick off all of the application's processes.\n    start: function start(options) {\n      this.triggerMethod('before:start', this, options);\n      this.triggerMethod('start', this, options);\n      return this;\n    },\n    regionClass: Region,\n    _initRegion: function _initRegion() {\n      var region = this.region;\n\n      if (!region) {\n        return;\n      }\n\n      var defaults = {\n        regionClass: this.regionClass\n      };\n      this._region = buildRegion(region, defaults);\n    },\n    getRegion: function getRegion() {\n      return this._region;\n    },\n    showView: function showView(view) {\n      var region = this.getRegion();\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      region.show.apply(region, [view].concat(args));\n      return view;\n    },\n    getView: function getView() {\n      return this.getRegion().currentView;\n    }\n  });\n\n  var bindEvents$1 = proxy(bindEvents);\n  var unbindEvents$1 = proxy(unbindEvents);\n  var bindRequests$1 = proxy(bindRequests);\n  var unbindRequests$1 = proxy(unbindRequests);\n  var mergeOptions$1 = proxy(mergeOptions);\n  var getOption$1 = proxy(getOption);\n  var normalizeMethods$1 = proxy(normalizeMethods);\n  var triggerMethod$1 = proxy(triggerMethod); // Configuration\n\n  var setDomApi$1 = function setDomApi(mixin) {\n    CollectionView.setDomApi(mixin);\n    Region.setDomApi(mixin);\n    View.setDomApi(mixin);\n  };\n\n  var setRenderer$1 = function setRenderer(renderer) {\n    CollectionView.setRenderer(renderer);\n    View.setRenderer(renderer);\n  };\n\n  var backbone_marionette = {\n    View: View,\n    CollectionView: CollectionView,\n    MnObject: MarionetteObject,\n    Object: MarionetteObject,\n    Region: Region,\n    Behavior: Behavior,\n    Application: Application,\n    isEnabled: isEnabled,\n    setEnabled: setEnabled,\n    monitorViewEvents: monitorViewEvents,\n    Events: Events,\n    extend: extend,\n    DomApi: DomApi,\n    VERSION: version\n  };\n  exports.Application = Application;\n  exports.Behavior = Behavior;\n  exports.CollectionView = CollectionView;\n  exports.DomApi = DomApi;\n  exports.Events = Events;\n  exports.MnObject = MarionetteObject;\n  exports.Region = Region;\n  exports.VERSION = version;\n  exports.View = View;\n  exports.bindEvents = bindEvents$1;\n  exports.bindRequests = bindRequests$1;\n  exports.default = backbone_marionette;\n  exports.extend = extend;\n  exports.getOption = getOption$1;\n  exports.isEnabled = isEnabled;\n  exports.mergeOptions = mergeOptions$1;\n  exports.monitorViewEvents = monitorViewEvents;\n  exports.normalizeMethods = normalizeMethods$1;\n  exports.setDomApi = setDomApi$1;\n  exports.setEnabled = setEnabled;\n  exports.setRenderer = setRenderer$1;\n  exports.triggerMethod = triggerMethod$1;\n  exports.unbindEvents = unbindEvents$1;\n  exports.unbindRequests = unbindRequests$1;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n\nthis && this.Marionette && (this.Mn = this.Marionette);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3Byb3h5LmpzPzdmOTQiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9leHRlbmQuanM/ZGIyYyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbW1vbi9ub3JtYWxpemUtbWV0aG9kcy5qcz9iMDkyIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZXJyb3IuanM/NzI5OCIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbW1vbi9iaW5kLWV2ZW50cy5qcz81MGJiIiwid2VicGFjazovLy8uLi9zcmMvY29tbW9uL2JpbmQtcmVxdWVzdHMuanM/NjZlZiIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbW1vbi9nZXQtb3B0aW9uLmpzP2RlMmMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb21tb24vbWVyZ2Utb3B0aW9ucy5qcz9lMjE2Iiwid2VicGFjazovLy8uLi9zcmMvY29tbW9uL21vbml0b3Itdmlldy1ldmVudHMuanM/ZTUxOSIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbW1vbi90cmlnZ2VyLW1ldGhvZC5qcz84NWZiIiwid2VicGFjazovLy8uLi9zcmMvbWl4aW5zL2V2ZW50cy5qcz85NDFmIiwid2VicGFjazovLy8uLi9zcmMvbWl4aW5zL2NvbW1vbi5qcz84ZTBjIiwid2VicGFjazovLy8uLi9zcmMvbWl4aW5zL2Rlc3Ryb3kuanM/ZDUxMiIsIndlYnBhY2s6Ly8vLi4vc3JjL21peGlucy9yYWRpby5qcz9hYTYzIiwid2VicGFjazovLy8uLi9zcmMvb2JqZWN0LmpzPzBiMDAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pbnZva2UuanM/NmYzZiIsIndlYnBhY2s6Ly8vLi4vc3JjL21peGlucy9iZWhhdmlvcnMuanM/MmU2MSIsIndlYnBhY2s6Ly8vLi4vc3JjL21peGlucy9kZWxlZ2F0ZS1lbnRpdHktZXZlbnRzLmpzP2Q3OWYiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9taXhpbnMvdGVtcGxhdGUtcmVuZGVyLmpzPzFhODUiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXQtbmFtZXNwYWNlZC1ldmVudC1uYW1lLmpzPzNlOGMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb25maWcvZmVhdHVyZXMuanM/YzBkNCIsIndlYnBhY2s6Ly8vLi4vc3JjL21peGlucy90cmlnZ2Vycy5qcz81ZmI5Iiwid2VicGFjazovLy8uLi9zcmMvbWl4aW5zL3VpLmpzPzU1NGUiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb25maWcvZG9tLmpzP2EyZDEiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9taXhpbnMvdmlldy5qcz9jZGQ1Iiwid2VicGFjazovLy8uLi9zcmMvY29tbW9uL3ZpZXcuanM/ODhhNiIsIndlYnBhY2s6Ly8vLi4vc3JjL3JlZ2lvbi5qcz8wOTJlIiwid2VicGFjazovLy8uLi9zcmMvY29tbW9uL2J1aWxkLXJlZ2lvbi5qcz9mOGUzIiwid2VicGFjazovLy8uLi9zcmMvbWl4aW5zL3JlZ2lvbnMuanM/OWVhYSIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbmZpZy9yZW5kZXJlci5qcz8wOWI3Iiwid2VicGFjazovLy8uLi9zcmMvdmlldy5qcz84OWQwIiwid2VicGFjazovLy8uLi9zcmMvY2hpbGQtdmlldy1jb250YWluZXIuanM/MjM0MiIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbGxlY3Rpb24tdmlldy5qcz9mNWFhIiwid2VicGFjazovLy8uLi9zcmMvYmVoYXZpb3IuanM/ZWJmYiIsIndlYnBhY2s6Ly8vLi4vc3JjL2FwcGxpY2F0aW9uLmpzP2JjZGMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9iYWNrYm9uZS5tYXJpb25ldHRlLmpzPzM1MmQiXSwibmFtZXMiOlsicHJveHkiLCJhcmdzIiwibWV0aG9kIiwiZXh0ZW5kIiwiQmFja2JvbmUiLCJub3JtYWxpemVNZXRob2RzIiwiXyIsIm5vcm1hbGl6ZWRIYXNoIiwiZXJyb3JQcm9wcyIsIk1hcmlvbmV0dGVFcnJvciIsInVybFJvb3QiLCJ1cmwiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwiRXJyb3IiLCJvcHRpb25zIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0b1N0cmluZyIsIm1lc3NhZ2UiLCJub3JtYWxpemVCaW5kaW5ncyIsImNoYW5uZWwiLCJnZXRPcHRpb24iLCJtZXJnZU9wdGlvbnMiLCJvcHRpb24iLCJ2aWV3Iiwic2hvdWxkVHJpZ2dlciIsImNoaWxkIiwic2hvdWxkVHJpZ2dlckF0dGFjaCIsInRyaWdnZXJNZXRob2RDaGlsZHJlbiIsInRyaWdnZXJET01SZWZyZXNoIiwidHJpZ2dlckRPTVJlbW92ZSIsImhhbmRsZVJlbmRlciIsInNwbGl0dGVyIiwibWV0aG9kQ2FjaGUiLCJldmVudE5hbWUiLCJnZXRPbk1ldGhvZE5hbWUiLCJldmVudCIsIm1ldGhvZE5hbWUiLCJyZXN1bHQiLCJ0cmlnZ2VyTWV0aG9kIiwiQ29tbW9uTWl4aW4iLCJfc2V0T3B0aW9ucyIsImJpbmRFdmVudHMiLCJ1bmJpbmRFdmVudHMiLCJiaW5kUmVxdWVzdHMiLCJ1bmJpbmRSZXF1ZXN0cyIsIl9pc0Rlc3Ryb3llZCIsImlzRGVzdHJveWVkIiwiZGVzdHJveSIsIl9pbml0UmFkaW8iLCJjaGFubmVsTmFtZSIsIlJhZGlvIiwicmFkaW9FdmVudHMiLCJyYWRpb1JlcXVlc3RzIiwiX2Rlc3Ryb3lSYWRpbyIsImdldENoYW5uZWwiLCJDbGFzc09wdGlvbnMiLCJNYXJpb25ldHRlT2JqZWN0IiwiY2lkUHJlZml4IiwiaW5pdGlhbGl6ZSIsIkJlaGF2aW9yQ2xhc3MiLCJnZXRCZWhhdmlvckNsYXNzIiwiYmVoYXZpb3IiLCJyZWR1Y2VkQmVoYXZpb3JzIiwicGFyc2VCZWhhdmlvcnMiLCJfaW5pdEJlaGF2aW9ycyIsIl9nZXRCZWhhdmlvclRyaWdnZXJzIiwidHJpZ2dlcnMiLCJfaW52b2tlIiwiX2dldEJlaGF2aW9yRXZlbnRzIiwiZXZlbnRzIiwiX3Byb3h5QmVoYXZpb3JWaWV3UHJvcGVydGllcyIsIl9kZWxlZ2F0ZUJlaGF2aW9yRW50aXR5RXZlbnRzIiwiX3VuZGVsZWdhdGVCZWhhdmlvckVudGl0eUV2ZW50cyIsIl9kZXN0cm95QmVoYXZpb3JzIiwiX3JlbW92ZUJlaGF2aW9yIiwiX2JpbmRCZWhhdmlvclVJRWxlbWVudHMiLCJfdW5iaW5kQmVoYXZpb3JVSUVsZW1lbnRzIiwiX3RyaWdnZXJFdmVudE9uQmVoYXZpb3JzIiwiX2RlbGVnYXRlRW50aXR5RXZlbnRzIiwiX3VuZGVsZWdhdGVFbnRpdHlFdmVudHMiLCJfZGVsZXRlRW50aXR5RXZlbnRIYW5kbGVycyIsIl9yZW5kZXJUZW1wbGF0ZSIsImRhdGEiLCJodG1sIiwiZ2V0VGVtcGxhdGUiLCJtaXhpblRlbXBsYXRlQ29udGV4dCIsInRlbXBsYXRlQ29udGV4dCIsInNlcmlhbGl6ZURhdGEiLCJpdGVtcyIsInNlcmlhbGl6ZU1vZGVsIiwic2VyaWFsaXplQ29sbGVjdGlvbiIsIm1vZGVsIiwiX3JlbmRlckh0bWwiLCJ0ZW1wbGF0ZSIsImF0dGFjaEVsQ29udGVudCIsImRlbGVnYXRlRXZlbnRTcGxpdHRlciIsImdldE5hbWVzcGFjZWRFdmVudE5hbWUiLCJtYXRjaCIsIkZFQVRVUkVTIiwiY2hpbGRWaWV3RXZlbnRQcmVmaXgiLCJ0cmlnZ2Vyc1N0b3BQcm9wYWdhdGlvbiIsInRyaWdnZXJzUHJldmVudERlZmF1bHQiLCJERVZfTU9ERSIsInRyaWdnZXJEZWYiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImlzRW5hYmxlZCIsInNob3VsZFN0b3BQcm9wYWdhdGlvbiIsIl9nZXRWaWV3VHJpZ2dlcnMiLCJrZXkiLCJidWlsZFZpZXdUcmlnZ2VyIiwibm9ybWFsaXplVUlLZXlzIiwibm9ybWFsaXplZEtleSIsIm5vcm1hbGl6ZVVJU3RyaW5nIiwibWVtbyIsInVpUmVnRXgiLCJ1aSIsInIiLCJub3JtYWxpemVVSVZhbHVlcyIsImhhc2giLCJwcm9wZXJ0eVZhbCIsInZhbCIsInVpQmluZGluZ3MiLCJfZ2V0VUlCaW5kaW5ncyIsIl9iaW5kVUlFbGVtZW50cyIsImJpbmRpbmdzIiwiX3VuYmluZFVJRWxlbWVudHMiLCJfZ2V0VUkiLCJlbCIsImNyZWF0ZUJ1ZmZlciIsImRvY3VtZW50IiwiZ2V0RG9jdW1lbnRFbCIsImdldEVsIiwiZmluZEVsIiwiaGFzRWwiLCJjaGlsZEVsIiwiZGV0YWNoRWwiLCJfJGVsIiwicmVwbGFjZUVsIiwibmV3RWwiLCJwYXJlbnQiLCJvbGRFbCIsInN3YXBFbCIsImVsMSIsInBhcmVudDEiLCJwYXJlbnQyIiwiZWwyIiwibmV4dDEiLCJuZXh0MiIsInNldENvbnRlbnRzIiwiYXBwZW5kQ29udGVudHMiLCJfJGNvbnRlbnRzIiwiaGFzQ29udGVudHMiLCJkZXRhY2hDb250ZW50cyIsIlZpZXdNaXhpbiIsIkRvbSIsIl9pc0VsQXR0YWNoZWQiLCJzdXBwb3J0c1JlbmRlckxpZmVjeWNsZSIsInN1cHBvcnRzRGVzdHJveUxpZmVjeWNsZSIsIl9pc1JlbmRlcmVkIiwiaXNSZW5kZXJlZCIsIl9pc0F0dGFjaGVkIiwiaXNBdHRhY2hlZCIsImRlbGVnYXRlRXZlbnRzIiwiY29tYmluZWRFdmVudHMiLCJfZ2V0RXZlbnRzIiwiX2dldFRyaWdnZXJzIiwiZGVsZWdhdGVFbnRpdHlFdmVudHMiLCJ1bmRlbGVnYXRlRW50aXR5RXZlbnRzIiwic2hvdWxkVHJpZ2dlckRldGFjaCIsIl9yZW1vdmVFbGVtZW50IiwiYmluZFVJRWxlbWVudHMiLCJ1bmJpbmRVSUVsZW1lbnRzIiwiZ2V0VUkiLCJfYnVpbGRFdmVudFByb3hpZXMiLCJfZ2V0RXZlbnRQcmVmaXgiLCJkZWZhdWx0UHJlZml4IiwicHJlZml4IiwiX3Byb3h5Q2hpbGRWaWV3RXZlbnRzIiwiX2NoaWxkVmlld0V2ZW50SGFuZGxlciIsImNoaWxkVmlld0V2ZW50cyIsImNoaWxkVmlld1RyaWdnZXJzIiwiY2xhc3NFcnJvck5hbWUiLCJSZWdpb24iLCJyZXBsYWNlRWxlbWVudCIsIl9pc1JlcGxhY2VkIiwiX2lzU3dhcHBpbmdWaWV3Iiwic2hvdyIsIm5hbWUiLCJyZW5kZXJWaWV3IiwiX2dldEVsIiwiX3NldEVsIiwiX3NldEVsZW1lbnQiLCJzaG91bGRSZXBsYWNlIiwiX3NldHVwQ2hpbGRWaWV3IiwibW9uaXRvclZpZXdFdmVudHMiLCJwYXJlbnRWaWV3IiwiX3Nob3VsZERpc2FibGVNb25pdG9yaW5nIiwiX2F0dGFjaFZpZXciLCJzaG91bGRSZXBsYWNlRWwiLCJfZW5zdXJlRWxlbWVudCIsImFsbG93TWlzc2luZ0VsIiwiX2dldFZpZXciLCJ2aWV3T3B0aW9ucyIsIl9nZXRWaWV3T3B0aW9ucyIsImNvbnRleHQiLCJfcmVwbGFjZUVsIiwiX3Jlc3RvcmVFbCIsImlzUmVwbGFjZWQiLCJpc1N3YXBwaW5nVmlldyIsImF0dGFjaEh0bWwiLCIkZWwiLCJlbXB0eSIsIl9lbXB0eSIsIl9zdG9wQ2hpbGRWaWV3RXZlbnRzIiwiZGVzdHJveVZpZXciLCJyZW1vdmVWaWV3IiwiZGV0YWNoVmlldyIsIl9kZXRhY2hWaWV3Iiwic2hvdWxkUmVzdG9yZUVsIiwiZGV0YWNoSHRtbCIsImhhc1ZpZXciLCJyZXNldCIsImRlZmluaXRpb24iLCJidWlsZFJlZ2lvbkZyb21PYmplY3QiLCJyZWdpb25DbGFzcyIsIlJlZ2lvbkNsYXNzIiwiX2luaXRSZWdpb25zIiwiX3JlSW5pdFJlZ2lvbnMiLCJhZGRSZWdpb24iLCJyZWdpb25zIiwiYWRkUmVnaW9ucyIsIl9hZGRSZWdpb25zIiwiZGVmYXVsdHMiLCJwYXJlbnRFbCIsImJ1aWxkUmVnaW9uIiwiX2FkZFJlZ2lvbiIsInJlZ2lvbiIsInJlbW92ZVJlZ2lvbiIsInJlbW92ZVJlZ2lvbnMiLCJfcmVtb3ZlUmVnaW9uIiwiX3JlbW92ZVJlZmVyZW5jZXMiLCJlbXB0eVJlZ2lvbnMiLCJoYXNSZWdpb24iLCJnZXRSZWdpb24iLCJfZ2V0UmVnaW9ucyIsImdldFJlZ2lvbnMiLCJzaG93Q2hpbGRWaWV3IiwiZGV0YWNoQ2hpbGRWaWV3IiwiZ2V0Q2hpbGRWaWV3IiwiY2hpbGRyZW4iLCJWaWV3Iiwic2V0RWxlbWVudCIsInJlbmRlciIsIl9yZW1vdmVDaGlsZHJlbiIsIl9nZXRJbW1lZGlhdGVDaGlsZHJlbiIsInNldFJlbmRlcmVyIiwic2V0RG9tQXBpIiwiQ29udGFpbmVyIiwibWV0aG9kcyIsIl9pbml0IiwiX2FkZCIsImluZGV4IiwibGVuZ3RoIiwiX2FkZFZpZXdJbmRleGVzIiwiX3NvcnQiLCJjb21wYXJhdG9yIiwiX3NvcnRCeSIsInNvcnRlZFZpZXdzIiwiX3NldCIsInZpZXdzIiwiX3N3YXAiLCJ2aWV3MUluZGV4IiwidmlldzJJbmRleCIsInN3YXBWaWV3IiwiZmluZEJ5TW9kZWwiLCJmaW5kQnlNb2RlbENpZCIsImZpbmRCeUluZGV4IiwiZmluZEluZGV4QnlWaWV3IiwiZmluZEJ5Q2lkIiwiX3JlbW92ZSIsIl91cGRhdGVMZW5ndGgiLCJDb2xsZWN0aW9uVmlldyIsInNvcnRXaXRoQ29sbGVjdGlvbiIsIl9pbml0Q2hpbGRWaWV3U3RvcmFnZSIsImdldEVtcHR5UmVnaW9uIiwiJGVtcHR5RWwiLCJfaW5pdGlhbEV2ZW50cyIsIl9vbkNvbGxlY3Rpb25VcGRhdGUiLCJfb25Db2xsZWN0aW9uU29ydCIsImFkZCIsIm1lcmdlIiwicmVtb3ZlIiwiX29uQ29sbGVjdGlvblJlc2V0IiwiY2hhbmdlcyIsInJlbW92ZWRWaWV3cyIsIl9yZW1vdmVDaGlsZE1vZGVscyIsIl9yZW1vdmVDaGlsZE1vZGVsIiwiX3JlbW92ZUNoaWxkIiwiX2FkZENoaWxkTW9kZWxzIiwiX2FkZENoaWxkTW9kZWwiLCJfY3JlYXRlQ2hpbGRWaWV3IiwiQ2hpbGRWaWV3IiwiY2hpbGRWaWV3T3B0aW9ucyIsIl9hZGRDaGlsZCIsIl9nZXRDaGlsZFZpZXciLCJjaGlsZFZpZXciLCJfZ2V0Q2hpbGRWaWV3T3B0aW9ucyIsImJ1aWxkQ2hpbGRWaWV3IiwiX2dldENoaWxkVmlld0NvbnRhaW5lciIsImNoaWxkVmlld0NvbnRhaW5lciIsInNvcnQiLCJfc29ydENoaWxkcmVuIiwidmlld0NvbXBhcmF0b3IiLCJzZXRDb21wYXJhdG9yIiwicHJldmVudFJlbmRlciIsImNvbXBhcmF0b3JDaGFuZ2VkIiwic2hvdWxkU29ydCIsInJlbW92ZUNvbXBhcmF0b3IiLCJnZXRDb21wYXJhdG9yIiwiX3ZpZXdDb21wYXJhdG9yIiwiZmlsdGVyIiwiX2ZpbHRlckNoaWxkcmVuIiwidmlld0ZpbHRlciIsInNob3VsZFJlc2V0IiwiYXR0YWNoVmlld3MiLCJkZXRhY2hWaWV3cyIsIl9nZXRGaWx0ZXIiLCJtYXRjaGVyIiwiZ2V0RmlsdGVyIiwic2V0RmlsdGVyIiwiZmlsdGVyQ2hhbmdlZCIsInNob3VsZFJlbmRlciIsInJlbW92ZUZpbHRlciIsIl9kZXRhY2hDaGlsZHJlbiIsIl9kZXRhY2hDaGlsZFZpZXciLCJfcmVuZGVyQ2hpbGRyZW4iLCJlbHMiLCJfZ2V0QnVmZmVyIiwiZWxCdWZmZXIiLCJfYXR0YWNoQ2hpbGRyZW4iLCIkY29udGFpbmVyIiwiaXNFbXB0eSIsIl9zaG93RW1wdHlWaWV3IiwiRW1wdHlWaWV3IiwiZW1wdHlSZWdpb24iLCJfZ2V0RW1wdHlWaWV3IiwiZW1wdHlWaWV3IiwiX2Rlc3Ryb3lFbXB0eVZpZXciLCJfZ2V0RW1wdHlWaWV3T3B0aW9ucyIsImVtcHR5Vmlld09wdGlvbnMiLCJzd2FwQ2hpbGRWaWV3cyIsInZpZXcxIiwidmlldzIiLCJhZGRDaGlsZFZpZXciLCJoYXNJbmRleCIsImlzQWRkZWRUb0VuZCIsInNob3VsZERldGFjaCIsInJlbW92ZUNoaWxkVmlldyIsIl9yZW1vdmVDaGlsZFZpZXdzIiwiX3JlbW92ZUNoaWxkVmlldyIsIl9kZXN0cm95Q2hpbGRWaWV3Iiwic2hvdWxkRGlzYWJsZUV2ZW50cyIsIl9kZXN0cm95Q2hpbGRyZW4iLCJCZWhhdmlvciIsIiQiLCJwcm94eVZpZXdQcm9wZXJ0aWVzIiwiYmVoYXZpb3JFdmVudHMiLCJiZWhhdmlvckhhbmRsZXIiLCJiZWhhdmlvclRyaWdnZXJzIiwiQXBwbGljYXRpb24iLCJzdGFydCIsIl9pbml0UmVnaW9uIiwic2hvd1ZpZXciLCJnZXRWaWV3IiwiTW5PYmplY3QiLCJPYmplY3QiLCJzZXRFbmFibGVkIiwiRXZlbnRzIiwiRG9tQXBpIiwiVkVSU0lPTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFBQTs7QUFDQSxN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YXVDLGVBQWEsR0FBR3ZDLEtBQUssQ0FBM0IsYUFBMkIsQ0FBbEMsQyxDQUFPOztBQUtQLE1BQWFpUSxXQUFTLEdBQUcsU0FBWkEsU0FBWSxRQUFnQjtBQUN2Q3lCLGtCQUFjLENBQWRBO0FBQ0FuRyxVQUFNLENBQU5BO0FBQ0FvRSxRQUFJLENBQUpBO0FBSEssR0FBUDs7QUFLQSxNQUFhSyxhQUFXLEdBQUcsU0FBZEEsV0FBYyxXQUFtQjtBQUM1QzBCLGtCQUFjLENBQWRBO0FBQ0EvQixRQUFJLENBQUpBO0FBRkssR0FBUDs7QUFxQkEsNEJBQWU7QUFDYkEsUUFBSSxFQURTO0FBRWIrQixrQkFBYyxFQUZEO0FBR2I2RixZQUFRLEVBSEs7QUFJYkMsVUFBTSxFQUpPO0FBS2JqTSxVQUFNLEVBTE87QUFNYnFMLFlBQVEsRUFOSztBQU9iTSxlQUFXLEVBUEU7QUFRYnhRLGFBQVMsRUFSSTtBQVNiK1EsY0FBVSxFQVRHO0FBVWJ0TCxxQkFBaUIsRUFWSjtBQVdidUwsVUFBTSxFQVhPO0FBWWJ2WCxVQUFNLEVBWk87QUFhYndYLFVBQU0sRUFiTztBQWNiQyxXQUFPLEVBQVBBO0FBZGEsR0FBZiIsImZpbGUiOiI3Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vSW50ZXJuYWwgdXRpbGl0eSBmb3IgY3JlYXRpbmcgY29udGV4dCBzdHlsZSBnbG9iYWwgdXRpbHNcbmNvbnN0IHByb3h5ID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb250ZXh0LCAuLi5hcmdzKSB7XG4gICAgcmV0dXJuIG1ldGhvZC5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb3h5O1xuIiwiLy8gTWFyaW9uZXR0ZS5leHRlbmRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCBCYWNrYm9uZSBmcm9tICdiYWNrYm9uZSc7XG5cbi8vIEJvcnJvdyB0aGUgQmFja2JvbmUgYGV4dGVuZGAgbWV0aG9kIHNvIHdlIGNhbiB1c2UgaXQgYXMgbmVlZGVkXG5jb25zdCBleHRlbmQgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQ7XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuZDtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG4vLyBNYXJpb25ldHRlLm5vcm1hbGl6ZU1ldGhvZHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gUGFzcyBpbiBhIG1hcHBpbmcgb2YgZXZlbnRzID0+IGZ1bmN0aW9ucyBvciBmdW5jdGlvbiBuYW1lc1xuLy8gYW5kIHJldHVybiBhIG1hcHBpbmcgb2YgZXZlbnRzID0+IGZ1bmN0aW9uc1xuY29uc3Qgbm9ybWFsaXplTWV0aG9kcyA9IGZ1bmN0aW9uKGhhc2gpIHtcbiAgaWYgKCFoYXNoKSB7IHJldHVybiB9XG5cbiAgcmV0dXJuIF8ucmVkdWNlKGhhc2gsIChub3JtYWxpemVkSGFzaCwgbWV0aG9kLCBuYW1lKSA9PiB7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24obWV0aG9kKSkge1xuICAgICAgbWV0aG9kID0gdGhpc1ttZXRob2RdO1xuICAgIH1cbiAgICBpZiAobWV0aG9kKSB7XG4gICAgICBub3JtYWxpemVkSGFzaFtuYW1lXSA9IG1ldGhvZDtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRIYXNoO1xuICB9LCB7fSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBub3JtYWxpemVNZXRob2RzO1xuIiwiLy8gRXJyb3Jcbi8vIC0tLS0tXG5cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGV4dGVuZCBmcm9tICcuL2V4dGVuZCc7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5cbmNvbnN0IGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnbmFtZScsICdtZXNzYWdlJywgJ251bWJlcicsICd1cmwnXTtcblxuY29uc3QgTWFyaW9uZXR0ZUVycm9yID0gZXh0ZW5kLmNhbGwoRXJyb3IsIHtcbiAgdXJsUm9vdDogYGh0dHA6Ly9tYXJpb25ldHRlanMuY29tL2RvY3MvdiR7dmVyc2lvbn0vYCxcblxuICB1cmw6ICcnLFxuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBjb25zdCBlcnJvciA9IEVycm9yLmNhbGwodGhpcywgb3B0aW9ucy5tZXNzYWdlKTtcbiAgICBfLmV4dGVuZCh0aGlzLCBfLnBpY2soZXJyb3IsIGVycm9yUHJvcHMpLCBfLnBpY2sob3B0aW9ucywgZXJyb3JQcm9wcykpO1xuXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICB0aGlzLmNhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgfVxuXG4gICAgdGhpcy51cmwgPSB0aGlzLnVybFJvb3QgKyB0aGlzLnVybDtcbiAgfSxcblxuICBjYXB0dXJlU3RhY2tUcmFjZSgpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBNYXJpb25ldHRlRXJyb3IpO1xuICB9LFxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHsgdGhpcy5uYW1lIH06ICR7IHRoaXMubWVzc2FnZSB9IFNlZTogJHsgdGhpcy51cmwgfWA7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBNYXJpb25ldHRlRXJyb3I7XG4iLCIvLyBCaW5kIEVudGl0eSBFdmVudHMgJiBVbmJpbmQgRW50aXR5IEV2ZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyBUaGVzZSBtZXRob2RzIGFyZSB1c2VkIHRvIGJpbmQvdW5iaW5kIGEgYmFja2JvbmUgXCJlbnRpdHlcIiAoZS5nLiBjb2xsZWN0aW9uL21vZGVsKVxuLy8gdG8gbWV0aG9kcyBvbiBhIHRhcmdldCBvYmplY3QuXG4vL1xuLy8gVGhlIGZpcnN0IHBhcmFtZXRlciwgYHRhcmdldGAsIG11c3QgaGF2ZSB0aGUgQmFja2JvbmUuRXZlbnRzIG1vZHVsZSBtaXhlZCBpbi5cbi8vXG4vLyBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB0aGUgYGVudGl0eWAgKEJhY2tib25lLk1vZGVsLCBCYWNrYm9uZS5Db2xsZWN0aW9uIG9yXG4vLyBhbnkgb2JqZWN0IHRoYXQgaGFzIEJhY2tib25lLkV2ZW50cyBtaXhlZCBpbikgdG8gYmluZCB0aGUgZXZlbnRzIGZyb20uXG4vL1xuLy8gVGhlIHRoaXJkIHBhcmFtZXRlciBpcyBhIGhhc2ggb2YgeyBcImV2ZW50Om5hbWVcIjogXCJldmVudEhhbmRsZXJcIiB9XG4vLyBjb25maWd1cmF0aW9uLiBNdWx0aXBsZSBoYW5kbGVycyBjYW4gYmUgc2VwYXJhdGVkIGJ5IGEgc3BhY2UuIEFcbi8vIGZ1bmN0aW9uIGNhbiBiZSBzdXBwbGllZCBpbnN0ZWFkIG9mIGEgc3RyaW5nIGhhbmRsZXIgbmFtZS5cblxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbm9ybWFsaXplTWV0aG9kcyBmcm9tICcuL25vcm1hbGl6ZS1tZXRob2RzJztcbmltcG9ydCBNYXJpb25ldHRlRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuXG5mdW5jdGlvbiBub3JtYWxpemVCaW5kaW5ncyhjb250ZXh0LCBiaW5kaW5ncykge1xuICBpZiAoIV8uaXNPYmplY3QoYmluZGluZ3MpKSB7XG4gICAgdGhyb3cgbmV3IE1hcmlvbmV0dGVFcnJvcih7XG4gICAgICBtZXNzYWdlOiAnQmluZGluZ3MgbXVzdCBiZSBhbiBvYmplY3QuJyxcbiAgICAgIHVybDogJ2NvbW1vbi5odG1sI2JpbmRldmVudHMnXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbm9ybWFsaXplTWV0aG9kcy5jYWxsKGNvbnRleHQsIGJpbmRpbmdzKTtcbn1cblxuZnVuY3Rpb24gYmluZEV2ZW50cyhlbnRpdHksIGJpbmRpbmdzKSB7XG4gIGlmICghZW50aXR5IHx8ICFiaW5kaW5ncykgeyByZXR1cm4gdGhpczsgfVxuXG4gIHRoaXMubGlzdGVuVG8oZW50aXR5LCBub3JtYWxpemVCaW5kaW5ncyh0aGlzLCBiaW5kaW5ncykpO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmJpbmRFdmVudHMoZW50aXR5LCBiaW5kaW5ncykge1xuICBpZiAoIWVudGl0eSkgeyByZXR1cm4gdGhpczsgfVxuXG4gIGlmICghYmluZGluZ3MpIHtcbiAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoZW50aXR5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMuc3RvcExpc3RlbmluZyhlbnRpdHksIG5vcm1hbGl6ZUJpbmRpbmdzKHRoaXMsIGJpbmRpbmdzKSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEV4cG9ydCBQdWJsaWMgQVBJXG5leHBvcnQge1xuICBiaW5kRXZlbnRzLFxuICB1bmJpbmRFdmVudHNcbn07XG4iLCIvLyBCaW5kL1VuYmluZCBSYWRpbyBSZXF1ZXN0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyBUaGVzZSBtZXRob2RzIGFyZSB1c2VkIHRvIGJpbmQvdW5iaW5kIGEgYmFja2JvbmUucmFkaW8gcmVxdWVzdFxuLy8gdG8gbWV0aG9kcyBvbiBhIHRhcmdldCBvYmplY3QuXG4vL1xuLy8gVGhlIGZpcnN0IHBhcmFtZXRlciwgYHRhcmdldGAsIHdpbGwgc2V0IHRoZSBjb250ZXh0IG9mIHRoZSByZXBseSBtZXRob2Rcbi8vXG4vLyBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB0aGUgYFJhZGlvLmNoYW5uZWxgIHRvIGJpbmQgdGhlIHJlcGx5IHRvLlxuLy9cbi8vIFRoZSB0aGlyZCBwYXJhbWV0ZXIgaXMgYSBoYXNoIG9mIHsgXCJyZXF1ZXN0Om5hbWVcIjogXCJyZXBseUhhbmRsZXJcIiB9XG4vLyBjb25maWd1cmF0aW9uLiBBIGZ1bmN0aW9uIGNhbiBiZSBzdXBwbGllZCBpbnN0ZWFkIG9mIGEgc3RyaW5nIGhhbmRsZXIgbmFtZS5cblxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbm9ybWFsaXplTWV0aG9kcyBmcm9tICcuL25vcm1hbGl6ZS1tZXRob2RzJztcbmltcG9ydCBNYXJpb25ldHRlRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuXG5mdW5jdGlvbiBub3JtYWxpemVCaW5kaW5ncyhjb250ZXh0LCBiaW5kaW5ncykge1xuICBpZiAoIV8uaXNPYmplY3QoYmluZGluZ3MpKSB7XG4gICAgdGhyb3cgbmV3IE1hcmlvbmV0dGVFcnJvcih7XG4gICAgICBtZXNzYWdlOiAnQmluZGluZ3MgbXVzdCBiZSBhbiBvYmplY3QuJyxcbiAgICAgIHVybDogJ2NvbW1vbi5odG1sI2JpbmRyZXF1ZXN0cydcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemVNZXRob2RzLmNhbGwoY29udGV4dCwgYmluZGluZ3MpO1xufVxuXG5mdW5jdGlvbiBiaW5kUmVxdWVzdHMoY2hhbm5lbCwgYmluZGluZ3MpIHtcbiAgaWYgKCFjaGFubmVsIHx8ICFiaW5kaW5ncykgeyByZXR1cm4gdGhpczsgfVxuXG4gIGNoYW5uZWwucmVwbHkobm9ybWFsaXplQmluZGluZ3ModGhpcywgYmluZGluZ3MpLCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5iaW5kUmVxdWVzdHMoY2hhbm5lbCwgYmluZGluZ3MpIHtcbiAgaWYgKCFjaGFubmVsKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgaWYgKCFiaW5kaW5ncykge1xuICAgIGNoYW5uZWwuc3RvcFJlcGx5aW5nKG51bGwsIG51bGwsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2hhbm5lbC5zdG9wUmVwbHlpbmcobm9ybWFsaXplQmluZGluZ3ModGhpcywgYmluZGluZ3MpKTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IHtcbiAgYmluZFJlcXVlc3RzLFxuICB1bmJpbmRSZXF1ZXN0c1xufTtcbiIsIi8vIE1hcmlvbmV0dGUuZ2V0T3B0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBSZXRyaWV2ZSBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIG90aGVyIHZhbHVlIGZyb20gdGhlXG4vLyBvYmplY3Qgb3IgaXRzIGBvcHRpb25zYCwgd2l0aCBgb3B0aW9uc2AgdGFraW5nIHByZWNlZGVuY2UuXG5jb25zdCBnZXRPcHRpb24gPSBmdW5jdGlvbihvcHRpb25OYW1lKSB7XG4gIGlmICghb3B0aW9uTmFtZSkgeyByZXR1cm47IH1cbiAgaWYgKHRoaXMub3B0aW9ucyAmJiAodGhpcy5vcHRpb25zW29wdGlvbk5hbWVdICE9PSB1bmRlZmluZWQpKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc1tvcHRpb25OYW1lXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpc1tvcHRpb25OYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0T3B0aW9uO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbi8vIE1lcmdlIGBrZXlzYCBmcm9tIGBvcHRpb25zYCBvbnRvIGB0aGlzYFxuY29uc3QgbWVyZ2VPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucywga2V5cykge1xuICBpZiAoIW9wdGlvbnMpIHsgcmV0dXJuOyB9XG5cbiAgXy5lYWNoKGtleXMsIChrZXkpID0+IHtcbiAgICBjb25zdCBvcHRpb24gPSBvcHRpb25zW2tleV07XG4gICAgaWYgKG9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzW2tleV0gPSBvcHRpb247XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlT3B0aW9ucztcbiIsIi8vIERPTSBSZWZyZXNoXG4vLyAtLS0tLS0tLS0tLVxuXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuLy8gVHJpZ2dlciBtZXRob2Qgb24gY2hpbGRyZW4gdW5sZXNzIGEgcHVyZSBCYWNrYm9uZS5WaWV3XG5mdW5jdGlvbiB0cmlnZ2VyTWV0aG9kQ2hpbGRyZW4odmlldywgZXZlbnQsIHNob3VsZFRyaWdnZXIpIHtcbiAgaWYgKCF2aWV3Ll9nZXRJbW1lZGlhdGVDaGlsZHJlbikgeyByZXR1cm47IH1cbiAgXy5lYWNoKHZpZXcuX2dldEltbWVkaWF0ZUNoaWxkcmVuKCksIGNoaWxkID0+IHtcbiAgICBpZiAoIXNob3VsZFRyaWdnZXIoY2hpbGQpKSB7IHJldHVybjsgfVxuICAgIGNoaWxkLnRyaWdnZXJNZXRob2QoZXZlbnQsIGNoaWxkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFRyaWdnZXJBdHRhY2godmlldykge1xuICByZXR1cm4gIXZpZXcuX2lzQXR0YWNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEF0dGFjaCh2aWV3KSB7XG4gIGlmICghc2hvdWxkVHJpZ2dlckF0dGFjaCh2aWV3KSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgdmlldy5faXNBdHRhY2hlZCA9IHRydWU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRUcmlnZ2VyRGV0YWNoKHZpZXcpIHtcbiAgcmV0dXJuIHZpZXcuX2lzQXR0YWNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNob3VsZERldGFjaCh2aWV3KSB7XG4gIHZpZXcuX2lzQXR0YWNoZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJET01SZWZyZXNoKHZpZXcpIHtcbiAgaWYgKHZpZXcuX2lzQXR0YWNoZWQgJiYgdmlldy5faXNSZW5kZXJlZCkge1xuICAgIHZpZXcudHJpZ2dlck1ldGhvZCgnZG9tOnJlZnJlc2gnLCB2aWV3KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmlnZ2VyRE9NUmVtb3ZlKHZpZXcpIHtcbiAgaWYgKHZpZXcuX2lzQXR0YWNoZWQgJiYgdmlldy5faXNSZW5kZXJlZCkge1xuICAgIHZpZXcudHJpZ2dlck1ldGhvZCgnZG9tOnJlbW92ZScsIHZpZXcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUJlZm9yZUF0dGFjaCgpIHtcbiAgdHJpZ2dlck1ldGhvZENoaWxkcmVuKHRoaXMsICdiZWZvcmU6YXR0YWNoJywgc2hvdWxkVHJpZ2dlckF0dGFjaCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUF0dGFjaCgpIHtcbiAgdHJpZ2dlck1ldGhvZENoaWxkcmVuKHRoaXMsICdhdHRhY2gnLCBzaG91bGRBdHRhY2gpO1xuICB0cmlnZ2VyRE9NUmVmcmVzaCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQmVmb3JlRGV0YWNoKCkge1xuICB0cmlnZ2VyTWV0aG9kQ2hpbGRyZW4odGhpcywgJ2JlZm9yZTpkZXRhY2gnLCBzaG91bGRUcmlnZ2VyRGV0YWNoKTtcbiAgdHJpZ2dlckRPTVJlbW92ZSh0aGlzKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRGV0YWNoKCkge1xuICB0cmlnZ2VyTWV0aG9kQ2hpbGRyZW4odGhpcywgJ2RldGFjaCcsIHNob3VsZERldGFjaCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUJlZm9yZVJlbmRlcigpIHtcbiAgdHJpZ2dlckRPTVJlbW92ZSh0aGlzKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUmVuZGVyKCkge1xuICB0cmlnZ2VyRE9NUmVmcmVzaCh0aGlzKTtcbn1cblxuLy8gTW9uaXRvciBhIHZpZXcncyBzdGF0ZSwgcHJvcGFnYXRpbmcgYXR0YWNoL2RldGFjaCBldmVudHMgdG8gY2hpbGRyZW4gYW5kIGZpcmluZyBkb206cmVmcmVzaFxuLy8gd2hlbmV2ZXIgYSByZW5kZXJlZCB2aWV3IGlzIGF0dGFjaGVkIG9yIGFuIGF0dGFjaGVkIHZpZXcgaXMgcmVuZGVyZWQuXG5mdW5jdGlvbiBtb25pdG9yVmlld0V2ZW50cyh2aWV3KSB7XG4gIGlmICh2aWV3Ll9hcmVWaWV3RXZlbnRzTW9uaXRvcmVkIHx8IHZpZXcubW9uaXRvclZpZXdFdmVudHMgPT09IGZhbHNlKSB7IHJldHVybjsgfVxuXG4gIHZpZXcuX2FyZVZpZXdFdmVudHNNb25pdG9yZWQgPSB0cnVlO1xuXG4gIHZpZXcub24oe1xuICAgICdiZWZvcmU6YXR0YWNoJzogaGFuZGxlQmVmb3JlQXR0YWNoLFxuICAgICdhdHRhY2gnOiBoYW5kbGVBdHRhY2gsXG4gICAgJ2JlZm9yZTpkZXRhY2gnOiBoYW5kbGVCZWZvcmVEZXRhY2gsXG4gICAgJ2RldGFjaCc6IGhhbmRsZURldGFjaCxcbiAgICAnYmVmb3JlOnJlbmRlcic6IGhhbmRsZUJlZm9yZVJlbmRlcixcbiAgICAncmVuZGVyJzogaGFuZGxlUmVuZGVyXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtb25pdG9yVmlld0V2ZW50cztcbiIsIi8vIFRyaWdnZXIgTWV0aG9kXG4vLyAtLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBnZXRPcHRpb24gZnJvbSAnLi9nZXQtb3B0aW9uJztcblxuLy8gc3BsaXQgdGhlIGV2ZW50IG5hbWUgb24gdGhlIFwiOlwiXG5jb25zdCBzcGxpdHRlciA9IC8oXnw6KShcXHcpL2dpO1xuXG4vLyBPbmx5IGNhbGMgZ2V0T25NZXRob2ROYW1lIG9uY2VcbmNvbnN0IG1ldGhvZENhY2hlID0ge307XG5cbi8vIHRha2UgdGhlIGV2ZW50IHNlY3Rpb24gKFwic2VjdGlvbjE6c2VjdGlvbjI6c2VjdGlvbjNcIilcbi8vIGFuZCB0dXJuIGl0IGluIHRvIHVwcGVyY2FzZSBuYW1lIG9uU2VjdGlvbjFTZWN0aW9uMlNlY3Rpb24zXG5mdW5jdGlvbiBnZXRFdmVudE5hbWUobWF0Y2gsIHByZWZpeCwgZXZlbnROYW1lKSB7XG4gIHJldHVybiBldmVudE5hbWUudG9VcHBlckNhc2UoKTtcbn1cblxuY29uc3QgZ2V0T25NZXRob2ROYW1lID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKCFtZXRob2RDYWNoZVtldmVudF0pIHtcbiAgICBtZXRob2RDYWNoZVtldmVudF0gPSAnb24nICsgZXZlbnQucmVwbGFjZShzcGxpdHRlciwgZ2V0RXZlbnROYW1lKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RDYWNoZVtldmVudF07XG59O1xuXG4vLyBUcmlnZ2VyIGFuIGV2ZW50IGFuZC9vciBhIGNvcnJlc3BvbmRpbmcgbWV0aG9kIG5hbWUuIEV4YW1wbGVzOlxuLy9cbi8vIGB0aGlzLnRyaWdnZXJNZXRob2QoXCJmb29cIilgIHdpbGwgdHJpZ2dlciB0aGUgXCJmb29cIiBldmVudCBhbmRcbi8vIGNhbGwgdGhlIFwib25Gb29cIiBtZXRob2QuXG4vL1xuLy8gYHRoaXMudHJpZ2dlck1ldGhvZChcImZvbzpiYXJcIilgIHdpbGwgdHJpZ2dlciB0aGUgXCJmb286YmFyXCIgZXZlbnQgYW5kXG4vLyBjYWxsIHRoZSBcIm9uRm9vQmFyXCIgbWV0aG9kLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJpZ2dlck1ldGhvZChldmVudCkge1xuICAvLyBnZXQgdGhlIG1ldGhvZCBuYW1lIGZyb20gdGhlIGV2ZW50IG5hbWVcbiAgY29uc3QgbWV0aG9kTmFtZSA9IGdldE9uTWV0aG9kTmFtZShldmVudCk7XG4gIGNvbnN0IG1ldGhvZCA9IGdldE9wdGlvbi5jYWxsKHRoaXMsIG1ldGhvZE5hbWUpO1xuICBsZXQgcmVzdWx0O1xuXG4gIC8vIGNhbGwgdGhlIG9uTWV0aG9kTmFtZSBpZiBpdCBleGlzdHNcbiAgaWYgKF8uaXNGdW5jdGlvbihtZXRob2QpKSB7XG4gICAgLy8gcGFzcyBhbGwgYXJncywgZXhjZXB0IHRoZSBldmVudCBuYW1lXG4gICAgcmVzdWx0ID0gbWV0aG9kLmFwcGx5KHRoaXMsIF8uZHJvcChhcmd1bWVudHMpKTtcbiAgfVxuXG4gIC8vIHRyaWdnZXIgdGhlIGV2ZW50XG4gIHRoaXMudHJpZ2dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgdHJpZ2dlck1ldGhvZCBmcm9tICcuLi9jb21tb24vdHJpZ2dlci1tZXRob2QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRyaWdnZXJNZXRob2Rcbn1cbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEJhY2tib25lIGZyb20gJ2JhY2tib25lJztcblxuaW1wb3J0IGdldE9wdGlvbiBmcm9tICcuLi9jb21tb24vZ2V0LW9wdGlvbic7XG5pbXBvcnQgbWVyZ2VPcHRpb25zIGZyb20gJy4uL2NvbW1vbi9tZXJnZS1vcHRpb25zJztcbmltcG9ydCBub3JtYWxpemVNZXRob2RzIGZyb20gJy4uL2NvbW1vbi9ub3JtYWxpemUtbWV0aG9kcyc7XG5pbXBvcnQgdHJpZ2dlck1ldGhvZCBmcm9tICcuLi9jb21tb24vdHJpZ2dlci1tZXRob2QnO1xuaW1wb3J0IHtcbiAgYmluZEV2ZW50cyxcbiAgdW5iaW5kRXZlbnRzXG59IGZyb20gJy4uL2NvbW1vbi9iaW5kLWV2ZW50cyc7XG5pbXBvcnQge1xuICBiaW5kUmVxdWVzdHMsXG4gIHVuYmluZFJlcXVlc3RzXG59IGZyb20gJy4uL2NvbW1vbi9iaW5kLXJlcXVlc3RzJztcblxuY29uc3QgQ29tbW9uTWl4aW4gPSB7XG5cbiAgLy8gSW1wb3J0cyB0aGUgXCJub3JtYWxpemVNZXRob2RzXCIgdG8gdHJhbnNmb3JtIGhhc2hlcyBvZlxuICAvLyBldmVudHM9PmZ1bmN0aW9uIHJlZmVyZW5jZXMvbmFtZXMgdG8gYSBoYXNoIG9mIGV2ZW50cz0+ZnVuY3Rpb24gcmVmZXJlbmNlc1xuICBub3JtYWxpemVNZXRob2RzLFxuXG4gIF9zZXRPcHRpb25zKG9wdGlvbnMsIGNsYXNzT3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCBfLnJlc3VsdCh0aGlzLCAnb3B0aW9ucycpLCBvcHRpb25zKTtcbiAgICB0aGlzLm1lcmdlT3B0aW9ucyhvcHRpb25zLCBjbGFzc09wdGlvbnMpO1xuICB9LFxuXG4gIC8vIEEgaGFuZHkgd2F5IHRvIG1lcmdlIHBhc3NlZC1pbiBvcHRpb25zIG9udG8gdGhlIGluc3RhbmNlXG4gIG1lcmdlT3B0aW9ucyxcblxuICAvLyBFbmFibGUgZ2V0dGluZyBvcHRpb25zIGZyb20gdGhpcyBvciB0aGlzLm9wdGlvbnMgYnkgbmFtZS5cbiAgZ2V0T3B0aW9uLFxuXG4gIC8vIEVuYWJsZSBiaW5kaW5nIHZpZXcncyBldmVudHMgZnJvbSBhbm90aGVyIGVudGl0eS5cbiAgYmluZEV2ZW50cyxcblxuICAvLyBFbmFibGUgdW5iaW5kaW5nIHZpZXcncyBldmVudHMgZnJvbSBhbm90aGVyIGVudGl0eS5cbiAgdW5iaW5kRXZlbnRzLFxuXG4gIC8vIEVuYWJsZSBiaW5kaW5nIHZpZXcncyByZXF1ZXN0cy5cbiAgYmluZFJlcXVlc3RzLFxuXG4gIC8vIEVuYWJsZSB1bmJpbmRpbmcgdmlldydzIHJlcXVlc3RzLlxuICB1bmJpbmRSZXF1ZXN0cyxcblxuICB0cmlnZ2VyTWV0aG9kXG59O1xuXG5fLmV4dGVuZChDb21tb25NaXhpbiwgQmFja2JvbmUuRXZlbnRzKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tbW9uTWl4aW47XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIF9pc0Rlc3Ryb3llZDogZmFsc2UsXG5cbiAgaXNEZXN0cm95ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzRGVzdHJveWVkO1xuICB9LFxuXG4gIGRlc3Ryb3kob3B0aW9ucykge1xuICAgIGlmICh0aGlzLl9pc0Rlc3Ryb3llZCkgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6ZGVzdHJveScsIHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ2Rlc3Ryb3knLCB0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgUmFkaW8gZnJvbSAnYmFja2JvbmUucmFkaW8nO1xuaW1wb3J0IE1hcmlvbmV0dGVFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5cbi8vIE1peGluT3B0aW9uc1xuLy8gLSBjaGFubmVsTmFtZVxuLy8gLSByYWRpb0V2ZW50c1xuLy8gLSByYWRpb1JlcXVlc3RzXG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICBfaW5pdFJhZGlvKCkge1xuICAgIGNvbnN0IGNoYW5uZWxOYW1lID0gXy5yZXN1bHQodGhpcywgJ2NoYW5uZWxOYW1lJyk7XG5cbiAgICBpZiAoIWNoYW5uZWxOYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoIVJhZGlvKSB7XG4gICAgICB0aHJvdyBuZXcgTWFyaW9uZXR0ZUVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogJ1RoZSBkZXBlbmRlbmN5IFwiYmFja2JvbmUucmFkaW9cIiBpcyBtaXNzaW5nLicsXG4gICAgICAgIHVybDogJ2JhY2tib25lLnJhZGlvLmh0bWwjbWFyaW9uZXR0ZS1pbnRlZ3JhdGlvbidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLl9jaGFubmVsID0gUmFkaW8uY2hhbm5lbChjaGFubmVsTmFtZSk7XG5cbiAgICBjb25zdCByYWRpb0V2ZW50cyA9IF8ucmVzdWx0KHRoaXMsICdyYWRpb0V2ZW50cycpO1xuICAgIHRoaXMuYmluZEV2ZW50cyhjaGFubmVsLCByYWRpb0V2ZW50cyk7XG5cbiAgICBjb25zdCByYWRpb1JlcXVlc3RzID0gXy5yZXN1bHQodGhpcywgJ3JhZGlvUmVxdWVzdHMnKTtcbiAgICB0aGlzLmJpbmRSZXF1ZXN0cyhjaGFubmVsLCByYWRpb1JlcXVlc3RzKTtcblxuICAgIHRoaXMub24oJ2Rlc3Ryb3knLCB0aGlzLl9kZXN0cm95UmFkaW8pO1xuICB9LFxuXG4gIF9kZXN0cm95UmFkaW8oKSB7XG4gICAgdGhpcy5fY2hhbm5lbC5zdG9wUmVwbHlpbmcobnVsbCwgbnVsbCwgdGhpcyk7XG4gIH0sXG5cbiAgZ2V0Q2hhbm5lbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhbm5lbDtcbiAgfVxufTtcbiIsIi8vIE9iamVjdFxuLy8gLS0tLS0tXG5cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGV4dGVuZCBmcm9tICcuL3V0aWxzL2V4dGVuZCc7XG5pbXBvcnQgQ29tbW9uTWl4aW4gZnJvbSAnLi9taXhpbnMvY29tbW9uJztcbmltcG9ydCBEZXN0cm95TWl4aW4gZnJvbSAnLi9taXhpbnMvZGVzdHJveSc7XG5pbXBvcnQgUmFkaW9NaXhpbiBmcm9tICcuL21peGlucy9yYWRpbyc7XG5cbmNvbnN0IENsYXNzT3B0aW9ucyA9IFtcbiAgJ2NoYW5uZWxOYW1lJyxcbiAgJ3JhZGlvRXZlbnRzJyxcbiAgJ3JhZGlvUmVxdWVzdHMnXG5dO1xuXG4vLyBPYmplY3QgYm9ycm93cyBtYW55IGNvbnZlbnRpb25zIGFuZCB1dGlsaXRpZXMgZnJvbSBCYWNrYm9uZS5cbmNvbnN0IE1hcmlvbmV0dGVPYmplY3QgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMuX3NldE9wdGlvbnMob3B0aW9ucywgQ2xhc3NPcHRpb25zKTtcbiAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKHRoaXMuY2lkUHJlZml4KTtcbiAgdGhpcy5faW5pdFJhZGlvKCk7XG4gIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuTWFyaW9uZXR0ZU9iamVjdC5leHRlbmQgPSBleHRlbmQ7XG5cbi8vIE9iamVjdCBNZXRob2RzXG4vLyAtLS0tLS0tLS0tLS0tLVxuXG5fLmV4dGVuZChNYXJpb25ldHRlT2JqZWN0LnByb3RvdHlwZSwgQ29tbW9uTWl4aW4sIERlc3Ryb3lNaXhpbiwgUmFkaW9NaXhpbiwge1xuICBjaWRQcmVmaXg6ICdtbm8nLFxuXG4gIC8vIFRoaXMgaXMgYSBub29wIG1ldGhvZCBpbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuXG4gIGluaXRpYWxpemUoKSB7fVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmlvbmV0dGVPYmplY3Q7XG4iLCIvLyBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgaW52b2tlIG1ldGhvZCAoaHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvI2ludm9rZSkgd2l0aCBzdXBwb3J0IGZvclxuLy8gbG9kYXNoIHYzLCB2NCwgYW5kIHVuZGVyc2NvcmUuanNcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBfLmludm9rZU1hcCB8fCBfLmludm9rZTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IE1hcmlvbmV0dGVFcnJvciBmcm9tICcuLi91dGlscy9lcnJvcic7XG5pbXBvcnQgX2ludm9rZSBmcm9tICcuLi91dGlscy9pbnZva2UnO1xuXG4vLyBNaXhpbk9wdGlvbnNcbi8vIC0gYmVoYXZpb3JzXG5cbi8vIFRha2VzIGNhcmUgb2YgZ2V0dGluZyB0aGUgYmVoYXZpb3IgY2xhc3Ncbi8vIGdpdmVuIG9wdGlvbnMgYW5kIGEga2V5LlxuLy8gSWYgYSB1c2VyIHBhc3NlcyBpbiBvcHRpb25zLmJlaGF2aW9yQ2xhc3Ncbi8vIGRlZmF1bHQgdG8gdXNpbmcgdGhhdC5cbi8vIElmIGEgdXNlciBwYXNzZXMgaW4gYSBCZWhhdmlvciBDbGFzcyBkaXJlY3RseSwgdXNlIHRoYXRcbi8vIE90aGVyd2lzZSBhbiBlcnJvciBpcyB0aHJvd25cbmZ1bmN0aW9uIGdldEJlaGF2aW9yQ2xhc3Mob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5iZWhhdmlvckNsYXNzKSB7XG4gICAgcmV0dXJuIHsgQmVoYXZpb3JDbGFzczogb3B0aW9ucy5iZWhhdmlvckNsYXNzLCBvcHRpb25zIH07XG4gIH1cblxuICAvL3RyZWF0IGZ1bmN0aW9ucyBhcyBhIEJlaGF2aW9yIGNvbnN0cnVjdG9yXG4gIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICByZXR1cm4geyBCZWhhdmlvckNsYXNzOiBvcHRpb25zLCBvcHRpb25zOiB7fSB9O1xuICB9XG5cbiAgdGhyb3cgbmV3IE1hcmlvbmV0dGVFcnJvcih7XG4gICAgbWVzc2FnZTogJ1VuYWJsZSB0byBnZXQgYmVoYXZpb3IgY2xhc3MuIEEgQmVoYXZpb3IgY29uc3RydWN0b3Igc2hvdWxkIGJlIHBhc3NlZCBkaXJlY3RseSBvciBhcyBiZWhhdmlvckNsYXNzIHByb3BlcnR5IG9mIG9wdGlvbnMnLFxuICAgIHVybDogJ21hcmlvbmV0dGUuYmVoYXZpb3IuaHRtbCNkZWZpbmluZy1hbmQtYXR0YWNoaW5nLWJlaGF2aW9ycydcbiAgfSk7XG59XG5cbi8vIEl0ZXJhdGUgb3ZlciB0aGUgYmVoYXZpb3JzIG9iamVjdCwgZm9yIGVhY2ggYmVoYXZpb3Jcbi8vIGluc3RhbnRpYXRlIGl0IGFuZCBnZXQgaXRzIGdyb3VwZWQgYmVoYXZpb3JzLlxuLy8gVGhpcyBhY2NlcHRzIGEgbGlzdCBvZiBiZWhhdmlvcnMgaW4gZWl0aGVyIGFuIG9iamVjdCBvciBhcnJheSBmb3JtXG5mdW5jdGlvbiBwYXJzZUJlaGF2aW9ycyh2aWV3LCBiZWhhdmlvcnMsIGFsbEJlaGF2aW9ycykge1xuICByZXR1cm4gXy5yZWR1Y2UoYmVoYXZpb3JzLCAocmVkdWNlZEJlaGF2aW9ycywgYmVoYXZpb3JEZWZpbml0b24pID0+IHtcbiAgICBjb25zdCB7IEJlaGF2aW9yQ2xhc3MsIG9wdGlvbnMgfSA9IGdldEJlaGF2aW9yQ2xhc3MoYmVoYXZpb3JEZWZpbml0b24pO1xuICAgIGNvbnN0IGJlaGF2aW9yID0gbmV3IEJlaGF2aW9yQ2xhc3Mob3B0aW9ucywgdmlldyk7XG4gICAgcmVkdWNlZEJlaGF2aW9ycy5wdXNoKGJlaGF2aW9yKTtcblxuICAgIHJldHVybiBwYXJzZUJlaGF2aW9ycyh2aWV3LCBfLnJlc3VsdChiZWhhdmlvciwgJ2JlaGF2aW9ycycpLCByZWR1Y2VkQmVoYXZpb3JzKTtcbiAgfSwgYWxsQmVoYXZpb3JzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfaW5pdEJlaGF2aW9ycygpIHtcbiAgICB0aGlzLl9iZWhhdmlvcnMgPSBwYXJzZUJlaGF2aW9ycyh0aGlzLCBfLnJlc3VsdCh0aGlzLCAnYmVoYXZpb3JzJyksIFtdKTtcbiAgfSxcblxuICBfZ2V0QmVoYXZpb3JUcmlnZ2VycygpIHtcbiAgICBjb25zdCB0cmlnZ2VycyA9IF9pbnZva2UodGhpcy5fYmVoYXZpb3JzLCAnX2dldFRyaWdnZXJzJyk7XG4gICAgcmV0dXJuIF8ucmVkdWNlKHRyaWdnZXJzLCBmdW5jdGlvbihtZW1vLCBfdHJpZ2dlcnMpIHtcbiAgICAgIHJldHVybiBfLmV4dGVuZChtZW1vLCBfdHJpZ2dlcnMpO1xuICAgIH0sIHt9KTtcbiAgfSxcblxuICBfZ2V0QmVoYXZpb3JFdmVudHMoKSB7XG4gICAgY29uc3QgZXZlbnRzID0gX2ludm9rZSh0aGlzLl9iZWhhdmlvcnMsICdfZ2V0RXZlbnRzJyk7XG4gICAgcmV0dXJuIF8ucmVkdWNlKGV2ZW50cywgZnVuY3Rpb24obWVtbywgX2V2ZW50cykge1xuICAgICAgcmV0dXJuIF8uZXh0ZW5kKG1lbW8sIF9ldmVudHMpO1xuICAgIH0sIHt9KTtcbiAgfSxcblxuICAvLyBwcm94eSBiZWhhdmlvciAkZWwgdG8gdGhlIHZpZXcncyAkZWwuXG4gIF9wcm94eUJlaGF2aW9yVmlld1Byb3BlcnRpZXMoKSB7XG4gICAgX2ludm9rZSh0aGlzLl9iZWhhdmlvcnMsICdwcm94eVZpZXdQcm9wZXJ0aWVzJyk7XG4gIH0sXG5cbiAgLy8gZGVsZWdhdGUgbW9kZWxFdmVudHMgYW5kIGNvbGxlY3Rpb25FdmVudHNcbiAgX2RlbGVnYXRlQmVoYXZpb3JFbnRpdHlFdmVudHMoKSB7XG4gICAgX2ludm9rZSh0aGlzLl9iZWhhdmlvcnMsICdkZWxlZ2F0ZUVudGl0eUV2ZW50cycpO1xuICB9LFxuXG4gIC8vIHVuZGVsZWdhdGUgbW9kZWxFdmVudHMgYW5kIGNvbGxlY3Rpb25FdmVudHNcbiAgX3VuZGVsZWdhdGVCZWhhdmlvckVudGl0eUV2ZW50cygpIHtcbiAgICBfaW52b2tlKHRoaXMuX2JlaGF2aW9ycywgJ3VuZGVsZWdhdGVFbnRpdHlFdmVudHMnKTtcbiAgfSxcblxuICBfZGVzdHJveUJlaGF2aW9ycyhvcHRpb25zKSB7XG4gICAgLy8gQ2FsbCBkZXN0cm95IG9uIGVhY2ggYmVoYXZpb3IgYWZ0ZXJcbiAgICAvLyBkZXN0cm95aW5nIHRoZSB2aWV3LlxuICAgIC8vIFRoaXMgdW5iaW5kcyBldmVudCBsaXN0ZW5lcnNcbiAgICAvLyB0aGF0IGJlaGF2aW9ycyBoYXZlIHJlZ2lzdGVyZWQgZm9yLlxuICAgIF9pbnZva2UodGhpcy5fYmVoYXZpb3JzLCAnZGVzdHJveScsIG9wdGlvbnMpO1xuICB9LFxuXG4gIC8vIFJlbW92ZSBhIGJlaGF2aW9yXG4gIF9yZW1vdmVCZWhhdmlvcihiZWhhdmlvcikge1xuICAgIC8vIERvbid0IHdvcnJ5IGFib3V0IHRoZSBjbGVhbiB1cCBpZiB0aGUgdmlldyBpcyBkZXN0cm95ZWRcbiAgICBpZiAodGhpcy5faXNEZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAvLyBSZW1vdmUgYmVoYXZpb3Itb25seSB0cmlnZ2VycyBhbmQgZXZlbnRzXG4gICAgdGhpcy51bmRlbGVnYXRlKGAudHJpZyR7IGJlaGF2aW9yLmNpZCB9IC4keyBiZWhhdmlvci5jaWQgfWApO1xuXG4gICAgdGhpcy5fYmVoYXZpb3JzID0gXy53aXRob3V0KHRoaXMuX2JlaGF2aW9ycywgYmVoYXZpb3IpO1xuICB9LFxuXG4gIF9iaW5kQmVoYXZpb3JVSUVsZW1lbnRzKCkge1xuICAgIF9pbnZva2UodGhpcy5fYmVoYXZpb3JzLCAnYmluZFVJRWxlbWVudHMnKTtcbiAgfSxcblxuICBfdW5iaW5kQmVoYXZpb3JVSUVsZW1lbnRzKCkge1xuICAgIF9pbnZva2UodGhpcy5fYmVoYXZpb3JzLCAndW5iaW5kVUlFbGVtZW50cycpO1xuICB9LFxuXG4gIF90cmlnZ2VyRXZlbnRPbkJlaGF2aW9ycyhldmVudE5hbWUsIHZpZXcsIG9wdGlvbnMpIHtcbiAgICBfaW52b2tlKHRoaXMuX2JlaGF2aW9ycywgJ3RyaWdnZXJNZXRob2QnLCBldmVudE5hbWUsIHZpZXcsIG9wdGlvbnMpO1xuICB9XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbi8vIE1peGluT3B0aW9uc1xuLy8gLSBjb2xsZWN0aW9uRXZlbnRzXG4vLyAtIG1vZGVsRXZlbnRzXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gSGFuZGxlIGBtb2RlbEV2ZW50c2AsIGFuZCBgY29sbGVjdGlvbkV2ZW50c2AgY29uZmlndXJhdGlvblxuICBfZGVsZWdhdGVFbnRpdHlFdmVudHMobW9kZWwsIGNvbGxlY3Rpb24pIHtcbiAgICBpZiAobW9kZWwpIHtcbiAgICAgIHRoaXMuX21vZGVsRXZlbnRzID0gXy5yZXN1bHQodGhpcywgJ21vZGVsRXZlbnRzJyk7XG4gICAgICB0aGlzLmJpbmRFdmVudHMobW9kZWwsIHRoaXMuX21vZGVsRXZlbnRzKTtcbiAgICB9XG5cbiAgICBpZiAoY29sbGVjdGlvbikge1xuICAgICAgdGhpcy5fY29sbGVjdGlvbkV2ZW50cyA9IF8ucmVzdWx0KHRoaXMsICdjb2xsZWN0aW9uRXZlbnRzJyk7XG4gICAgICB0aGlzLmJpbmRFdmVudHMoY29sbGVjdGlvbiwgdGhpcy5fY29sbGVjdGlvbkV2ZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFJlbW92ZSBhbnkgcHJldmlvdXNseSBkZWxlZ2F0ZSBlbnRpdHkgZXZlbnRzXG4gIF91bmRlbGVnYXRlRW50aXR5RXZlbnRzKG1vZGVsLCBjb2xsZWN0aW9uKSB7XG4gICAgaWYgKHRoaXMuX21vZGVsRXZlbnRzKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50cyhtb2RlbCwgdGhpcy5fbW9kZWxFdmVudHMpO1xuICAgICAgZGVsZXRlIHRoaXMuX21vZGVsRXZlbnRzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb2xsZWN0aW9uRXZlbnRzKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50cyhjb2xsZWN0aW9uLCB0aGlzLl9jb2xsZWN0aW9uRXZlbnRzKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9jb2xsZWN0aW9uRXZlbnRzO1xuICAgIH1cbiAgfSxcblxuICAvLyBSZW1vdmUgY2FjaGVkIGV2ZW50IGhhbmRsZXJzXG4gIF9kZWxldGVFbnRpdHlFdmVudEhhbmRsZXJzKCkge1xuICAgIGRlbGV0ZSB0aGlzLl9tb2RlbEV2ZW50cztcbiAgICBkZWxldGUgdGhpcy5fY29sbGVjdGlvbkV2ZW50cztcbiAgfVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG4vLyBNaXhpbk9wdGlvbnNcbi8vIC0gdGVtcGxhdGVcbi8vIC0gdGVtcGxhdGVDb250ZXh0XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBJbnRlcm5hbCBtZXRob2QgdG8gcmVuZGVyIHRoZSB0ZW1wbGF0ZSB3aXRoIHRoZSBzZXJpYWxpemVkIGRhdGFcbiAgLy8gYW5kIHRlbXBsYXRlIGNvbnRleHRcbiAgX3JlbmRlclRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgLy8gQWRkIGluIGVudGl0eSBkYXRhIGFuZCB0ZW1wbGF0ZSBjb250ZXh0XG4gICAgY29uc3QgZGF0YSA9IHRoaXMubWl4aW5UZW1wbGF0ZUNvbnRleHQodGhpcy5zZXJpYWxpemVEYXRhKCkpIHx8IHt9O1xuXG4gICAgLy8gUmVuZGVyIGFuZCBhZGQgdG8gZWxcbiAgICBjb25zdCBodG1sID0gdGhpcy5fcmVuZGVySHRtbCh0ZW1wbGF0ZSwgZGF0YSk7XG4gICAgaWYgKHR5cGVvZiBodG1sICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5hdHRhY2hFbENvbnRlbnQoaHRtbCk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEdldCB0aGUgdGVtcGxhdGUgZm9yIHRoaXMgdmlldyBpbnN0YW5jZS5cbiAgLy8gWW91IGNhbiBzZXQgYSBgdGVtcGxhdGVgIGF0dHJpYnV0ZSBpbiB0aGUgdmlldyBkZWZpbml0aW9uXG4gIC8vIG9yIHBhc3MgYSBgdGVtcGxhdGU6IFRlbXBsYXRlRnVuY3Rpb25gIHBhcmFtZXRlciBpblxuICAvLyB0byB0aGUgY29uc3RydWN0b3Igb3B0aW9ucy5cbiAgZ2V0VGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGU7XG4gIH0sXG5cbiAgLy8gTWl4IGluIHRlbXBsYXRlIGNvbnRleHQgbWV0aG9kcy4gTG9va3MgZm9yIGFcbiAgLy8gYHRlbXBsYXRlQ29udGV4dGAgYXR0cmlidXRlLCB3aGljaCBjYW4gZWl0aGVyIGJlIGFuXG4gIC8vIG9iamVjdCBsaXRlcmFsLCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3RcbiAgLy8gbGl0ZXJhbC4gQWxsIG1ldGhvZHMgYW5kIGF0dHJpYnV0ZXMgZnJvbSB0aGlzIG9iamVjdFxuICAvLyBhcmUgY29waWVzIHRvIHRoZSBvYmplY3QgcGFzc2VkIGluLlxuICBtaXhpblRlbXBsYXRlQ29udGV4dChzZXJpYWxpemVkRGF0YSkge1xuICAgIGNvbnN0IHRlbXBsYXRlQ29udGV4dCA9IF8ucmVzdWx0KHRoaXMsICd0ZW1wbGF0ZUNvbnRleHQnKTtcbiAgICBpZiAoIXRlbXBsYXRlQ29udGV4dCkgeyByZXR1cm4gc2VyaWFsaXplZERhdGE7IH1cbiAgICBpZiAoIXNlcmlhbGl6ZWREYXRhKSB7IHJldHVybiB0ZW1wbGF0ZUNvbnRleHQ7IH1cbiAgICByZXR1cm4gXy5leHRlbmQoe30sIHNlcmlhbGl6ZWREYXRhLCB0ZW1wbGF0ZUNvbnRleHQpO1xuICB9LFxuXG4gIC8vIFNlcmlhbGl6ZSB0aGUgdmlldydzIG1vZGVsICpvciogY29sbGVjdGlvbiwgaWZcbiAgLy8gaXQgZXhpc3RzLCBmb3IgdGhlIHRlbXBsYXRlXG4gIHNlcmlhbGl6ZURhdGEoKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIG1vZGVsLCB3ZSBzZXJpYWxpemUgdGhhdFxuICAgIGlmICh0aGlzLm1vZGVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVNb2RlbCgpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgd2Ugc2VyaWFsaXplIHRoZSBjb2xsZWN0aW9uLFxuICAgIC8vIG1ha2luZyBpdCBhdmFpbGFibGUgdW5kZXIgdGhlIGBpdGVtc2AgcHJvcGVydHlcbiAgICBpZiAodGhpcy5jb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogdGhpcy5zZXJpYWxpemVDb2xsZWN0aW9uKClcbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8vIFByZXBhcmVzIHRoZSBzcGVjaWFsIGBtb2RlbGAgcHJvcGVydHkgb2YgYSB2aWV3XG4gIC8vIGZvciBiZWluZyBkaXNwbGF5ZWQgaW4gdGhlIHRlbXBsYXRlLiBPdmVycmlkZSB0aGlzIGlmXG4gIC8vIHlvdSBuZWVkIGEgY3VzdG9tIHRyYW5zZm9ybWF0aW9uIGZvciB5b3VyIHZpZXcncyBtb2RlbFxuICBzZXJpYWxpemVNb2RlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5hdHRyaWJ1dGVzO1xuICB9LFxuXG4gIC8vIFNlcmlhbGl6ZSBhIGNvbGxlY3Rpb25cbiAgc2VyaWFsaXplQ29sbGVjdGlvbigpIHtcbiAgICByZXR1cm4gXy5tYXAodGhpcy5jb2xsZWN0aW9uLm1vZGVscywgbW9kZWwgPT4gbW9kZWwuYXR0cmlidXRlcyk7XG4gIH0sXG5cbiAgLy8gUmVuZGVycyB0aGUgZGF0YSBpbnRvIHRoZSB0ZW1wbGF0ZVxuICBfcmVuZGVySHRtbCh0ZW1wbGF0ZSwgZGF0YSkge1xuICAgIHJldHVybiB0ZW1wbGF0ZShkYXRhKTtcbiAgfSxcblxuICAvLyBBdHRhY2hlcyB0aGUgY29udGVudCBvZiBhIGdpdmVuIHZpZXcuXG4gIC8vIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZGVuIHRvIG9wdGltaXplIHJlbmRlcmluZyxcbiAgLy8gb3IgdG8gcmVuZGVyIGluIGEgbm9uIHN0YW5kYXJkIHdheS5cbiAgLy9cbiAgLy8gRm9yIGV4YW1wbGUsIHVzaW5nIGBpbm5lckhUTUxgIGluc3RlYWQgb2YgYCRlbC5odG1sYFxuICAvL1xuICAvLyBgYGBqc1xuICAvLyBhdHRhY2hFbENvbnRlbnQoaHRtbCkge1xuICAvLyAgIHRoaXMuZWwuaW5uZXJIVE1MID0gaHRtbDtcbiAgLy8gfVxuICAvLyBgYGBcbiAgYXR0YWNoRWxDb250ZW50KGh0bWwpIHtcbiAgICB0aGlzLkRvbS5zZXRDb250ZW50cyh0aGlzLmVsLCBodG1sLCB0aGlzLiRlbCk7XG4gIH1cbn07XG4iLCIvLyBCb3Jyb3cgZXZlbnQgc3BsaXR0ZXIgZnJvbSBCYWNrYm9uZVxuY29uc3QgZGVsZWdhdGVFdmVudFNwbGl0dGVyID0gL14oXFxTKylcXHMqKC4qKSQvO1xuXG4vLyBTZXQgZXZlbnQgbmFtZSB0byBiZSBuYW1lc3BhY2VkIHVzaW5nIGEgdW5pcXVlIGluZGV4XG4vLyB0byBnZW5lcmF0ZSBhIG5vbiBjb2xsaWRpbmcgZXZlbnQgbmFtZXNwYWNlXG4vLyBodHRwOi8vYXBpLmpxdWVyeS5jb20vZXZlbnQubmFtZXNwYWNlL1xuY29uc3QgZ2V0TmFtZXNwYWNlZEV2ZW50TmFtZSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgbmFtZXNwYWNlKSB7XG4gIGNvbnN0IG1hdGNoID0gZXZlbnROYW1lLm1hdGNoKGRlbGVnYXRlRXZlbnRTcGxpdHRlcik7XG4gIHJldHVybiBgJHsgbWF0Y2hbMV0gfS4keyBuYW1lc3BhY2UgfSAkeyBtYXRjaFsyXSB9YDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5hbWVzcGFjZWRFdmVudE5hbWU7XG4iLCIvLyBBZGQgRmVhdHVyZSBmbGFncyBoZXJlXG4vLyBlLmcuICdjbGFzcycgPT4gZmFsc2VcbmNvbnN0IEZFQVRVUkVTID0ge1xuICBjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsXG4gIHRyaWdnZXJzU3RvcFByb3BhZ2F0aW9uOiB0cnVlLFxuICB0cmlnZ2Vyc1ByZXZlbnREZWZhdWx0OiB0cnVlLFxuICBERVZfTU9ERTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGlzRW5hYmxlZChuYW1lKSB7XG4gIHJldHVybiAhIUZFQVRVUkVTW25hbWVdO1xufVxuXG5mdW5jdGlvbiBzZXRFbmFibGVkKG5hbWUsIHN0YXRlKSB7XG4gIHJldHVybiBGRUFUVVJFU1tuYW1lXSA9IHN0YXRlO1xufVxuXG5leHBvcnQge1xuICBGRUFUVVJFUyxcbiAgc2V0RW5hYmxlZCxcbiAgaXNFbmFibGVkXG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgZ2V0TmFtZXNwYWNlZEV2ZW50TmFtZSBmcm9tICcuLi91dGlscy9nZXQtbmFtZXNwYWNlZC1ldmVudC1uYW1lJztcbmltcG9ydCB7IGlzRW5hYmxlZCB9IGZyb20gJy4uL2NvbmZpZy9mZWF0dXJlcyc7XG5cbi8vIEludGVybmFsIG1ldGhvZCB0byBjcmVhdGUgYW4gZXZlbnQgaGFuZGxlciBmb3IgYSBnaXZlbiBgdHJpZ2dlckRlZmAgbGlrZVxuLy8gJ2NsaWNrOmZvbydcbmZ1bmN0aW9uIGJ1aWxkVmlld1RyaWdnZXIodmlldywgdHJpZ2dlckRlZikge1xuICBpZiAoXy5pc1N0cmluZyh0cmlnZ2VyRGVmKSkge1xuICAgIHRyaWdnZXJEZWYgPSB7ZXZlbnQ6IHRyaWdnZXJEZWZ9O1xuICB9XG5cbiAgY29uc3QgZXZlbnROYW1lID0gdHJpZ2dlckRlZi5ldmVudDtcblxuICBsZXQgc2hvdWxkUHJldmVudERlZmF1bHQgPSAhIXRyaWdnZXJEZWYucHJldmVudERlZmF1bHQ7XG5cbiAgaWYgKGlzRW5hYmxlZCgndHJpZ2dlcnNQcmV2ZW50RGVmYXVsdCcpKSB7XG4gICAgc2hvdWxkUHJldmVudERlZmF1bHQgPSB0cmlnZ2VyRGVmLnByZXZlbnREZWZhdWx0ICE9PSBmYWxzZTtcbiAgfVxuXG4gIGxldCBzaG91bGRTdG9wUHJvcGFnYXRpb24gPSAhIXRyaWdnZXJEZWYuc3RvcFByb3BhZ2F0aW9uO1xuXG4gIGlmIChpc0VuYWJsZWQoJ3RyaWdnZXJzU3RvcFByb3BhZ2F0aW9uJykpIHtcbiAgICBzaG91bGRTdG9wUHJvcGFnYXRpb24gPSB0cmlnZ2VyRGVmLnN0b3BQcm9wYWdhdGlvbiAhPT0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoc2hvdWxkUHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdmlldy50cmlnZ2VyTWV0aG9kKGV2ZW50TmFtZSwgdmlldywgZXZlbnQsIC4uLmFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gQ29uZmlndXJlIGB0cmlnZ2Vyc2AgdG8gZm9yd2FyZCBET00gZXZlbnRzIHRvIHZpZXdcbiAgLy8gZXZlbnRzLiBgdHJpZ2dlcnM6IHtcImNsaWNrIC5mb29cIjogXCJkbzpmb29cIn1gXG4gIF9nZXRWaWV3VHJpZ2dlcnModmlldywgdHJpZ2dlcnMpIHtcbiAgICAvLyBDb25maWd1cmUgdGhlIHRyaWdnZXJzLCBwcmV2ZW50IGRlZmF1bHRcbiAgICAvLyBhY3Rpb24gYW5kIHN0b3AgcHJvcGFnYXRpb24gb2YgRE9NIGV2ZW50c1xuICAgIHJldHVybiBfLnJlZHVjZSh0cmlnZ2VycywgKGV2ZW50cywgdmFsdWUsIGtleSkgPT4ge1xuICAgICAga2V5ID0gZ2V0TmFtZXNwYWNlZEV2ZW50TmFtZShrZXksIGB0cmlnJHsgdGhpcy5jaWQgfWApO1xuICAgICAgZXZlbnRzW2tleV0gPSBidWlsZFZpZXdUcmlnZ2VyKHZpZXcsIHZhbHVlKTtcbiAgICAgIHJldHVybiBldmVudHM7XG4gICAgfSwge30pO1xuICB9XG5cbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbi8vIGFsbG93cyBmb3IgdGhlIHVzZSBvZiB0aGUgQHVpLiBzeW50YXggd2l0aGluXG4vLyBhIGdpdmVuIGtleSBmb3IgdHJpZ2dlcnMgYW5kIGV2ZW50c1xuLy8gc3dhcHMgdGhlIEB1aSB3aXRoIHRoZSBhc3NvY2lhdGVkIHNlbGVjdG9yLlxuLy8gUmV0dXJucyBhIG5ldywgbm9uLW11dGF0ZWQsIHBhcnNlZCBldmVudHMgaGFzaC5cbmNvbnN0IG5vcm1hbGl6ZVVJS2V5cyA9IGZ1bmN0aW9uKGhhc2gsIHVpKSB7XG4gIHJldHVybiBfLnJlZHVjZShoYXNoLCAobWVtbywgdmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gbm9ybWFsaXplVUlTdHJpbmcoa2V5LCB1aSk7XG4gICAgbWVtb1tub3JtYWxpemVkS2V5XSA9IHZhbDtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xufTtcblxuY29uc3QgdWlSZWdFeCA9IC9AdWlcXC5bYS16QS1aLV8kMC05XSovZztcblxuLy8gdXRpbGl0eSBtZXRob2QgZm9yIHBhcnNpbmcgQHVpLiBzeW50YXggc3RyaW5nc1xuLy8gaW50byBhc3NvY2lhdGVkIHNlbGVjdG9yXG5jb25zdCBub3JtYWxpemVVSVN0cmluZyA9IGZ1bmN0aW9uKHVpU3RyaW5nLCB1aSkge1xuICByZXR1cm4gdWlTdHJpbmcucmVwbGFjZSh1aVJlZ0V4LCAocikgPT4ge1xuICAgIHJldHVybiB1aVtyLnNsaWNlKDQpXTtcbiAgfSk7XG59O1xuXG4vLyBhbGxvd3MgZm9yIHRoZSB1c2Ugb2YgdGhlIEB1aS4gc3ludGF4IHdpdGhpblxuLy8gYSBnaXZlbiB2YWx1ZSBmb3IgcmVnaW9uc1xuLy8gc3dhcHMgdGhlIEB1aSB3aXRoIHRoZSBhc3NvY2lhdGVkIHNlbGVjdG9yXG5jb25zdCBub3JtYWxpemVVSVZhbHVlcyA9IGZ1bmN0aW9uKGhhc2gsIHVpLCBwcm9wZXJ0eSkge1xuICBfLmVhY2goaGFzaCwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKF8uaXNTdHJpbmcodmFsKSkge1xuICAgICAgaGFzaFtrZXldID0gbm9ybWFsaXplVUlTdHJpbmcodmFsLCB1aSk7XG4gICAgfSBlbHNlIGlmICh2YWwpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5VmFsID0gdmFsW3Byb3BlcnR5XTtcbiAgICAgIGlmIChfLmlzU3RyaW5nKHByb3BlcnR5VmFsKSkge1xuICAgICAgICB2YWxbcHJvcGVydHldID0gbm9ybWFsaXplVUlTdHJpbmcocHJvcGVydHlWYWwsIHVpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaGFzaDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBub3JtYWxpemUgdGhlIGtleXMgb2YgcGFzc2VkIGhhc2ggd2l0aCB0aGUgdmlld3MgYHVpYCBzZWxlY3RvcnMuXG4gIC8vIGB7XCJAdWkuZm9vXCI6IFwiYmFyXCJ9YFxuICBub3JtYWxpemVVSUtleXMoaGFzaCkge1xuICAgIGNvbnN0IHVpQmluZGluZ3MgPSB0aGlzLl9nZXRVSUJpbmRpbmdzKCk7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVVJS2V5cyhoYXNoLCB1aUJpbmRpbmdzKTtcbiAgfSxcblxuICAvLyBub3JtYWxpemUgdGhlIHBhc3NlZCBzdHJpbmcgd2l0aCB0aGUgdmlld3MgYHVpYCBzZWxlY3RvcnMuXG4gIC8vIGBcIkB1aS5iYXJcImBcbiAgbm9ybWFsaXplVUlTdHJpbmcodWlTdHJpbmcpIHtcbiAgICBjb25zdCB1aUJpbmRpbmdzID0gdGhpcy5fZ2V0VUlCaW5kaW5ncygpO1xuICAgIHJldHVybiBub3JtYWxpemVVSVN0cmluZyh1aVN0cmluZywgdWlCaW5kaW5ncyk7XG4gIH0sXG5cbiAgLy8gbm9ybWFsaXplIHRoZSB2YWx1ZXMgb2YgcGFzc2VkIGhhc2ggd2l0aCB0aGUgdmlld3MgYHVpYCBzZWxlY3RvcnMuXG4gIC8vIGB7Zm9vOiBcIkB1aS5iYXJcIn1gXG4gIG5vcm1hbGl6ZVVJVmFsdWVzKGhhc2gsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgdWlCaW5kaW5ncyA9IHRoaXMuX2dldFVJQmluZGluZ3MoKTtcbiAgICByZXR1cm4gbm9ybWFsaXplVUlWYWx1ZXMoaGFzaCwgdWlCaW5kaW5ncywgcHJvcGVydHkpO1xuICB9LFxuXG4gIF9nZXRVSUJpbmRpbmdzKCkge1xuICAgIGNvbnN0IHVpQmluZGluZ3MgPSBfLnJlc3VsdCh0aGlzLCAnX3VpQmluZGluZ3MnKTtcbiAgICByZXR1cm4gdWlCaW5kaW5ncyB8fCBfLnJlc3VsdCh0aGlzLCAndWknKTtcbiAgfSxcblxuICAvLyBUaGlzIG1ldGhvZCBiaW5kcyB0aGUgZWxlbWVudHMgc3BlY2lmaWVkIGluIHRoZSBcInVpXCIgaGFzaCBpbnNpZGUgdGhlIHZpZXcncyBjb2RlIHdpdGhcbiAgLy8gdGhlIGFzc29jaWF0ZWQgalF1ZXJ5IHNlbGVjdG9ycy5cbiAgX2JpbmRVSUVsZW1lbnRzKCkge1xuICAgIGlmICghdGhpcy51aSkgeyByZXR1cm47IH1cblxuICAgIC8vIHN0b3JlIHRoZSB1aSBoYXNoIGluIF91aUJpbmRpbmdzIHNvIHRoZXkgY2FuIGJlIHJlc2V0IGxhdGVyXG4gICAgLy8gYW5kIHNvIHJlLXJlbmRlcmluZyB0aGUgdmlldyB3aWxsIGJlIGFibGUgdG8gZmluZCB0aGUgYmluZGluZ3NcbiAgICBpZiAoIXRoaXMuX3VpQmluZGluZ3MpIHtcbiAgICAgIHRoaXMuX3VpQmluZGluZ3MgPSB0aGlzLnVpO1xuICAgIH1cblxuICAgIC8vIGdldCB0aGUgYmluZGluZ3MgcmVzdWx0LCBhcyBhIGZ1bmN0aW9uIG9yIG90aGVyd2lzZVxuICAgIGNvbnN0IGJpbmRpbmdzID0gXy5yZXN1bHQodGhpcywgJ191aUJpbmRpbmdzJyk7XG5cbiAgICAvLyBlbXB0eSB0aGUgdWkgc28gd2UgZG9uJ3QgaGF2ZSBhbnl0aGluZyB0byBzdGFydCB3aXRoXG4gICAgdGhpcy5fdWkgPSB7fTtcblxuICAgIC8vIGJpbmQgZWFjaCBvZiB0aGUgc2VsZWN0b3JzXG4gICAgXy5lYWNoKGJpbmRpbmdzLCAoc2VsZWN0b3IsIGtleSkgPT4ge1xuICAgICAgdGhpcy5fdWlba2V5XSA9IHRoaXMuJChzZWxlY3Rvcik7XG4gICAgfSk7XG5cbiAgICB0aGlzLnVpID0gdGhpcy5fdWk7XG4gIH0sXG5cbiAgX3VuYmluZFVJRWxlbWVudHMoKSB7XG4gICAgaWYgKCF0aGlzLnVpIHx8ICF0aGlzLl91aUJpbmRpbmdzKSB7IHJldHVybjsgfVxuXG4gICAgLy8gZGVsZXRlIGFsbCBvZiB0aGUgZXhpc3RpbmcgdWkgYmluZGluZ3NcbiAgICBfLmVhY2godGhpcy51aSwgKCRlbCwgbmFtZSkgPT4ge1xuICAgICAgZGVsZXRlIHRoaXMudWlbbmFtZV07XG4gICAgfSk7XG5cbiAgICAvLyByZXNldCB0aGUgdWkgZWxlbWVudCB0byB0aGUgb3JpZ2luYWwgYmluZGluZ3MgY29uZmlndXJhdGlvblxuICAgIHRoaXMudWkgPSB0aGlzLl91aUJpbmRpbmdzO1xuICAgIGRlbGV0ZSB0aGlzLl91aUJpbmRpbmdzO1xuICAgIGRlbGV0ZSB0aGlzLl91aTtcbiAgfSxcblxuICBfZ2V0VUkobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl91aVtuYW1lXTtcbiAgfVxufTtcbiIsIi8vIERvbUFwaVxuLy8gIC0tLS0tLS0tLVxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgQmFja2JvbmUgZnJvbSAnYmFja2JvbmUnO1xuXG4vLyBQZXJmb3JtYW50IG1ldGhvZCBmb3IgcmV0dXJuaW5nIHRoZSBqUXVlcnkgaW5zdGFuY2VcbmZ1bmN0aW9uIGdldEVsKGVsKSB7XG4gIHJldHVybiBlbCBpbnN0YW5jZW9mIEJhY2tib25lLiQgPyBlbCA6IEJhY2tib25lLiQoZWwpO1xufVxuXG4vLyBTdGF0aWMgc2V0dGVyXG5leHBvcnQgZnVuY3Rpb24gc2V0RG9tQXBpKG1peGluKSB7XG4gIHRoaXMucHJvdG90eXBlLkRvbSA9IF8uZXh0ZW5kKHt9LCB0aGlzLnByb3RvdHlwZS5Eb20sIG1peGluKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBSZXR1cm5zIGEgbmV3IEhUTUwgRE9NIG5vZGUgaW5zdGFuY2VcbiAgY3JlYXRlQnVmZmVyKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIH0sXG5cbiAgLy8gUmV0dXJucyB0aGUgZG9jdW1lbnQgZWxlbWVudCBmb3IgYSBnaXZlbiBET00gZWxlbWVudFxuICBnZXREb2N1bWVudEVsKGVsKSB7XG4gICAgcmV0dXJuIGVsLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9LFxuXG4gIC8vIExvb2t1cCB0aGUgYHNlbGVjdG9yYCBzdHJpbmdcbiAgLy8gU2VsZWN0b3IgbWF5IGFsc28gYmUgYSBET00gZWxlbWVudFxuICAvLyBSZXR1cm5zIGFuIGFycmF5LWxpa2Ugb2JqZWN0IG9mIG5vZGVzXG4gIGdldEVsKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGdldEVsKHNlbGVjdG9yKTtcbiAgfSxcblxuICAvLyBGaW5kcyB0aGUgYHNlbGVjdG9yYCBzdHJpbmcgd2l0aCB0aGUgZWxcbiAgLy8gUmV0dXJucyBhbiBhcnJheS1saWtlIG9iamVjdCBvZiBub2Rlc1xuICBmaW5kRWwoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGdldEVsKGVsKS5maW5kKHNlbGVjdG9yKTtcbiAgfSxcblxuICAvLyBSZXR1cm5zIHRydWUgaWYgdGhlIGVsIGNvbnRhaW5zIHRoZSBub2RlIGNoaWxkRWxcbiAgaGFzRWwoZWwsIGNoaWxkRWwpIHtcbiAgICByZXR1cm4gZWwuY29udGFpbnMoY2hpbGRFbCAmJiBjaGlsZEVsLnBhcmVudE5vZGUpO1xuICB9LFxuXG4gIC8vIERldGFjaCBgZWxgIGZyb20gdGhlIERPTSB3aXRob3V0IHJlbW92aW5nIGxpc3RlbmVyc1xuICBkZXRhY2hFbChlbCwgXyRlbCA9IGdldEVsKGVsKSkge1xuICAgIF8kZWwuZGV0YWNoKCk7XG4gIH0sXG5cbiAgLy8gUmVtb3ZlIGBvbGRFbGAgZnJvbSB0aGUgRE9NIGFuZCBwdXQgYG5ld0VsYCBpbiBpdHMgcGxhY2VcbiAgcmVwbGFjZUVsKG5ld0VsLCBvbGRFbCkge1xuICAgIGlmIChuZXdFbCA9PT0gb2xkRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnQgPSBvbGRFbC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5ld0VsLCBvbGRFbCk7XG4gIH0sXG5cbiAgLy8gU3dhcHMgdGhlIGxvY2F0aW9uIG9mIGBlbDFgIGFuZCBgZWwyYCBpbiB0aGUgRE9NXG4gIHN3YXBFbChlbDEsIGVsMikge1xuICAgIGlmIChlbDEgPT09IGVsMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudDEgPSBlbDEucGFyZW50Tm9kZTtcbiAgICBjb25zdCBwYXJlbnQyID0gZWwyLnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudDEgfHwgIXBhcmVudDIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0MSA9IGVsMS5uZXh0U2libGluZztcbiAgICBjb25zdCBuZXh0MiA9IGVsMi5uZXh0U2libGluZztcblxuICAgIHBhcmVudDEuaW5zZXJ0QmVmb3JlKGVsMiwgbmV4dDEpO1xuICAgIHBhcmVudDIuaW5zZXJ0QmVmb3JlKGVsMSwgbmV4dDIpO1xuICB9LFxuXG4gIC8vIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIGBlbGAgd2l0aCB0aGUgSFRNTCBzdHJpbmcgb2YgYGh0bWxgXG4gIHNldENvbnRlbnRzKGVsLCBodG1sLCBfJGVsID0gZ2V0RWwoZWwpKSB7XG4gICAgXyRlbC5odG1sKGh0bWwpO1xuICB9LFxuXG4gIC8vIFRha2VzIHRoZSBET00gbm9kZSBgZWxgIGFuZCBhcHBlbmRzIHRoZSBET00gbm9kZSBgY29udGVudHNgXG4gIC8vIHRvIHRoZSBlbmQgb2YgdGhlIGVsZW1lbnQncyBjb250ZW50cy5cbiAgYXBwZW5kQ29udGVudHMoZWwsIGNvbnRlbnRzLCB7XyRlbCA9IGdldEVsKGVsKSwgXyRjb250ZW50cyA9IGdldEVsKGNvbnRlbnRzKX0gPSB7fSkge1xuICAgIF8kZWwuYXBwZW5kKF8kY29udGVudHMpO1xuICB9LFxuXG4gIC8vIERvZXMgdGhlIGVsIGhhdmUgY2hpbGQgbm9kZXNcbiAgaGFzQ29udGVudHMoZWwpIHtcbiAgICByZXR1cm4gISFlbCAmJiBlbC5oYXNDaGlsZE5vZGVzKCk7XG4gIH0sXG5cbiAgLy8gUmVtb3ZlIHRoZSBpbm5lciBjb250ZW50cyBvZiBgZWxgIGZyb20gdGhlIERPTSB3aGlsZSBsZWF2aW5nXG4gIC8vIGBlbGAgaXRzZWxmIGluIHRoZSBET00uXG4gIGRldGFjaENvbnRlbnRzKGVsLCBfJGVsID0gZ2V0RWwoZWwpKSB7XG4gICAgXyRlbC5jb250ZW50cygpLmRldGFjaCgpO1xuICB9XG59O1xuIiwiLy8gVmlld01peGluXG4vLyAgLS0tLS0tLS0tXG5cbmltcG9ydCBCYWNrYm9uZSBmcm9tICdiYWNrYm9uZSc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBCZWhhdmlvcnNNaXhpbiBmcm9tICcuL2JlaGF2aW9ycyc7XG5pbXBvcnQgQ29tbW9uTWl4aW4gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IERlbGVnYXRlRW50aXR5RXZlbnRzTWl4aW4gZnJvbSAnLi9kZWxlZ2F0ZS1lbnRpdHktZXZlbnRzJztcbmltcG9ydCBUZW1wbGF0ZVJlbmRlck1peGluIGZyb20gJy4vdGVtcGxhdGUtcmVuZGVyJztcbmltcG9ydCBUcmlnZ2Vyc01peGluIGZyb20gJy4vdHJpZ2dlcnMnO1xuaW1wb3J0IFVJTWl4aW4gZnJvbSAnLi91aSc7XG5pbXBvcnQgeyBpc0VuYWJsZWQgfSBmcm9tICcuLi9jb25maWcvZmVhdHVyZXMnO1xuaW1wb3J0IERvbUFwaSBmcm9tICcuLi9jb25maWcvZG9tJztcblxuLy8gTWl4aW5PcHRpb25zXG4vLyAtIGJlaGF2aW9yc1xuLy8gLSBjaGlsZFZpZXdFdmVudFByZWZpeFxuLy8gLSBjaGlsZFZpZXdFdmVudHNcbi8vIC0gY2hpbGRWaWV3VHJpZ2dlcnNcbi8vIC0gY29sbGVjdGlvbkV2ZW50c1xuLy8gLSBtb2RlbEV2ZW50c1xuLy8gLSB0cmlnZ2Vyc1xuLy8gLSB1aVxuXG5cbmNvbnN0IFZpZXdNaXhpbiA9IHtcbiAgRG9tOiBEb21BcGksXG5cbiAgX2lzRWxBdHRhY2hlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLmVsICYmIHRoaXMuRG9tLmhhc0VsKHRoaXMuRG9tLmdldERvY3VtZW50RWwodGhpcy5lbCksIHRoaXMuZWwpO1xuICB9LFxuXG4gIHN1cHBvcnRzUmVuZGVyTGlmZWN5Y2xlOiB0cnVlLFxuICBzdXBwb3J0c0Rlc3Ryb3lMaWZlY3ljbGU6IHRydWUsXG5cbiAgX2lzRGVzdHJveWVkOiBmYWxzZSxcblxuICBpc0Rlc3Ryb3llZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9pc0Rlc3Ryb3llZDtcbiAgfSxcblxuICBfaXNSZW5kZXJlZDogZmFsc2UsXG5cbiAgaXNSZW5kZXJlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9pc1JlbmRlcmVkO1xuICB9LFxuXG4gIF9pc0F0dGFjaGVkOiBmYWxzZSxcblxuICBpc0F0dGFjaGVkKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2lzQXR0YWNoZWQ7XG4gIH0sXG5cbiAgLy8gT3ZlcnJpZGluZyBCYWNrYm9uZS5WaWV3J3MgYGRlbGVnYXRlRXZlbnRzYCB0byBoYW5kbGVcbiAgLy8gYGV2ZW50c2AgYW5kIGB0cmlnZ2Vyc2BcbiAgZGVsZWdhdGVFdmVudHMoZXZlbnRzKSB7XG4gICAgdGhpcy5fcHJveHlCZWhhdmlvclZpZXdQcm9wZXJ0aWVzKCk7XG4gICAgdGhpcy5fYnVpbGRFdmVudFByb3hpZXMoKTtcblxuICAgIGNvbnN0IGNvbWJpbmVkRXZlbnRzID0gXy5leHRlbmQoe30sXG4gICAgICB0aGlzLl9nZXRCZWhhdmlvckV2ZW50cygpLFxuICAgICAgdGhpcy5fZ2V0RXZlbnRzKGV2ZW50cyksXG4gICAgICB0aGlzLl9nZXRCZWhhdmlvclRyaWdnZXJzKCksXG4gICAgICB0aGlzLl9nZXRUcmlnZ2VycygpXG4gICAgKTtcblxuICAgIEJhY2tib25lLlZpZXcucHJvdG90eXBlLmRlbGVnYXRlRXZlbnRzLmNhbGwodGhpcywgY29tYmluZWRFdmVudHMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gQWxsb3dzIEJhY2tib25lLlZpZXcgZXZlbnRzIHRvIHV0aWxpemUgYEB1aS5gIHNlbGVjdG9yc1xuICBfZ2V0RXZlbnRzKGV2ZW50cykge1xuICAgIGlmIChldmVudHMpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVVJS2V5cyhldmVudHMpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5ldmVudHMpIHsgcmV0dXJuOyB9XG5cbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVVSUtleXMoXy5yZXN1bHQodGhpcywgJ2V2ZW50cycpKTtcbiAgfSxcblxuICAvLyBDb25maWd1cmUgYHRyaWdnZXJzYCB0byBmb3J3YXJkIERPTSBldmVudHMgdG8gdmlld1xuICAvLyBldmVudHMuIGB0cmlnZ2Vyczoge1wiY2xpY2sgLmZvb1wiOiBcImRvOmZvb1wifWBcbiAgX2dldFRyaWdnZXJzKCkge1xuICAgIGlmICghdGhpcy50cmlnZ2VycykgeyByZXR1cm47IH1cblxuICAgIC8vIEFsbG93IGB0cmlnZ2Vyc2AgdG8gYmUgY29uZmlndXJlZCBhcyBhIGZ1bmN0aW9uXG4gICAgY29uc3QgdHJpZ2dlcnMgPSB0aGlzLm5vcm1hbGl6ZVVJS2V5cyhfLnJlc3VsdCh0aGlzLCAndHJpZ2dlcnMnKSk7XG5cbiAgICAvLyBDb25maWd1cmUgdGhlIHRyaWdnZXJzLCBwcmV2ZW50IGRlZmF1bHRcbiAgICAvLyBhY3Rpb24gYW5kIHN0b3AgcHJvcGFnYXRpb24gb2YgRE9NIGV2ZW50c1xuICAgIHJldHVybiB0aGlzLl9nZXRWaWV3VHJpZ2dlcnModGhpcywgdHJpZ2dlcnMpO1xuICB9LFxuXG4gIC8vIEhhbmRsZSBgbW9kZWxFdmVudHNgLCBhbmQgYGNvbGxlY3Rpb25FdmVudHNgIGNvbmZpZ3VyYXRpb25cbiAgZGVsZWdhdGVFbnRpdHlFdmVudHMoKSB7XG4gICAgdGhpcy5fZGVsZWdhdGVFbnRpdHlFdmVudHModGhpcy5tb2RlbCwgdGhpcy5jb2xsZWN0aW9uKTtcblxuICAgIC8vIGJpbmQgZWFjaCBiZWhhdmlvcnMgbW9kZWwgYW5kIGNvbGxlY3Rpb24gZXZlbnRzXG4gICAgdGhpcy5fZGVsZWdhdGVCZWhhdmlvckVudGl0eUV2ZW50cygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gSGFuZGxlIHVuYmluZGluZyBgbW9kZWxFdmVudHNgLCBhbmQgYGNvbGxlY3Rpb25FdmVudHNgIGNvbmZpZ3VyYXRpb25cbiAgdW5kZWxlZ2F0ZUVudGl0eUV2ZW50cygpIHtcbiAgICB0aGlzLl91bmRlbGVnYXRlRW50aXR5RXZlbnRzKHRoaXMubW9kZWwsIHRoaXMuY29sbGVjdGlvbik7XG5cbiAgICAvLyB1bmJpbmQgZWFjaCBiZWhhdmlvcnMgbW9kZWwgYW5kIGNvbGxlY3Rpb24gZXZlbnRzXG4gICAgdGhpcy5fdW5kZWxlZ2F0ZUJlaGF2aW9yRW50aXR5RXZlbnRzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBIYW5kbGUgZGVzdHJveWluZyB0aGUgdmlldyBhbmQgaXRzIGNoaWxkcmVuLlxuICBkZXN0cm95KG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5faXNEZXN0cm95ZWQgfHwgdGhpcy5faXNEZXN0cm95aW5nKSB7IHJldHVybiB0aGlzOyB9XG4gICAgdGhpcy5faXNEZXN0cm95aW5nID0gdHJ1ZTtcbiAgICBjb25zdCBzaG91bGRUcmlnZ2VyRGV0YWNoID0gdGhpcy5faXNBdHRhY2hlZCAmJiAhdGhpcy5fZGlzYWJsZURldGFjaEV2ZW50cztcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOmRlc3Ryb3knLCB0aGlzLCBvcHRpb25zKTtcbiAgICBpZiAoc2hvdWxkVHJpZ2dlckRldGFjaCkge1xuICAgICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6ZGV0YWNoJywgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gdW5iaW5kIFVJIGVsZW1lbnRzXG4gICAgdGhpcy51bmJpbmRVSUVsZW1lbnRzKCk7XG5cbiAgICAvLyByZW1vdmUgdGhlIHZpZXcgZnJvbSB0aGUgRE9NXG4gICAgdGhpcy5fcmVtb3ZlRWxlbWVudCgpO1xuXG4gICAgaWYgKHNob3VsZFRyaWdnZXJEZXRhY2gpIHtcbiAgICAgIHRoaXMuX2lzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnZGV0YWNoJywgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGNoaWxkcmVuIGFmdGVyIHRoZSByZW1vdmUgdG8gcHJldmVudCBleHRyYSBwYWludHNcbiAgICB0aGlzLl9yZW1vdmVDaGlsZHJlbigpO1xuXG4gICAgdGhpcy5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2lzUmVuZGVyZWQgPSBmYWxzZTtcblxuICAgIC8vIERlc3Ryb3kgYmVoYXZpb3JzIGFmdGVyIF9pc0Rlc3Ryb3llZCBmbGFnXG4gICAgdGhpcy5fZGVzdHJveUJlaGF2aW9ycyhvcHRpb25zKTtcblxuICAgIHRoaXMuX2RlbGV0ZUVudGl0eUV2ZW50SGFuZGxlcnMoKTtcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnZGVzdHJveScsIHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX3RyaWdnZXJFdmVudE9uQmVoYXZpb3JzKCdkZXN0cm95JywgdGhpcywgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIEVxdWF0ZXMgdG8gdGhpcy4kZWwucmVtb3ZlXG4gIF9yZW1vdmVFbGVtZW50KCkge1xuICAgIHRoaXMuJGVsLm9mZigpLnJlbW92ZURhdGEoKTtcbiAgICB0aGlzLkRvbS5kZXRhY2hFbCh0aGlzLmVsLCB0aGlzLiRlbCk7XG4gIH0sXG5cbiAgLy8gVGhpcyBtZXRob2QgYmluZHMgdGhlIGVsZW1lbnRzIHNwZWNpZmllZCBpbiB0aGUgXCJ1aVwiIGhhc2hcbiAgYmluZFVJRWxlbWVudHMoKSB7XG4gICAgdGhpcy5fYmluZFVJRWxlbWVudHMoKTtcbiAgICB0aGlzLl9iaW5kQmVoYXZpb3JVSUVsZW1lbnRzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBUaGlzIG1ldGhvZCB1bmJpbmRzIHRoZSBlbGVtZW50cyBzcGVjaWZpZWQgaW4gdGhlIFwidWlcIiBoYXNoXG4gIHVuYmluZFVJRWxlbWVudHMoKSB7XG4gICAgdGhpcy5fdW5iaW5kVUlFbGVtZW50cygpO1xuICAgIHRoaXMuX3VuYmluZEJlaGF2aW9yVUlFbGVtZW50cygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgZ2V0VUkobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9nZXRVSShuYW1lKTtcbiAgfSxcblxuICAvLyBDYWNoZSBgY2hpbGRWaWV3RXZlbnRzYCBhbmQgYGNoaWxkVmlld1RyaWdnZXJzYFxuICBfYnVpbGRFdmVudFByb3hpZXMoKSB7XG4gICAgdGhpcy5fY2hpbGRWaWV3RXZlbnRzID0gdGhpcy5ub3JtYWxpemVNZXRob2RzKF8ucmVzdWx0KHRoaXMsICdjaGlsZFZpZXdFdmVudHMnKSk7XG4gICAgdGhpcy5fY2hpbGRWaWV3VHJpZ2dlcnMgPSBfLnJlc3VsdCh0aGlzLCAnY2hpbGRWaWV3VHJpZ2dlcnMnKTtcbiAgICB0aGlzLl9ldmVudFByZWZpeCA9IHRoaXMuX2dldEV2ZW50UHJlZml4KCk7XG4gIH0sXG5cbiAgX2dldEV2ZW50UHJlZml4KCkge1xuICAgIGNvbnN0IGRlZmF1bHRQcmVmaXggPSBpc0VuYWJsZWQoJ2NoaWxkVmlld0V2ZW50UHJlZml4JykgPyAnY2hpbGR2aWV3JyA6IGZhbHNlO1xuICAgIGNvbnN0IHByZWZpeCA9IF8ucmVzdWx0KHRoaXMsICdjaGlsZFZpZXdFdmVudFByZWZpeCcsIGRlZmF1bHRQcmVmaXgpO1xuXG4gICAgcmV0dXJuIChwcmVmaXggPT09IGZhbHNlKSA/IHByZWZpeCA6IHByZWZpeCArICc6JztcbiAgfSxcblxuICBfcHJveHlDaGlsZFZpZXdFdmVudHModmlldykge1xuICAgIGlmICh0aGlzLl9jaGlsZFZpZXdFdmVudHMgfHwgdGhpcy5fY2hpbGRWaWV3VHJpZ2dlcnMgfHwgdGhpcy5fZXZlbnRQcmVmaXgpIHtcbiAgICAgIHRoaXMubGlzdGVuVG8odmlldywgJ2FsbCcsIHRoaXMuX2NoaWxkVmlld0V2ZW50SGFuZGxlcik7XG4gICAgfVxuICB9LFxuXG4gIF9jaGlsZFZpZXdFdmVudEhhbmRsZXIoZXZlbnROYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgY2hpbGRWaWV3RXZlbnRzID0gdGhpcy5fY2hpbGRWaWV3RXZlbnRzO1xuXG4gICAgLy8gY2FsbCBjb2xsZWN0aW9uVmlldyBjaGlsZFZpZXdFdmVudCBpZiBkZWZpbmVkXG4gICAgaWYgKGNoaWxkVmlld0V2ZW50cyAmJiBjaGlsZFZpZXdFdmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgY2hpbGRWaWV3RXZlbnRzW2V2ZW50TmFtZV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuXG4gICAgLy8gdXNlIHRoZSBwYXJlbnQgdmlldydzIHByb3h5RXZlbnQgaGFuZGxlcnNcbiAgICBjb25zdCBjaGlsZFZpZXdUcmlnZ2VycyA9IHRoaXMuX2NoaWxkVmlld1RyaWdnZXJzO1xuXG4gICAgLy8gQ2FsbCB0aGUgZXZlbnQgd2l0aCB0aGUgcHJveHkgbmFtZSBvbiB0aGUgcGFyZW50IGxheW91dFxuICAgIGlmIChjaGlsZFZpZXdUcmlnZ2VycyAmJiBjaGlsZFZpZXdUcmlnZ2Vyc1tldmVudE5hbWVdKSB7XG4gICAgICB0aGlzLnRyaWdnZXJNZXRob2QoY2hpbGRWaWV3VHJpZ2dlcnNbZXZlbnROYW1lXSwgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50UHJlZml4KSB7XG4gICAgICB0aGlzLnRyaWdnZXJNZXRob2QodGhpcy5fZXZlbnRQcmVmaXggKyBldmVudE5hbWUsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxufTtcblxuXy5leHRlbmQoVmlld01peGluLCBCZWhhdmlvcnNNaXhpbiwgQ29tbW9uTWl4aW4sIERlbGVnYXRlRW50aXR5RXZlbnRzTWl4aW4sIFRlbXBsYXRlUmVuZGVyTWl4aW4sIFRyaWdnZXJzTWl4aW4sIFVJTWl4aW4pO1xuXG5leHBvcnQgZGVmYXVsdCBWaWV3TWl4aW47XG4iLCJleHBvcnQgZnVuY3Rpb24gcmVuZGVyVmlldyh2aWV3KSB7XG4gIGlmICh2aWV3Ll9pc1JlbmRlcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF2aWV3LnN1cHBvcnRzUmVuZGVyTGlmZWN5Y2xlKSB7XG4gICAgdmlldy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6cmVuZGVyJywgdmlldyk7XG4gIH1cblxuICB2aWV3LnJlbmRlcigpO1xuICB2aWV3Ll9pc1JlbmRlcmVkID0gdHJ1ZTtcblxuICBpZiAoIXZpZXcuc3VwcG9ydHNSZW5kZXJMaWZlY3ljbGUpIHtcbiAgICB2aWV3LnRyaWdnZXJNZXRob2QoJ3JlbmRlcicsIHZpZXcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95Vmlldyh2aWV3LCBkaXNhYmxlRGV0YWNoRXZlbnRzKSB7XG4gIGlmICh2aWV3LmRlc3Ryb3kpIHtcbiAgICAvLyBBdHRhY2ggZmxhZyBmb3IgcHVibGljIGRlc3Ryb3kgZnVuY3Rpb24gaW50ZXJuYWwgY2hlY2tcbiAgICB2aWV3Ll9kaXNhYmxlRGV0YWNoRXZlbnRzID0gZGlzYWJsZURldGFjaEV2ZW50cztcbiAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZXN0cm95IGZvciBub24tTWFyaW9uZXR0ZSBWaWV3c1xuICBpZiAoIXZpZXcuc3VwcG9ydHNEZXN0cm95TGlmZWN5Y2xlKSB7XG4gICAgdmlldy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6ZGVzdHJveScsIHZpZXcpO1xuICB9XG5cbiAgY29uc3Qgc2hvdWxkVHJpZ2dlckRldGFjaCA9IHZpZXcuX2lzQXR0YWNoZWQgJiYgIWRpc2FibGVEZXRhY2hFdmVudHM7XG5cbiAgaWYgKHNob3VsZFRyaWdnZXJEZXRhY2gpIHtcbiAgICB2aWV3LnRyaWdnZXJNZXRob2QoJ2JlZm9yZTpkZXRhY2gnLCB2aWV3KTtcbiAgfVxuXG4gIHZpZXcucmVtb3ZlKCk7XG5cbiAgaWYgKHNob3VsZFRyaWdnZXJEZXRhY2gpIHtcbiAgICB2aWV3Ll9pc0F0dGFjaGVkID0gZmFsc2U7XG4gICAgdmlldy50cmlnZ2VyTWV0aG9kKCdkZXRhY2gnLCB2aWV3KTtcbiAgfVxuXG4gIHZpZXcuX2lzRGVzdHJveWVkID0gdHJ1ZTtcblxuICBpZiAoIXZpZXcuc3VwcG9ydHNEZXN0cm95TGlmZWN5Y2xlKSB7XG4gICAgdmlldy50cmlnZ2VyTWV0aG9kKCdkZXN0cm95Jywgdmlldyk7XG4gIH1cbn1cbiIsIi8vIFJlZ2lvblxuLy8gLS0tLS0tXG5cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEJhY2tib25lIGZyb20gJ2JhY2tib25lJztcbmltcG9ydCBNYXJpb25ldHRlRXJyb3IgZnJvbSAnLi91dGlscy9lcnJvcic7XG5pbXBvcnQgZXh0ZW5kIGZyb20gJy4vdXRpbHMvZXh0ZW5kJztcbmltcG9ydCBtb25pdG9yVmlld0V2ZW50cyBmcm9tICcuL2NvbW1vbi9tb25pdG9yLXZpZXctZXZlbnRzJztcbmltcG9ydCB7IHJlbmRlclZpZXcsIGRlc3Ryb3lWaWV3IH0gZnJvbSAnLi9jb21tb24vdmlldyc7XG5pbXBvcnQgQ29tbW9uTWl4aW4gZnJvbSAnLi9taXhpbnMvY29tbW9uJztcbmltcG9ydCBWaWV3IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgRG9tQXBpLCB7IHNldERvbUFwaSB9IGZyb20gJy4vY29uZmlnL2RvbSc7XG5cbmNvbnN0IGNsYXNzRXJyb3JOYW1lID0gJ1JlZ2lvbkVycm9yJztcblxuY29uc3QgQ2xhc3NPcHRpb25zID0gW1xuICAnYWxsb3dNaXNzaW5nRWwnLFxuICAncGFyZW50RWwnLFxuICAncmVwbGFjZUVsZW1lbnQnXG5dO1xuXG5jb25zdCBSZWdpb24gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMuX3NldE9wdGlvbnMob3B0aW9ucywgQ2xhc3NPcHRpb25zKTtcblxuICB0aGlzLmNpZCA9IF8udW5pcXVlSWQodGhpcy5jaWRQcmVmaXgpO1xuXG4gIC8vIGdldE9wdGlvbiBuZWNlc3NhcnkgYmVjYXVzZSBvcHRpb25zLmVsIG1heSBiZSBwYXNzZWQgYXMgdW5kZWZpbmVkXG4gIHRoaXMuX2luaXRFbCA9IHRoaXMuZWwgPSB0aGlzLmdldE9wdGlvbignZWwnKTtcblxuICAvLyBIYW5kbGUgd2hlbiB0aGlzLmVsIGlzIHBhc3NlZCBpbiBhcyBhICQgd3JhcHBlZCBlbGVtZW50LlxuICB0aGlzLmVsID0gdGhpcy5lbCBpbnN0YW5jZW9mIEJhY2tib25lLiQgPyB0aGlzLmVsWzBdIDogdGhpcy5lbDtcblxuICB0aGlzLiRlbCA9IHRoaXMuX2dldEVsKHRoaXMuZWwpO1xuXG4gIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuUmVnaW9uLmV4dGVuZCA9IGV4dGVuZDtcblJlZ2lvbi5zZXREb21BcGkgPSBzZXREb21BcGk7XG5cbi8vIFJlZ2lvbiBNZXRob2RzXG4vLyAtLS0tLS0tLS0tLS0tLVxuXG5fLmV4dGVuZChSZWdpb24ucHJvdG90eXBlLCBDb21tb25NaXhpbiwge1xuICBEb206IERvbUFwaSxcblxuICBjaWRQcmVmaXg6ICdtbnInLFxuICByZXBsYWNlRWxlbWVudDogZmFsc2UsXG4gIF9pc1JlcGxhY2VkOiBmYWxzZSxcbiAgX2lzU3dhcHBpbmdWaWV3OiBmYWxzZSxcblxuICAvLyBUaGlzIGlzIGEgbm9vcCBtZXRob2QgaW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlblxuICBpbml0aWFsaXplKCkge30sXG5cbiAgLy8gRGlzcGxheXMgYSB2aWV3IGluc3RhbmNlIGluc2lkZSBvZiB0aGUgcmVnaW9uLiBJZiBuZWNlc3NhcnkgaGFuZGxlcyBjYWxsaW5nIHRoZSBgcmVuZGVyYFxuICAvLyBtZXRob2QgZm9yIHlvdS4gUmVhZHMgY29udGVudCBkaXJlY3RseSBmcm9tIHRoZSBgZWxgIGF0dHJpYnV0ZS5cbiAgc2hvdyh2aWV3LCBvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLl9lbnN1cmVFbGVtZW50KG9wdGlvbnMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmlldyA9IHRoaXMuX2dldFZpZXcodmlldywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmlldyA9PT0gdGhpcy5jdXJyZW50VmlldykgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgaWYgKHZpZXcuX2lzU2hvd24pIHtcbiAgICAgIHRocm93IG5ldyBNYXJpb25ldHRlRXJyb3Ioe1xuICAgICAgICBuYW1lOiBjbGFzc0Vycm9yTmFtZSxcbiAgICAgICAgbWVzc2FnZTogJ1ZpZXcgaXMgYWxyZWFkeSBzaG93biBpbiBhIFJlZ2lvbiBvciBDb2xsZWN0aW9uVmlldycsXG4gICAgICAgIHVybDogJ21hcmlvbmV0dGUucmVnaW9uLmh0bWwjc2hvd2luZy1hLXZpZXcnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc1N3YXBwaW5nVmlldyA9ICEhdGhpcy5jdXJyZW50VmlldztcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOnNob3cnLCB0aGlzLCB2aWV3LCBvcHRpb25zKTtcblxuICAgIC8vIEFzc3VtZSBhbiBhdHRhY2hlZCB2aWV3IGlzIGFscmVhZHkgaW4gdGhlIHJlZ2lvbiBmb3IgcHJlLWV4aXN0aW5nIERPTVxuICAgIGlmICh0aGlzLmN1cnJlbnRWaWV3IHx8ICF2aWV3Ll9pc0F0dGFjaGVkKSB7XG4gICAgICB0aGlzLmVtcHR5KG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHRoaXMuX3NldHVwQ2hpbGRWaWV3KHZpZXcpO1xuXG4gICAgdGhpcy5jdXJyZW50VmlldyA9IHZpZXc7XG5cbiAgICByZW5kZXJWaWV3KHZpZXcpO1xuXG4gICAgdGhpcy5fYXR0YWNoVmlldyh2aWV3LCBvcHRpb25zKTtcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnc2hvdycsIHRoaXMsIHZpZXcsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faXNTd2FwcGluZ1ZpZXcgPSBmYWxzZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIF9nZXRFbChlbCkge1xuICAgIGlmICghZWwpIHtcbiAgICAgIHRocm93IG5ldyBNYXJpb25ldHRlRXJyb3Ioe1xuICAgICAgICBuYW1lOiBjbGFzc0Vycm9yTmFtZSxcbiAgICAgICAgbWVzc2FnZTogJ0FuIFwiZWxcIiBtdXN0IGJlIHNwZWNpZmllZCBmb3IgYSByZWdpb24uJyxcbiAgICAgICAgdXJsOiAnbWFyaW9uZXR0ZS5yZWdpb24uaHRtbCNhZGRpdGlvbmFsLW9wdGlvbnMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRFbChlbCk7XG4gIH0sXG5cbiAgX3NldEVsKCkge1xuICAgIHRoaXMuJGVsID0gdGhpcy5fZ2V0RWwodGhpcy5lbCk7XG5cbiAgICBpZiAodGhpcy4kZWwubGVuZ3RoKSB7XG4gICAgICB0aGlzLmVsID0gdGhpcy4kZWxbMF07XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoZSAkZWwgY29udGFpbnMgb25seSB0aGUgZWxcbiAgICBpZiAodGhpcy4kZWwubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy4kZWwgPSB0aGlzLkRvbS5nZXRFbCh0aGlzLmVsKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU2V0IHRoZSBgZWxgIG9mIHRoZSByZWdpb24gYW5kIG1vdmUgYW55IGN1cnJlbnQgdmlldyB0byB0aGUgbmV3IGBlbGAuXG4gIF9zZXRFbGVtZW50KGVsKSB7XG4gICAgaWYgKGVsID09PSB0aGlzLmVsKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgICBjb25zdCBzaG91bGRSZXBsYWNlID0gdGhpcy5faXNSZXBsYWNlZDtcblxuICAgIHRoaXMuX3Jlc3RvcmVFbCgpO1xuXG4gICAgdGhpcy5lbCA9IGVsO1xuXG4gICAgdGhpcy5fc2V0RWwoKTtcblxuICAgIGlmICh0aGlzLmN1cnJlbnRWaWV3KSB7XG4gICAgICBjb25zdCB2aWV3ID0gdGhpcy5jdXJyZW50VmlldztcblxuICAgICAgaWYgKHNob3VsZFJlcGxhY2UpIHtcbiAgICAgICAgdGhpcy5fcmVwbGFjZUVsKHZpZXcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hdHRhY2hIdG1sKHZpZXcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIF9zZXR1cENoaWxkVmlldyh2aWV3KSB7XG4gICAgbW9uaXRvclZpZXdFdmVudHModmlldyk7XG5cbiAgICB0aGlzLl9wcm94eUNoaWxkVmlld0V2ZW50cyh2aWV3KTtcblxuICAgIC8vIFdlIG5lZWQgdG8gbGlzdGVuIGZvciBpZiBhIHZpZXcgaXMgZGVzdHJveWVkIGluIGEgd2F5IG90aGVyIHRoYW4gdGhyb3VnaCB0aGUgcmVnaW9uLlxuICAgIC8vIElmIHRoaXMgaGFwcGVucyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50VmlldyBzaW5jZSBvbmNlIGEgdmlld1xuICAgIC8vIGhhcyBiZWVuIGRlc3Ryb3llZCB3ZSBjYW4gbm90IHJldXNlIGl0LlxuICAgIHZpZXcub24oJ2Rlc3Ryb3knLCB0aGlzLl9lbXB0eSwgdGhpcyk7XG4gIH0sXG5cbiAgX3Byb3h5Q2hpbGRWaWV3RXZlbnRzKHZpZXcpIHtcbiAgICBjb25zdCBwYXJlbnRWaWV3ID0gdGhpcy5fcGFyZW50VmlldztcblxuICAgIGlmICghcGFyZW50VmlldykgeyByZXR1cm47IH1cblxuICAgIHBhcmVudFZpZXcuX3Byb3h5Q2hpbGRWaWV3RXZlbnRzKHZpZXcpO1xuICB9LFxuXG4gIC8vIElmIHRoZSByZWdpb25zIHBhcmVudCB2aWV3IGlzIG5vdCBtb25pdG9yaW5nIGl0cyBhdHRhY2gvZGV0YWNoIGV2ZW50c1xuICBfc2hvdWxkRGlzYWJsZU1vbml0b3JpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudFZpZXcgJiYgdGhpcy5fcGFyZW50Vmlldy5tb25pdG9yVmlld0V2ZW50cyA9PT0gZmFsc2U7XG4gIH0sXG5cbiAgX2lzRWxBdHRhY2hlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5Eb20uaGFzRWwodGhpcy5Eb20uZ2V0RG9jdW1lbnRFbCh0aGlzLmVsKSwgdGhpcy5lbCk7XG4gIH0sXG5cbiAgX2F0dGFjaFZpZXcodmlldywgeyByZXBsYWNlRWxlbWVudCB9ID0ge30pIHtcbiAgICBjb25zdCBzaG91bGRUcmlnZ2VyQXR0YWNoID0gIXZpZXcuX2lzQXR0YWNoZWQgJiYgdGhpcy5faXNFbEF0dGFjaGVkKCkgJiYgIXRoaXMuX3Nob3VsZERpc2FibGVNb25pdG9yaW5nKCk7XG4gICAgY29uc3Qgc2hvdWxkUmVwbGFjZUVsID0gdHlwZW9mIHJlcGxhY2VFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/ICEhXy5yZXN1bHQodGhpcywgJ3JlcGxhY2VFbGVtZW50JykgOiAhIXJlcGxhY2VFbGVtZW50O1xuXG4gICAgaWYgKHNob3VsZFRyaWdnZXJBdHRhY2gpIHtcbiAgICAgIHZpZXcudHJpZ2dlck1ldGhvZCgnYmVmb3JlOmF0dGFjaCcsIHZpZXcpO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRSZXBsYWNlRWwpIHtcbiAgICAgIHRoaXMuX3JlcGxhY2VFbCh2aWV3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hdHRhY2hIdG1sKHZpZXcpO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUcmlnZ2VyQXR0YWNoKSB7XG4gICAgICB2aWV3Ll9pc0F0dGFjaGVkID0gdHJ1ZTtcbiAgICAgIHZpZXcudHJpZ2dlck1ldGhvZCgnYXR0YWNoJywgdmlldyk7XG4gICAgfVxuXG4gICAgLy8gQ29ycmVzcG9uZHMgdGhhdCB2aWV3IGlzIHNob3duIGluIGEgbWFyaW9uZXR0ZSBSZWdpb24gb3IgQ29sbGVjdGlvblZpZXdcbiAgICB2aWV3Ll9pc1Nob3duID0gdHJ1ZTtcbiAgfSxcblxuICBfZW5zdXJlRWxlbWVudChvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIV8uaXNPYmplY3QodGhpcy5lbCkpIHtcbiAgICAgIHRoaXMuX3NldEVsKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLiRlbCB8fCB0aGlzLiRlbC5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnN0IGFsbG93TWlzc2luZ0VsID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dNaXNzaW5nRWwgPT09ICd1bmRlZmluZWQnID8gISFfLnJlc3VsdCh0aGlzLCAnYWxsb3dNaXNzaW5nRWwnKSA6ICEhb3B0aW9ucy5hbGxvd01pc3NpbmdFbDtcblxuICAgICAgaWYgKGFsbG93TWlzc2luZ0VsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBNYXJpb25ldHRlRXJyb3Ioe1xuICAgICAgICAgIG5hbWU6IGNsYXNzRXJyb3JOYW1lLFxuICAgICAgICAgIG1lc3NhZ2U6IGBBbiBcImVsXCIgbXVzdCBleGlzdCBpbiBET00gZm9yIHRoaXMgcmVnaW9uICR7dGhpcy5jaWR9YCxcbiAgICAgICAgICB1cmw6ICdtYXJpb25ldHRlLnJlZ2lvbi5odG1sI2FkZGl0aW9uYWwtb3B0aW9ucydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIF9nZXRWaWV3KHZpZXcpIHtcbiAgICBpZiAoIXZpZXcpIHtcbiAgICAgIHRocm93IG5ldyBNYXJpb25ldHRlRXJyb3Ioe1xuICAgICAgICBuYW1lOiBjbGFzc0Vycm9yTmFtZSxcbiAgICAgICAgbWVzc2FnZTogJ1RoZSB2aWV3IHBhc3NlZCBpcyB1bmRlZmluZWQgYW5kIHRoZXJlZm9yZSBpbnZhbGlkLiBZb3UgbXVzdCBwYXNzIGEgdmlldyBpbnN0YW5jZSB0byBzaG93LicsXG4gICAgICAgIHVybDogJ21hcmlvbmV0dGUucmVnaW9uLmh0bWwjc2hvd2luZy1hLXZpZXcnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodmlldy5faXNEZXN0cm95ZWQpIHtcbiAgICAgIHRocm93IG5ldyBNYXJpb25ldHRlRXJyb3Ioe1xuICAgICAgICBuYW1lOiBjbGFzc0Vycm9yTmFtZSxcbiAgICAgICAgbWVzc2FnZTogYFZpZXcgKGNpZDogXCIke3ZpZXcuY2lkfVwiKSBoYXMgYWxyZWFkeSBiZWVuIGRlc3Ryb3llZCBhbmQgY2Fubm90IGJlIHVzZWQuYCxcbiAgICAgICAgdXJsOiAnbWFyaW9uZXR0ZS5yZWdpb24uaHRtbCNzaG93aW5nLWEtdmlldydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh2aWV3IGluc3RhbmNlb2YgQmFja2JvbmUuVmlldykge1xuICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuXG4gICAgY29uc3Qgdmlld09wdGlvbnMgPSB0aGlzLl9nZXRWaWV3T3B0aW9ucyh2aWV3KTtcblxuICAgIHJldHVybiBuZXcgVmlldyh2aWV3T3B0aW9ucyk7XG4gIH0sXG5cbiAgLy8gVGhpcyBhbGxvd3MgZm9yIGEgdGVtcGxhdGUgb3IgYSBzdGF0aWMgc3RyaW5nIHRvIGJlXG4gIC8vIHVzZWQgYXMgYSB0ZW1wbGF0ZVxuICBfZ2V0Vmlld09wdGlvbnModmlld09wdGlvbnMpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZpZXdPcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHsgdGVtcGxhdGU6IHZpZXdPcHRpb25zIH07XG4gICAgfVxuXG4gICAgaWYgKF8uaXNPYmplY3Qodmlld09wdGlvbnMpKSB7XG4gICAgICByZXR1cm4gdmlld09wdGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHZpZXdPcHRpb25zOyB9O1xuXG4gICAgcmV0dXJuIHsgdGVtcGxhdGUgfTtcbiAgfSxcblxuICAvLyBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBjaGFuZ2UgaG93IHRoZSByZWdpb24gZmluZHMgdGhlIERPTSBlbGVtZW50IHRoYXQgaXQgbWFuYWdlcy4gUmV0dXJuXG4gIC8vIGEgalF1ZXJ5IHNlbGVjdG9yIG9iamVjdCBzY29wZWQgdG8gYSBwcm92aWRlZCBwYXJlbnQgZWwgb3IgdGhlIGRvY3VtZW50IGlmIG5vbmUgZXhpc3RzLlxuICBnZXRFbChlbCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBfLnJlc3VsdCh0aGlzLCAncGFyZW50RWwnKTtcblxuICAgIGlmIChjb250ZXh0ICYmIF8uaXNTdHJpbmcoZWwpKSB7XG4gICAgICByZXR1cm4gdGhpcy5Eb20uZmluZEVsKGNvbnRleHQsIGVsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5Eb20uZ2V0RWwoZWwpO1xuICB9LFxuXG4gIF9yZXBsYWNlRWwodmlldykge1xuICAgIC8vIEFsd2F5cyByZXN0b3JlIHRoZSBlbCB0byBlbnN1cmUgdGhlIHJlZ2lvbnMgZWwgaXMgcHJlc2VudCBiZWZvcmUgcmVwbGFjaW5nXG4gICAgdGhpcy5fcmVzdG9yZUVsKCk7XG5cbiAgICB2aWV3Lm9uKCdiZWZvcmU6ZGVzdHJveScsIHRoaXMuX3Jlc3RvcmVFbCwgdGhpcyk7XG5cbiAgICB0aGlzLkRvbS5yZXBsYWNlRWwodmlldy5lbCwgdGhpcy5lbCk7XG5cbiAgICB0aGlzLl9pc1JlcGxhY2VkID0gdHJ1ZTtcbiAgfSxcblxuICAvLyBSZXN0b3JlIHRoZSByZWdpb24ncyBlbGVtZW50IGluIHRoZSBET00uXG4gIF9yZXN0b3JlRWwoKSB7XG4gICAgLy8gVGhlcmUgaXMgbm90aGluZyB0byByZXBsYWNlXG4gICAgaWYgKCF0aGlzLl9pc1JlcGxhY2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmlldyA9IHRoaXMuY3VycmVudFZpZXc7XG5cbiAgICBpZiAoIXZpZXcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9kZXRhY2hWaWV3KHZpZXcpO1xuXG4gICAgdGhpcy5faXNSZXBsYWNlZCA9IGZhbHNlO1xuICB9LFxuXG4gIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgcmVnaW9uJ3MgZWwgd2FzIHJlcGxhY2VkLlxuICBpc1JlcGxhY2VkKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2lzUmVwbGFjZWQ7XG4gIH0sXG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIGEgdmlldyBpcyBiZWluZyBzd2FwcGVkIGJ5IGFub3RoZXJcbiAgaXNTd2FwcGluZ1ZpZXcoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5faXNTd2FwcGluZ1ZpZXc7XG4gIH0sXG5cbiAgLy8gT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY2hhbmdlIGhvdyB0aGUgbmV3IHZpZXcgaXMgYXBwZW5kZWQgdG8gdGhlIGAkZWxgIHRoYXQgdGhlXG4gIC8vIHJlZ2lvbiBpcyBtYW5hZ2luZ1xuICBhdHRhY2hIdG1sKHZpZXcpIHtcbiAgICB0aGlzLkRvbS5hcHBlbmRDb250ZW50cyh0aGlzLmVsLCB2aWV3LmVsLCB7XyRlbDogdGhpcy4kZWwsIF8kY29udGVudHM6IHZpZXcuJGVsfSk7XG4gIH0sXG5cbiAgLy8gRGVzdHJveSB0aGUgY3VycmVudCB2aWV3LCBpZiB0aGVyZSBpcyBvbmUuIElmIHRoZXJlIGlzIG5vIGN1cnJlbnQgdmlldyxcbiAgLy8gaXQgd2lsbCBkZXRhY2ggYW55IGh0bWwgaW5zaWRlIHRoZSByZWdpb24ncyBgZWxgLlxuICBlbXB0eShvcHRpb25zID0geyBhbGxvd01pc3NpbmdFbDogdHJ1ZSB9KSB7XG4gICAgY29uc3QgdmlldyA9IHRoaXMuY3VycmVudFZpZXc7XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyB2aWV3IGluIHRoZSByZWdpb24gd2Ugc2hvdWxkIG9ubHkgZGV0YWNoIGN1cnJlbnQgaHRtbFxuICAgIGlmICghdmlldykge1xuICAgICAgaWYgKHRoaXMuX2Vuc3VyZUVsZW1lbnQob3B0aW9ucykpIHtcbiAgICAgICAgdGhpcy5kZXRhY2hIdG1sKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLl9lbXB0eSh2aWV3LCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfZW1wdHkodmlldywgc2hvdWxkRGVzdHJveSkge1xuICAgIHZpZXcub2ZmKCdkZXN0cm95JywgdGhpcy5fZW1wdHksIHRoaXMpO1xuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOmVtcHR5JywgdGhpcywgdmlldyk7XG5cbiAgICB0aGlzLl9yZXN0b3JlRWwoKTtcblxuICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRWaWV3O1xuXG4gICAgaWYgKCF2aWV3Ll9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKHNob3VsZERlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVWaWV3KHZpZXcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZGV0YWNoVmlldyh2aWV3KTtcbiAgICAgIH1cbiAgICAgIHZpZXcuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuX3N0b3BDaGlsZFZpZXdFdmVudHModmlldyk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdlbXB0eScsIHRoaXMsIHZpZXcpO1xuICB9LFxuXG4gIF9zdG9wQ2hpbGRWaWV3RXZlbnRzKHZpZXcpIHtcbiAgICBjb25zdCBwYXJlbnRWaWV3ID0gdGhpcy5fcGFyZW50VmlldztcblxuICAgIGlmICghcGFyZW50VmlldykgeyByZXR1cm47IH1cblxuICAgIHRoaXMuX3BhcmVudFZpZXcuc3RvcExpc3RlbmluZyh2aWV3KTtcbiAgfSxcblxuICAvLyBOb24tTWFyaW9uZXR0ZSBzYWZlIHZpZXcuZGVzdHJveVxuICBkZXN0cm95Vmlldyh2aWV3KSB7XG4gICAgaWYgKHZpZXcuX2lzRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICBkZXN0cm95Vmlldyh2aWV3LCB0aGlzLl9zaG91bGREaXNhYmxlTW9uaXRvcmluZygpKTtcbiAgICByZXR1cm4gdmlldztcbiAgfSxcblxuICAvLyBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBkZXRlcm1pbmUgd2hhdCBoYXBwZW5zIHdoZW4gdGhlIHZpZXdcbiAgLy8gaXMgcmVtb3ZlZCBmcm9tIHRoZSByZWdpb24gd2hlbiB0aGUgdmlldyBpcyBub3QgYmVpbmcgZGV0YWNoZWRcbiAgcmVtb3ZlVmlldyh2aWV3KSB7XG4gICAgdGhpcy5kZXN0cm95Vmlldyh2aWV3KTtcbiAgfSxcblxuICAvLyBFbXB0aWVzIHRoZSBSZWdpb24gd2l0aG91dCBkZXN0cm95aW5nIHRoZSB2aWV3XG4gIC8vIFJldHVybnMgdGhlIGRldGFjaGVkIHZpZXdcbiAgZGV0YWNoVmlldygpIHtcbiAgICBjb25zdCB2aWV3ID0gdGhpcy5jdXJyZW50VmlldztcblxuICAgIGlmICghdmlldykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2VtcHR5KHZpZXcpO1xuXG4gICAgcmV0dXJuIHZpZXc7XG4gIH0sXG5cbiAgX2RldGFjaFZpZXcodmlldykge1xuICAgIGNvbnN0IHNob3VsZFRyaWdnZXJEZXRhY2ggPSB2aWV3Ll9pc0F0dGFjaGVkICYmICF0aGlzLl9zaG91bGREaXNhYmxlTW9uaXRvcmluZygpO1xuICAgIGNvbnN0IHNob3VsZFJlc3RvcmVFbCA9IHRoaXMuX2lzUmVwbGFjZWQ7XG4gICAgaWYgKHNob3VsZFRyaWdnZXJEZXRhY2gpIHtcbiAgICAgIHZpZXcudHJpZ2dlck1ldGhvZCgnYmVmb3JlOmRldGFjaCcsIHZpZXcpO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRSZXN0b3JlRWwpIHtcbiAgICAgIHRoaXMuRG9tLnJlcGxhY2VFbCh0aGlzLmVsLCB2aWV3LmVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXRhY2hIdG1sKCk7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRyaWdnZXJEZXRhY2gpIHtcbiAgICAgIHZpZXcuX2lzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIHZpZXcudHJpZ2dlck1ldGhvZCgnZGV0YWNoJywgdmlldyk7XG4gICAgfVxuICB9LFxuXG4gIC8vIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSBob3cgdGhlIHJlZ2lvbiBkZXRhY2hlcyBjdXJyZW50IGNvbnRlbnRcbiAgZGV0YWNoSHRtbCgpIHtcbiAgICB0aGlzLkRvbS5kZXRhY2hDb250ZW50cyh0aGlzLmVsLCB0aGlzLiRlbCk7XG4gIH0sXG5cbiAgLy8gQ2hlY2tzIHdoZXRoZXIgYSB2aWV3IGlzIGN1cnJlbnRseSBwcmVzZW50IHdpdGhpbiB0aGUgcmVnaW9uLiBSZXR1cm5zIGB0cnVlYCBpZiB0aGVyZSBpc1xuICAvLyBhbmQgYGZhbHNlYCBpZiBubyB2aWV3IGlzIHByZXNlbnQuXG4gIGhhc1ZpZXcoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5jdXJyZW50VmlldztcbiAgfSxcblxuICAvLyBSZXNldCB0aGUgcmVnaW9uIGJ5IGRlc3Ryb3lpbmcgYW55IGV4aXN0aW5nIHZpZXcgYW5kIGNsZWFyaW5nIG91dCB0aGUgY2FjaGVkIGAkZWxgLlxuICAvLyBUaGUgbmV4dCB0aW1lIGEgdmlldyBpcyBzaG93biB2aWEgdGhpcyByZWdpb24sIHRoZSByZWdpb24gd2lsbCByZS1xdWVyeSB0aGUgRE9NIGZvclxuICAvLyB0aGUgcmVnaW9uJ3MgYGVsYC5cbiAgcmVzZXQob3B0aW9ucykge1xuICAgIHRoaXMuZW1wdHkob3B0aW9ucyk7XG5cbiAgICB0aGlzLmVsID0gdGhpcy5faW5pdEVsO1xuXG4gICAgZGVsZXRlIHRoaXMuJGVsO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIF9pc0Rlc3Ryb3llZDogZmFsc2UsXG5cbiAgaXNEZXN0cm95ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzRGVzdHJveWVkO1xuICB9LFxuXG4gIC8vIERlc3Ryb3kgdGhlIHJlZ2lvbiwgcmVtb3ZlIGFueSBjaGlsZCB2aWV3XG4gIC8vIGFuZCByZW1vdmUgdGhlIHJlZ2lvbiBmcm9tIGFueSBhc3NvY2lhdGVkIHZpZXdcbiAgZGVzdHJveShvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMuX2lzRGVzdHJveWVkKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ2JlZm9yZTpkZXN0cm95JywgdGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5faXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5yZXNldChvcHRpb25zKTtcblxuICAgIGlmICh0aGlzLl9uYW1lKSB7XG4gICAgICB0aGlzLl9wYXJlbnRWaWV3Ll9yZW1vdmVSZWZlcmVuY2VzKHRoaXMuX25hbWUpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fcGFyZW50VmlldztcbiAgICBkZWxldGUgdGhpcy5fbmFtZTtcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnZGVzdHJveScsIHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuc3RvcExpc3RlbmluZygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSZWdpb247XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBNYXJpb25ldHRlRXJyb3IgZnJvbSAnLi4vdXRpbHMvZXJyb3InO1xuaW1wb3J0IFJlZ2lvbiBmcm9tICcuLi9yZWdpb24nO1xuXG4vLyByZXR1cm4gdGhlIHJlZ2lvbiBpbnN0YW5jZSBmcm9tIHRoZSBkZWZpbml0aW9uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWZpbml0aW9uLCBkZWZhdWx0cykge1xuICBpZiAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIFJlZ2lvbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uO1xuICB9XG5cbiAgaWYgKF8uaXNTdHJpbmcoZGVmaW5pdGlvbikpIHtcbiAgICByZXR1cm4gYnVpbGRSZWdpb25Gcm9tT2JqZWN0KGRlZmF1bHRzLCB7IGVsOiBkZWZpbml0aW9uIH0pO1xuICB9XG5cbiAgaWYgKF8uaXNGdW5jdGlvbihkZWZpbml0aW9uKSkge1xuICAgIHJldHVybiBidWlsZFJlZ2lvbkZyb21PYmplY3QoZGVmYXVsdHMsIHsgcmVnaW9uQ2xhc3M6IGRlZmluaXRpb24gfSk7XG4gIH1cblxuICBpZiAoXy5pc09iamVjdChkZWZpbml0aW9uKSkge1xuICAgIHJldHVybiBidWlsZFJlZ2lvbkZyb21PYmplY3QoZGVmYXVsdHMsIGRlZmluaXRpb24pO1xuICB9XG5cbiAgdGhyb3cgbmV3IE1hcmlvbmV0dGVFcnJvcih7XG4gICAgbWVzc2FnZTogJ0ltcHJvcGVyIHJlZ2lvbiBjb25maWd1cmF0aW9uIHR5cGUuJyxcbiAgICB1cmw6ICdtYXJpb25ldHRlLnJlZ2lvbi5odG1sI2RlZmluaW5nLXJlZ2lvbnMnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZFJlZ2lvbkZyb21PYmplY3QoZGVmYXVsdHMsIGRlZmluaXRpb24pIHtcbiAgY29uc3Qgb3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCBkZWZhdWx0cywgZGVmaW5pdGlvbik7XG5cbiAgY29uc3QgUmVnaW9uQ2xhc3MgPSBvcHRpb25zLnJlZ2lvbkNsYXNzXG5cbiAgZGVsZXRlIG9wdGlvbnMucmVnaW9uQ2xhc3M7XG5cbiAgcmV0dXJuIG5ldyBSZWdpb25DbGFzcyhvcHRpb25zKTtcbn1cbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IF9pbnZva2UgZnJvbSAnLi4vdXRpbHMvaW52b2tlJztcbmltcG9ydCBidWlsZFJlZ2lvbiBmcm9tICcuLi9jb21tb24vYnVpbGQtcmVnaW9uJztcbmltcG9ydCBSZWdpb24gZnJvbSAnLi4vcmVnaW9uJztcblxuLy8gTWl4aW5PcHRpb25zXG4vLyAtIHJlZ2lvbnNcbi8vIC0gcmVnaW9uQ2xhc3NcblxuZXhwb3J0IGRlZmF1bHQge1xuICByZWdpb25DbGFzczogUmVnaW9uLFxuXG4gIC8vIEludGVybmFsIG1ldGhvZCB0byBpbml0aWFsaXplIHRoZSByZWdpb25zIHRoYXQgaGF2ZSBiZWVuIGRlZmluZWQgaW4gYVxuICAvLyBgcmVnaW9uc2AgYXR0cmlidXRlIG9uIHRoaXMgVmlldy5cbiAgX2luaXRSZWdpb25zKCkge1xuXG4gICAgLy8gaW5pdCByZWdpb25zIGhhc2hcbiAgICB0aGlzLnJlZ2lvbnMgPSB0aGlzLnJlZ2lvbnMgfHwge307XG4gICAgdGhpcy5fcmVnaW9ucyA9IHt9O1xuXG4gICAgdGhpcy5hZGRSZWdpb25zKF8ucmVzdWx0KHRoaXMsICdyZWdpb25zJykpO1xuICB9LFxuXG4gIC8vIEludGVybmFsIG1ldGhvZCB0byByZS1pbml0aWFsaXplIGFsbCBvZiB0aGUgcmVnaW9ucyBieSB1cGRhdGluZ1xuICAvLyB0aGUgYGVsYCB0aGF0IHRoZXkgcG9pbnQgdG9cbiAgX3JlSW5pdFJlZ2lvbnMoKSB7XG4gICAgX2ludm9rZSh0aGlzLl9yZWdpb25zLCAncmVzZXQnKTtcbiAgfSxcblxuICAvLyBBZGQgYSBzaW5nbGUgcmVnaW9uLCBieSBuYW1lLCB0byB0aGUgVmlld1xuICBhZGRSZWdpb24obmFtZSwgZGVmaW5pdGlvbikge1xuICAgIGNvbnN0IHJlZ2lvbnMgPSB7fTtcbiAgICByZWdpb25zW25hbWVdID0gZGVmaW5pdGlvbjtcbiAgICByZXR1cm4gdGhpcy5hZGRSZWdpb25zKHJlZ2lvbnMpW25hbWVdO1xuICB9LFxuXG4gIC8vIEFkZCBtdWx0aXBsZSByZWdpb25zIGFzIGEge25hbWU6IGRlZmluaXRpb24sIG5hbWUyOiBkZWYyfSBvYmplY3QgbGl0ZXJhbFxuICBhZGRSZWdpb25zKHJlZ2lvbnMpIHtcbiAgICAvLyBJZiB0aGVyZSdzIG5vdGhpbmcgdG8gYWRkLCBzdG9wIGhlcmUuXG4gICAgaWYgKF8uaXNFbXB0eShyZWdpb25zKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE5vcm1hbGl6ZSByZWdpb24gc2VsZWN0b3JzIGhhc2ggdG8gYWxsb3dcbiAgICAvLyBhIHVzZXIgdG8gdXNlIHRoZSBAdWkuIHN5bnRheC5cbiAgICByZWdpb25zID0gdGhpcy5ub3JtYWxpemVVSVZhbHVlcyhyZWdpb25zLCAnZWwnKTtcblxuICAgIC8vIEFkZCB0aGUgcmVnaW9ucyBkZWZpbml0aW9ucyB0byB0aGUgcmVnaW9ucyBwcm9wZXJ0eVxuICAgIHRoaXMucmVnaW9ucyA9IF8uZXh0ZW5kKHt9LCB0aGlzLnJlZ2lvbnMsIHJlZ2lvbnMpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2FkZFJlZ2lvbnMocmVnaW9ucyk7XG4gIH0sXG5cbiAgLy8gaW50ZXJuYWwgbWV0aG9kIHRvIGJ1aWxkIGFuZCBhZGQgcmVnaW9uc1xuICBfYWRkUmVnaW9ucyhyZWdpb25EZWZpbml0aW9ucykge1xuICAgIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgICAgcmVnaW9uQ2xhc3M6IHRoaXMucmVnaW9uQ2xhc3MsXG4gICAgICBwYXJlbnRFbDogXy5wYXJ0aWFsKF8ucmVzdWx0LCB0aGlzLCAnZWwnKVxuICAgIH07XG5cbiAgICByZXR1cm4gXy5yZWR1Y2UocmVnaW9uRGVmaW5pdGlvbnMsIChyZWdpb25zLCBkZWZpbml0aW9uLCBuYW1lKSA9PiB7XG4gICAgICByZWdpb25zW25hbWVdID0gYnVpbGRSZWdpb24oZGVmaW5pdGlvbiwgZGVmYXVsdHMpO1xuICAgICAgdGhpcy5fYWRkUmVnaW9uKHJlZ2lvbnNbbmFtZV0sIG5hbWUpO1xuICAgICAgcmV0dXJuIHJlZ2lvbnM7XG4gICAgfSwge30pO1xuICB9LFxuXG4gIF9hZGRSZWdpb24ocmVnaW9uLCBuYW1lKSB7XG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6YWRkOnJlZ2lvbicsIHRoaXMsIG5hbWUsIHJlZ2lvbik7XG5cbiAgICByZWdpb24uX3BhcmVudFZpZXcgPSB0aGlzO1xuICAgIHJlZ2lvbi5fbmFtZSA9IG5hbWU7XG5cbiAgICB0aGlzLl9yZWdpb25zW25hbWVdID0gcmVnaW9uO1xuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdhZGQ6cmVnaW9uJywgdGhpcywgbmFtZSwgcmVnaW9uKTtcbiAgfSxcblxuICAvLyBSZW1vdmUgYSBzaW5nbGUgcmVnaW9uIGZyb20gdGhlIFZpZXcsIGJ5IG5hbWVcbiAgcmVtb3ZlUmVnaW9uKG5hbWUpIHtcbiAgICBjb25zdCByZWdpb24gPSB0aGlzLl9yZWdpb25zW25hbWVdO1xuXG4gICAgdGhpcy5fcmVtb3ZlUmVnaW9uKHJlZ2lvbiwgbmFtZSk7XG5cbiAgICByZXR1cm4gcmVnaW9uO1xuICB9LFxuXG4gIC8vIFJlbW92ZSBhbGwgcmVnaW9ucyBmcm9tIHRoZSBWaWV3XG4gIHJlbW92ZVJlZ2lvbnMoKSB7XG4gICAgY29uc3QgcmVnaW9ucyA9IHRoaXMuX2dldFJlZ2lvbnMoKTtcblxuICAgIF8uZWFjaCh0aGlzLl9yZWdpb25zLCB0aGlzLl9yZW1vdmVSZWdpb24uYmluZCh0aGlzKSk7XG5cbiAgICByZXR1cm4gcmVnaW9ucztcbiAgfSxcblxuICBfcmVtb3ZlUmVnaW9uKHJlZ2lvbiwgbmFtZSkge1xuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOnJlbW92ZTpyZWdpb24nLCB0aGlzLCBuYW1lLCByZWdpb24pO1xuXG4gICAgcmVnaW9uLmRlc3Ryb3koKTtcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgncmVtb3ZlOnJlZ2lvbicsIHRoaXMsIG5hbWUsIHJlZ2lvbik7XG4gIH0sXG5cbiAgLy8gQ2FsbGVkIGluIGEgcmVnaW9uJ3MgZGVzdHJveVxuICBfcmVtb3ZlUmVmZXJlbmNlcyhuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMucmVnaW9uc1tuYW1lXTtcbiAgICBkZWxldGUgdGhpcy5fcmVnaW9uc1tuYW1lXTtcbiAgfSxcblxuICAvLyBFbXB0eSBhbGwgcmVnaW9ucyBpbiB0aGUgcmVnaW9uIG1hbmFnZXIsIGJ1dFxuICAvLyBsZWF2ZSB0aGVtIGF0dGFjaGVkXG4gIGVtcHR5UmVnaW9ucygpIHtcbiAgICBjb25zdCByZWdpb25zID0gdGhpcy5nZXRSZWdpb25zKCk7XG4gICAgX2ludm9rZShyZWdpb25zLCAnZW1wdHknKTtcbiAgICByZXR1cm4gcmVnaW9ucztcbiAgfSxcblxuICAvLyBDaGVja3MgdG8gc2VlIGlmIHZpZXcgY29udGFpbnMgcmVnaW9uXG4gIC8vIEFjY2VwdHMgdGhlIHJlZ2lvbiBuYW1lXG4gIC8vIGhhc1JlZ2lvbignbWFpbicpXG4gIGhhc1JlZ2lvbihuYW1lKSB7XG4gICAgcmV0dXJuICEhdGhpcy5nZXRSZWdpb24obmFtZSk7XG4gIH0sXG5cbiAgLy8gUHJvdmlkZXMgYWNjZXNzIHRvIHJlZ2lvbnNcbiAgLy8gQWNjZXB0cyB0aGUgcmVnaW9uIG5hbWVcbiAgLy8gZ2V0UmVnaW9uKCdtYWluJylcbiAgZ2V0UmVnaW9uKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMuX2lzUmVuZGVyZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWdpb25zW25hbWVdO1xuICB9LFxuXG4gIF9nZXRSZWdpb25zKCkge1xuICAgIHJldHVybiBfLmNsb25lKHRoaXMuX3JlZ2lvbnMpO1xuICB9LFxuXG4gIC8vIEdldCBhbGwgcmVnaW9uc1xuICBnZXRSZWdpb25zKCkge1xuICAgIGlmICghdGhpcy5faXNSZW5kZXJlZCkge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dldFJlZ2lvbnMoKTtcbiAgfSxcblxuICBzaG93Q2hpbGRWaWV3KG5hbWUsIHZpZXcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCByZWdpb24gPSB0aGlzLmdldFJlZ2lvbihuYW1lKTtcbiAgICByZWdpb24uc2hvdyh2aWV3LCBvcHRpb25zKTtcbiAgICByZXR1cm4gdmlldztcbiAgfSxcblxuICBkZXRhY2hDaGlsZFZpZXcobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmdldFJlZ2lvbihuYW1lKS5kZXRhY2hWaWV3KCk7XG4gIH0sXG5cbiAgZ2V0Q2hpbGRWaWV3KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZWdpb24obmFtZSkuY3VycmVudFZpZXc7XG4gIH1cblxufTtcbiIsIi8vIFN0YXRpYyBzZXR0ZXIgZm9yIHRoZSByZW5kZXJlclxuZXhwb3J0IGZ1bmN0aW9uIHNldFJlbmRlcmVyKHJlbmRlcmVyKSB7XG4gIHRoaXMucHJvdG90eXBlLl9yZW5kZXJIdG1sID0gcmVuZGVyZXI7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiLy8gVmlld1xuLy8gLS0tLS0tLS0tXG5cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEJhY2tib25lIGZyb20gJ2JhY2tib25lJztcbmltcG9ydCBtb25pdG9yVmlld0V2ZW50cyBmcm9tICcuL2NvbW1vbi9tb25pdG9yLXZpZXctZXZlbnRzJztcbmltcG9ydCBWaWV3TWl4aW4gZnJvbSAnLi9taXhpbnMvdmlldyc7XG5pbXBvcnQgUmVnaW9uc01peGluIGZyb20gJy4vbWl4aW5zL3JlZ2lvbnMnO1xuaW1wb3J0IHsgc2V0RG9tQXBpIH0gZnJvbSAnLi9jb25maWcvZG9tJztcbmltcG9ydCB7IHNldFJlbmRlcmVyIH0gZnJvbSAnLi9jb25maWcvcmVuZGVyZXInO1xuXG5jb25zdCBDbGFzc09wdGlvbnMgPSBbXG4gICdiZWhhdmlvcnMnLFxuICAnY2hpbGRWaWV3RXZlbnRQcmVmaXgnLFxuICAnY2hpbGRWaWV3RXZlbnRzJyxcbiAgJ2NoaWxkVmlld1RyaWdnZXJzJyxcbiAgJ2NvbGxlY3Rpb25FdmVudHMnLFxuICAnZXZlbnRzJyxcbiAgJ21vZGVsRXZlbnRzJyxcbiAgJ3JlZ2lvbkNsYXNzJyxcbiAgJ3JlZ2lvbnMnLFxuICAndGVtcGxhdGUnLFxuICAndGVtcGxhdGVDb250ZXh0JyxcbiAgJ3RyaWdnZXJzJyxcbiAgJ3VpJ1xuXTtcblxuLy8gVXNlZCBieSBfZ2V0SW1tZWRpYXRlQ2hpbGRyZW5cbmZ1bmN0aW9uIGNoaWxkUmVkdWNlcihjaGlsZHJlbiwgcmVnaW9uKSB7XG4gIGlmIChyZWdpb24uY3VycmVudFZpZXcpIHtcbiAgICBjaGlsZHJlbi5wdXNoKHJlZ2lvbi5jdXJyZW50Vmlldyk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbi8vIFRoZSBzdGFuZGFyZCB2aWV3LiBJbmNsdWRlcyB2aWV3IGV2ZW50cywgYXV0b21hdGljIHJlbmRlcmluZ1xuLy8gdGVtcGxhdGVzLCBuZXN0ZWQgdmlld3MsIGFuZCBtb3JlLlxuY29uc3QgVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5fc2V0T3B0aW9ucyhvcHRpb25zLCBDbGFzc09wdGlvbnMpO1xuXG4gICAgbW9uaXRvclZpZXdFdmVudHModGhpcyk7XG5cbiAgICB0aGlzLl9pbml0QmVoYXZpb3JzKCk7XG4gICAgdGhpcy5faW5pdFJlZ2lvbnMoKTtcblxuICAgIEJhY2tib25lLlZpZXcucHJvdG90eXBlLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLmRlbGVnYXRlRW50aXR5RXZlbnRzKCk7XG5cbiAgICB0aGlzLl90cmlnZ2VyRXZlbnRPbkJlaGF2aW9ycygnaW5pdGlhbGl6ZScsIHRoaXMsIG9wdGlvbnMpO1xuICB9LFxuXG4gIC8vIE92ZXJyaWRpbmcgQmFja2JvbmUuVmlldydzIGBzZXRFbGVtZW50YCB0byBoYW5kbGVcbiAgLy8gaWYgYW4gZWwgd2FzIHByZXZpb3VzbHkgZGVmaW5lZC4gSWYgc28sIHRoZSB2aWV3IG1pZ2h0IGJlXG4gIC8vIHJlbmRlcmVkIG9yIGF0dGFjaGVkIG9uIHNldEVsZW1lbnQuXG4gIHNldEVsZW1lbnQoKSB7XG4gICAgQmFja2JvbmUuVmlldy5wcm90b3R5cGUuc2V0RWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5faXNSZW5kZXJlZCA9IHRoaXMuRG9tLmhhc0NvbnRlbnRzKHRoaXMuZWwpO1xuICAgIHRoaXMuX2lzQXR0YWNoZWQgPSB0aGlzLl9pc0VsQXR0YWNoZWQoKTtcblxuICAgIGlmICh0aGlzLl9pc1JlbmRlcmVkKSB7XG4gICAgICB0aGlzLmJpbmRVSUVsZW1lbnRzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gSWYgYSB0ZW1wbGF0ZSBpcyBhdmFpbGFibGUsIHJlbmRlcnMgaXQgaW50byB0aGUgdmlldydzIGBlbGBcbiAgLy8gUmUtaW5pdHMgcmVnaW9ucyBhbmQgYmluZHMgVUkuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZ2V0VGVtcGxhdGUoKTtcblxuICAgIGlmICh0ZW1wbGF0ZSA9PT0gZmFsc2UgfHwgdGhpcy5faXNEZXN0cm95ZWQpIHsgcmV0dXJuIHRoaXM7IH1cblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOnJlbmRlcicsIHRoaXMpO1xuXG4gICAgLy8gSWYgdGhpcyBpcyBub3QgdGhlIGZpcnN0IHJlbmRlciBjYWxsLCB0aGVuIHdlIG5lZWQgdG9cbiAgICAvLyByZS1pbml0aWFsaXplIHRoZSBgZWxgIGZvciBlYWNoIHJlZ2lvblxuICAgIGlmICh0aGlzLl9pc1JlbmRlcmVkKSB7XG4gICAgICB0aGlzLl9yZUluaXRSZWdpb25zKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgIHRoaXMuYmluZFVJRWxlbWVudHMoKTtcblxuICAgIHRoaXMuX2lzUmVuZGVyZWQgPSB0cnVlO1xuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgncmVuZGVyJywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBjYWxsZWQgYnkgVmlld01peGluIGRlc3Ryb3lcbiAgX3JlbW92ZUNoaWxkcmVuKCkge1xuICAgIHRoaXMucmVtb3ZlUmVnaW9ucygpO1xuICB9LFxuXG4gIF9nZXRJbW1lZGlhdGVDaGlsZHJlbigpIHtcbiAgICByZXR1cm4gXy5yZWR1Y2UodGhpcy5fcmVnaW9ucywgY2hpbGRSZWR1Y2VyLCBbXSk7XG4gIH1cbn0sIHtcbiAgc2V0UmVuZGVyZXIsXG4gIHNldERvbUFwaVxufSk7XG5cbl8uZXh0ZW5kKFZpZXcucHJvdG90eXBlLCBWaWV3TWl4aW4sIFJlZ2lvbnNNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXc7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuLy8gUHJvdmlkZSBhIGNvbnRhaW5lciB0byBzdG9yZSwgcmV0cmlldmUgYW5kXG4vLyBzaHV0IGRvd24gY2hpbGQgdmlld3MuXG5jb25zdCBDb250YWluZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5faW5pdCgpO1xufTtcblxuLy8gTWl4IGluIG1ldGhvZHMgZnJvbSBVbmRlcnNjb3JlLCBmb3IgaXRlcmF0aW9uLCBhbmQgb3RoZXJcbi8vIGNvbGxlY3Rpb24gcmVsYXRlZCBmZWF0dXJlcy5cbi8vIEJvcnJvd2luZyB0aGlzIGNvZGUgZnJvbSBCYWNrYm9uZS5Db2xsZWN0aW9uOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy9iYWNrYm9uZS9ibG9iLzEuMS4yL2JhY2tib25lLmpzI0w5NjJcbmNvbnN0IG1ldGhvZHMgPSBbJ2ZvckVhY2gnLCAnZWFjaCcsICdtYXAnLCAnZmluZCcsICdkZXRlY3QnLCAnZmlsdGVyJyxcbiAgJ3NlbGVjdCcsICdyZWplY3QnLCAnZXZlcnknLCAnYWxsJywgJ3NvbWUnLCAnYW55JywgJ2luY2x1ZGUnLFxuICAnY29udGFpbnMnLCAnaW52b2tlJywgJ3RvQXJyYXknLCAnZmlyc3QnLCAnaW5pdGlhbCcsICdyZXN0JyxcbiAgJ2xhc3QnLCAnd2l0aG91dCcsICdpc0VtcHR5JywgJ3BsdWNrJywgJ3JlZHVjZScsICdwYXJ0aXRpb24nXTtcblxuXy5lYWNoKG1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICBDb250YWluZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIF9bbWV0aG9kXS5hcHBseShfLCBbdGhpcy5fdmlld3NdLmNvbmNhdChhcmdzKSk7XG4gIH07XG59KTtcblxuZnVuY3Rpb24gc3RyaW5nQ29tcGFyYXRvcihjb21wYXJhdG9yLCB2aWV3KSB7XG4gIHJldHVybiB2aWV3Lm1vZGVsICYmIHZpZXcubW9kZWwuZ2V0KGNvbXBhcmF0b3IpO1xufVxuXG4vLyBDb250YWluZXIgTWV0aG9kc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuXy5leHRlbmQoQ29udGFpbmVyLnByb3RvdHlwZSwge1xuXG4gIC8vIEluaXRpYWxpemVzIGFuIGVtcHR5IGNvbnRhaW5lclxuICBfaW5pdCgpIHtcbiAgICB0aGlzLl92aWV3cyA9IFtdO1xuICAgIHRoaXMuX3ZpZXdzQnlDaWQgPSB7fTtcbiAgICB0aGlzLl9pbmRleEJ5TW9kZWwgPSB7fTtcbiAgICB0aGlzLl91cGRhdGVMZW5ndGgoKTtcbiAgfSxcblxuICAvLyBBZGQgYSB2aWV3IHRvIHRoaXMgY29udGFpbmVyLiBTdG9yZXMgdGhlIHZpZXdcbiAgLy8gYnkgYGNpZGAgYW5kIG1ha2VzIGl0IHNlYXJjaGFibGUgYnkgdGhlIG1vZGVsXG4gIC8vIGNpZCAoYW5kIG1vZGVsIGl0c2VsZikuIEFkZGl0aW9uYWxseSBpdCBzdG9yZXNcbiAgLy8gdGhlIHZpZXcgYnkgaW5kZXggaW4gdGhlIF92aWV3cyBhcnJheVxuICBfYWRkKHZpZXcsIGluZGV4ID0gdGhpcy5fdmlld3MubGVuZ3RoKSB7XG4gICAgdGhpcy5fYWRkVmlld0luZGV4ZXModmlldyk7XG5cbiAgICAvLyBhZGQgdG8gZW5kIGJ5IGRlZmF1bHRcbiAgICB0aGlzLl92aWV3cy5zcGxpY2UoaW5kZXgsIDAsIHZpZXcpO1xuXG4gICAgdGhpcy5fdXBkYXRlTGVuZ3RoKCk7XG4gIH0sXG5cbiAgX2FkZFZpZXdJbmRleGVzKHZpZXcpIHtcbiAgICAvLyBzdG9yZSB0aGUgdmlld1xuICAgIHRoaXMuX3ZpZXdzQnlDaWRbdmlldy5jaWRdID0gdmlldztcblxuICAgIC8vIGluZGV4IGl0IGJ5IG1vZGVsXG4gICAgaWYgKHZpZXcubW9kZWwpIHtcbiAgICAgIHRoaXMuX2luZGV4QnlNb2RlbFt2aWV3Lm1vZGVsLmNpZF0gPSB2aWV3O1xuICAgIH1cbiAgfSxcblxuICAvLyBTb3J0IChtdXRhdGUpIGFuZCByZXR1cm4gdGhlIGFycmF5IG9mIHRoZSBjaGlsZCB2aWV3cy5cbiAgX3NvcnQoY29tcGFyYXRvciwgY29udGV4dCkge1xuICAgIGlmICh0eXBlb2YgY29tcGFyYXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSBfLnBhcnRpYWwoc3RyaW5nQ29tcGFyYXRvciwgY29tcGFyYXRvcik7XG4gICAgICByZXR1cm4gdGhpcy5fc29ydEJ5KGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIGlmIChjb21wYXJhdG9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NvcnRCeShjb21wYXJhdG9yLmJpbmQoY29udGV4dCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl92aWV3cy5zb3J0KGNvbXBhcmF0b3IuYmluZChjb250ZXh0KSk7XG4gIH0sXG5cbiAgLy8gTWFrZXMgYF8uc29ydEJ5YCBtdXRhdGUgdGhlIGFycmF5IHRvIG1hdGNoIGB0aGlzLl92aWV3cy5zb3J0YFxuICBfc29ydEJ5KGNvbXBhcmF0b3IpIHtcbiAgICBjb25zdCBzb3J0ZWRWaWV3cyA9IF8uc29ydEJ5KHRoaXMuX3ZpZXdzLCBjb21wYXJhdG9yKTtcblxuICAgIHRoaXMuX3NldChzb3J0ZWRWaWV3cyk7XG5cbiAgICByZXR1cm4gc29ydGVkVmlld3M7XG4gIH0sXG5cbiAgLy8gUmVwbGFjZSBhcnJheSBjb250ZW50cyB3aXRob3V0IG92ZXJ3cml0aW5nIHRoZSByZWZlcmVuY2UuXG4gIC8vIFNob3VsZCBub3QgYWRkL3JlbW92ZSB2aWV3c1xuICBfc2V0KHZpZXdzLCBzaG91bGRSZXNldCkge1xuICAgIHRoaXMuX3ZpZXdzLmxlbmd0aCA9IDA7XG5cbiAgICB0aGlzLl92aWV3cy5wdXNoLmFwcGx5KHRoaXMuX3ZpZXdzLCB2aWV3cy5zbGljZSgwKSk7XG5cbiAgICBpZiAoc2hvdWxkUmVzZXQpIHtcbiAgICAgIHRoaXMuX3ZpZXdzQnlDaWQgPSB7fTtcbiAgICAgIHRoaXMuX2luZGV4QnlNb2RlbCA9IHt9O1xuXG4gICAgICBfLmVhY2godmlld3MsIHRoaXMuX2FkZFZpZXdJbmRleGVzLmJpbmQodGhpcykpO1xuXG4gICAgICB0aGlzLl91cGRhdGVMZW5ndGgoKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3dhcCB2aWV3cyBieSBpbmRleFxuICBfc3dhcCh2aWV3MSwgdmlldzIpIHtcbiAgICBjb25zdCB2aWV3MUluZGV4ID0gdGhpcy5maW5kSW5kZXhCeVZpZXcodmlldzEpO1xuICAgIGNvbnN0IHZpZXcySW5kZXggPSB0aGlzLmZpbmRJbmRleEJ5Vmlldyh2aWV3Mik7XG5cbiAgICBpZiAodmlldzFJbmRleCA9PT0gLTEgfHwgdmlldzJJbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzd2FwVmlldyA9IHRoaXMuX3ZpZXdzW3ZpZXcxSW5kZXhdO1xuICAgIHRoaXMuX3ZpZXdzW3ZpZXcxSW5kZXhdID0gdGhpcy5fdmlld3NbdmlldzJJbmRleF07XG4gICAgdGhpcy5fdmlld3NbdmlldzJJbmRleF0gPSBzd2FwVmlldztcbiAgfSxcblxuICAvLyBGaW5kIGEgdmlldyBieSB0aGUgbW9kZWwgdGhhdCB3YXMgYXR0YWNoZWQgdG8gaXQuXG4gIC8vIFVzZXMgdGhlIG1vZGVsJ3MgYGNpZGAgdG8gZmluZCBpdC5cbiAgZmluZEJ5TW9kZWwobW9kZWwpIHtcbiAgICByZXR1cm4gdGhpcy5maW5kQnlNb2RlbENpZChtb2RlbC5jaWQpO1xuICB9LFxuXG4gIC8vIEZpbmQgYSB2aWV3IGJ5IHRoZSBgY2lkYCBvZiB0aGUgbW9kZWwgdGhhdCB3YXMgYXR0YWNoZWQgdG8gaXQuXG4gIGZpbmRCeU1vZGVsQ2lkKG1vZGVsQ2lkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGV4QnlNb2RlbFttb2RlbENpZF07XG4gIH0sXG5cbiAgLy8gRmluZCBhIHZpZXcgYnkgaW5kZXguXG4gIGZpbmRCeUluZGV4KGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdzW2luZGV4XTtcbiAgfSxcblxuICAvLyBGaW5kIHRoZSBpbmRleCBvZiBhIHZpZXcgaW5zdGFuY2VcbiAgZmluZEluZGV4QnlWaWV3KHZpZXcpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlld3MuaW5kZXhPZih2aWV3KTtcbiAgfSxcblxuICAvLyBSZXRyaWV2ZSBhIHZpZXcgYnkgaXRzIGBjaWRgIGRpcmVjdGx5XG4gIGZpbmRCeUNpZChjaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlld3NCeUNpZFtjaWRdO1xuICB9LFxuXG4gIGhhc1ZpZXcodmlldykge1xuICAgIHJldHVybiAhIXRoaXMuZmluZEJ5Q2lkKHZpZXcuY2lkKTtcbiAgfSxcblxuICAvLyBSZW1vdmUgYSB2aWV3IGFuZCBjbGVhbiB1cCBpbmRleCByZWZlcmVuY2VzLlxuICBfcmVtb3ZlKHZpZXcpIHtcbiAgICBpZiAoIXRoaXMuX3ZpZXdzQnlDaWRbdmlldy5jaWRdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZGVsZXRlIG1vZGVsIGluZGV4XG4gICAgaWYgKHZpZXcubW9kZWwpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9pbmRleEJ5TW9kZWxbdmlldy5tb2RlbC5jaWRdO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSB0aGUgdmlldyBmcm9tIHRoZSBjb250YWluZXJcbiAgICBkZWxldGUgdGhpcy5fdmlld3NCeUNpZFt2aWV3LmNpZF07XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZEluZGV4QnlWaWV3KHZpZXcpO1xuICAgIHRoaXMuX3ZpZXdzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICB0aGlzLl91cGRhdGVMZW5ndGgoKTtcbiAgfSxcblxuICAvLyBVcGRhdGUgdGhlIGAubGVuZ3RoYCBhdHRyaWJ1dGUgb24gdGhpcyBjb250YWluZXJcbiAgX3VwZGF0ZUxlbmd0aCgpIHtcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX3ZpZXdzLmxlbmd0aDtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRhaW5lcjtcbiIsIi8vIENvbGxlY3Rpb24gVmlld1xuLy8gLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IEJhY2tib25lIGZyb20gJ2JhY2tib25lJztcbmltcG9ydCBNYXJpb25ldHRlRXJyb3IgZnJvbSAnLi91dGlscy9lcnJvcic7XG5pbXBvcnQgeyByZW5kZXJWaWV3LCBkZXN0cm95VmlldyB9IGZyb20gJy4vY29tbW9uL3ZpZXcnO1xuaW1wb3J0IG1vbml0b3JWaWV3RXZlbnRzIGZyb20gJy4vY29tbW9uL21vbml0b3Itdmlldy1ldmVudHMnO1xuaW1wb3J0IENoaWxkVmlld0NvbnRhaW5lciBmcm9tICcuL2NoaWxkLXZpZXctY29udGFpbmVyJztcbmltcG9ydCBSZWdpb24gZnJvbSAnLi9yZWdpb24nO1xuaW1wb3J0IFZpZXdNaXhpbiBmcm9tICcuL21peGlucy92aWV3JztcbmltcG9ydCB7IHNldERvbUFwaSB9IGZyb20gJy4vY29uZmlnL2RvbSc7XG5pbXBvcnQgeyBzZXRSZW5kZXJlciB9IGZyb20gJy4vY29uZmlnL3JlbmRlcmVyJztcblxuY29uc3QgY2xhc3NFcnJvck5hbWUgPSAnQ29sbGVjdGlvblZpZXdFcnJvcic7XG5cbmNvbnN0IENsYXNzT3B0aW9ucyA9IFtcbiAgJ2JlaGF2aW9ycycsXG4gICdjaGlsZFZpZXcnLFxuICAnY2hpbGRWaWV3Q29udGFpbmVyJyxcbiAgJ2NoaWxkVmlld0V2ZW50UHJlZml4JyxcbiAgJ2NoaWxkVmlld0V2ZW50cycsXG4gICdjaGlsZFZpZXdPcHRpb25zJyxcbiAgJ2NoaWxkVmlld1RyaWdnZXJzJyxcbiAgJ2NvbGxlY3Rpb25FdmVudHMnLFxuICAnZW1wdHlWaWV3JyxcbiAgJ2VtcHR5Vmlld09wdGlvbnMnLFxuICAnZXZlbnRzJyxcbiAgJ21vZGVsRXZlbnRzJyxcbiAgJ3NvcnRXaXRoQ29sbGVjdGlvbicsXG4gICd0ZW1wbGF0ZScsXG4gICd0ZW1wbGF0ZUNvbnRleHQnLFxuICAndHJpZ2dlcnMnLFxuICAndWknLFxuICAndmlld0NvbXBhcmF0b3InLFxuICAndmlld0ZpbHRlcidcbl07XG5cbi8vIEEgdmlldyB0aGF0IGl0ZXJhdGVzIG92ZXIgYSBCYWNrYm9uZS5Db2xsZWN0aW9uXG4vLyBhbmQgcmVuZGVycyBhbiBpbmRpdmlkdWFsIGNoaWxkIHZpZXcgZm9yIGVhY2ggbW9kZWwuXG5jb25zdCBDb2xsZWN0aW9uVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgLy8gZmxhZyBmb3IgbWFpbnRhaW5pbmcgdGhlIHNvcnRlZCBvcmRlciBvZiB0aGUgY29sbGVjdGlvblxuICBzb3J0V2l0aENvbGxlY3Rpb246IHRydWUsXG5cbiAgLy8gY29uc3RydWN0b3JcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuX3NldE9wdGlvbnMob3B0aW9ucywgQ2xhc3NPcHRpb25zKTtcblxuICAgIG1vbml0b3JWaWV3RXZlbnRzKHRoaXMpO1xuXG4gICAgdGhpcy5faW5pdENoaWxkVmlld1N0b3JhZ2UoKTtcbiAgICB0aGlzLl9pbml0QmVoYXZpb3JzKCk7XG5cbiAgICBCYWNrYm9uZS5WaWV3LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gSW5pdCBlbXB0eSByZWdpb25cbiAgICB0aGlzLmdldEVtcHR5UmVnaW9uKCk7XG5cbiAgICB0aGlzLmRlbGVnYXRlRW50aXR5RXZlbnRzKCk7XG5cbiAgICB0aGlzLl90cmlnZ2VyRXZlbnRPbkJlaGF2aW9ycygnaW5pdGlhbGl6ZScsIHRoaXMsIG9wdGlvbnMpO1xuICB9LFxuXG4gIC8vIEludGVybmFsIG1ldGhvZCB0byBzZXQgdXAgdGhlIGBjaGlsZHJlbmAgb2JqZWN0IGZvciBzdG9yaW5nIGFsbCBvZiB0aGUgY2hpbGQgdmlld3NcbiAgLy8gYF9jaGlsZHJlbmAgcmVwcmVzZW50cyBhbGwgY2hpbGQgdmlld3NcbiAgLy8gYGNoaWxkcmVuYCByZXByZXNlbnRzIG9ubHkgdmlld3MgZmlsdGVyZWQgdG8gYmUgc2hvd25cbiAgX2luaXRDaGlsZFZpZXdTdG9yYWdlKCkge1xuICAgIHRoaXMuX2NoaWxkcmVuID0gbmV3IENoaWxkVmlld0NvbnRhaW5lcigpO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgQ2hpbGRWaWV3Q29udGFpbmVyKCk7XG4gIH0sXG5cbiAgLy8gQ3JlYXRlIGFuIHJlZ2lvbiB0byBzaG93IHRoZSBlbXB0eVZpZXdcbiAgZ2V0RW1wdHlSZWdpb24oKSB7XG4gICAgY29uc3QgJGVtcHR5RWwgPSB0aGlzLiRjb250YWluZXIgfHwgdGhpcy4kZWw7XG5cbiAgICBpZiAodGhpcy5fZW1wdHlSZWdpb24gJiYgIXRoaXMuX2VtcHR5UmVnaW9uLmlzRGVzdHJveWVkKCkpIHtcbiAgICAgIHRoaXMuX2VtcHR5UmVnaW9uLl9zZXRFbGVtZW50KCRlbXB0eUVsWzBdKTtcbiAgICAgIHJldHVybiB0aGlzLl9lbXB0eVJlZ2lvbjtcbiAgICB9XG5cbiAgICB0aGlzLl9lbXB0eVJlZ2lvbiA9IG5ldyBSZWdpb24oeyBlbDogJGVtcHR5RWxbMF0sIHJlcGxhY2VFbGVtZW50OiBmYWxzZSB9KTtcblxuICAgIHRoaXMuX2VtcHR5UmVnaW9uLl9wYXJlbnRWaWV3ID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9lbXB0eVJlZ2lvbjtcbiAgfSxcblxuICAvLyBDb25maWd1cmVkIHRoZSBpbml0aWFsIGV2ZW50cyB0aGF0IHRoZSBjb2xsZWN0aW9uIHZpZXcgYmluZHMgdG8uXG4gIF9pbml0aWFsRXZlbnRzKCkge1xuICAgIGlmICh0aGlzLl9pc1JlbmRlcmVkKSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmNvbGxlY3Rpb24sIHtcbiAgICAgICdzb3J0JzogdGhpcy5fb25Db2xsZWN0aW9uU29ydCxcbiAgICAgICdyZXNldCc6IHRoaXMuX29uQ29sbGVjdGlvblJlc2V0LFxuICAgICAgJ3VwZGF0ZSc6IHRoaXMuX29uQ29sbGVjdGlvblVwZGF0ZVxuICAgIH0pO1xuICB9LFxuXG4gIC8vIEludGVybmFsIG1ldGhvZC4gVGhpcyBjaGVja3MgZm9yIGFueSBjaGFuZ2VzIGluIHRoZSBvcmRlciBvZiB0aGUgY29sbGVjdGlvbi5cbiAgLy8gSWYgdGhlIGluZGV4IG9mIGFueSB2aWV3IGRvZXNuJ3QgbWF0Y2gsIGl0IHdpbGwgcmUtc29ydC5cbiAgX29uQ29sbGVjdGlvblNvcnQoY29sbGVjdGlvbiwgeyBhZGQsIG1lcmdlLCByZW1vdmUgfSkge1xuICAgIGlmICghdGhpcy5zb3J0V2l0aENvbGxlY3Rpb24gfHwgdGhpcy52aWV3Q29tcGFyYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgZGF0YSBpcyBjaGFuZ2luZyB3ZSB3aWxsIGhhbmRsZSB0aGUgc29ydCBsYXRlciBpbiBgX29uQ29sbGVjdGlvblVwZGF0ZWBcbiAgICBpZiAoYWRkIHx8IHJlbW92ZSB8fCBtZXJnZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBvbmx5IHRoaW5nIGhhcHBlbmluZyBoZXJlIGlzIHNvcnRpbmcsIHNvcnQuXG4gICAgdGhpcy5zb3J0KCk7XG4gIH0sXG5cbiAgX29uQ29sbGVjdGlvblJlc2V0KCkge1xuICAgIHRoaXMuX2Rlc3Ryb3lDaGlsZHJlbigpO1xuXG4gICAgdGhpcy5fYWRkQ2hpbGRNb2RlbHModGhpcy5jb2xsZWN0aW9uLm1vZGVscyk7XG5cbiAgICB0aGlzLnNvcnQoKTtcbiAgfSxcblxuICAvLyBIYW5kbGUgY29sbGVjdGlvbiB1cGRhdGUgbW9kZWwgYWRkaXRpb25zIGFuZCAgcmVtb3ZhbHNcbiAgX29uQ29sbGVjdGlvblVwZGF0ZShjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY2hhbmdlcyA9IG9wdGlvbnMuY2hhbmdlcztcblxuICAgIC8vIFJlbW92ZSBmaXJzdCBzaW5jZSBpdCdsbCBiZSBhIHNob3J0ZXIgYXJyYXkgbG9va3VwLlxuICAgIGNvbnN0IHJlbW92ZWRWaWV3cyA9IGNoYW5nZXMucmVtb3ZlZC5sZW5ndGggJiYgdGhpcy5fcmVtb3ZlQ2hpbGRNb2RlbHMoY2hhbmdlcy5yZW1vdmVkKTtcblxuICAgIHRoaXMuX2FkZGVkVmlld3MgPSBjaGFuZ2VzLmFkZGVkLmxlbmd0aCAmJiB0aGlzLl9hZGRDaGlsZE1vZGVscyhjaGFuZ2VzLmFkZGVkKTtcblxuICAgIHRoaXMuX2RldGFjaENoaWxkcmVuKHJlbW92ZWRWaWV3cyk7XG5cbiAgICB0aGlzLnNvcnQoKTtcblxuICAgIC8vIERlc3Ryb3kgcmVtb3ZlZCBjaGlsZCB2aWV3cyBhZnRlciBhbGwgb2YgdGhlIHJlbmRlciBpcyBjb21wbGV0ZVxuICAgIHRoaXMuX3JlbW92ZUNoaWxkVmlld3MocmVtb3ZlZFZpZXdzKTtcbiAgfSxcblxuICBfcmVtb3ZlQ2hpbGRNb2RlbHMobW9kZWxzKSB7XG4gICAgcmV0dXJuIF8ucmVkdWNlKG1vZGVscywgKHZpZXdzLCBtb2RlbCkgPT4ge1xuICAgICAgY29uc3QgcmVtb3ZlVmlldyA9IHRoaXMuX3JlbW92ZUNoaWxkTW9kZWwobW9kZWwpO1xuXG4gICAgICBpZiAocmVtb3ZlVmlldykgeyB2aWV3cy5wdXNoKHJlbW92ZVZpZXcpOyB9XG5cbiAgICAgIHJldHVybiB2aWV3cztcbiAgICB9LCBbXSk7XG4gIH0sXG5cbiAgX3JlbW92ZUNoaWxkTW9kZWwobW9kZWwpIHtcbiAgICBjb25zdCB2aWV3ID0gdGhpcy5fY2hpbGRyZW4uZmluZEJ5TW9kZWwobW9kZWwpO1xuXG4gICAgaWYgKHZpZXcpIHsgdGhpcy5fcmVtb3ZlQ2hpbGQodmlldyk7IH1cblxuICAgIHJldHVybiB2aWV3O1xuICB9LFxuXG4gIF9yZW1vdmVDaGlsZCh2aWV3KSB7XG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6cmVtb3ZlOmNoaWxkJywgdGhpcywgdmlldyk7XG5cbiAgICB0aGlzLmNoaWxkcmVuLl9yZW1vdmUodmlldyk7XG4gICAgdGhpcy5fY2hpbGRyZW4uX3JlbW92ZSh2aWV3KTtcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgncmVtb3ZlOmNoaWxkJywgdGhpcywgdmlldyk7XG4gIH0sXG5cbiAgLy8gQWRkZWQgdmlld3MgYXJlIHJldHVybmVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIF9yZW1vdmVDaGlsZE1vZGVsc1xuICBfYWRkQ2hpbGRNb2RlbHMobW9kZWxzKSB7XG4gICAgcmV0dXJuIF8ubWFwKG1vZGVscywgdGhpcy5fYWRkQ2hpbGRNb2RlbC5iaW5kKHRoaXMpKTtcbiAgfSxcblxuICBfYWRkQ2hpbGRNb2RlbChtb2RlbCkge1xuICAgIGNvbnN0IHZpZXcgPSB0aGlzLl9jcmVhdGVDaGlsZFZpZXcobW9kZWwpO1xuXG4gICAgdGhpcy5fYWRkQ2hpbGQodmlldyk7XG5cbiAgICByZXR1cm4gdmlldztcbiAgfSxcblxuICBfY3JlYXRlQ2hpbGRWaWV3KG1vZGVsKSB7XG4gICAgY29uc3QgQ2hpbGRWaWV3ID0gdGhpcy5fZ2V0Q2hpbGRWaWV3KG1vZGVsKTtcbiAgICBjb25zdCBjaGlsZFZpZXdPcHRpb25zID0gdGhpcy5fZ2V0Q2hpbGRWaWV3T3B0aW9ucyhtb2RlbCk7XG4gICAgY29uc3QgdmlldyA9IHRoaXMuYnVpbGRDaGlsZFZpZXcobW9kZWwsIENoaWxkVmlldywgY2hpbGRWaWV3T3B0aW9ucyk7XG5cbiAgICByZXR1cm4gdmlldztcbiAgfSxcblxuICBfYWRkQ2hpbGQodmlldywgaW5kZXgpIHtcbiAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ2JlZm9yZTphZGQ6Y2hpbGQnLCB0aGlzLCB2aWV3KTtcblxuICAgIHRoaXMuX3NldHVwQ2hpbGRWaWV3KHZpZXcpO1xuICAgIHRoaXMuX2NoaWxkcmVuLl9hZGQodmlldywgaW5kZXgpO1xuICAgIHRoaXMuY2hpbGRyZW4uX2FkZCh2aWV3LCBpbmRleCk7XG5cbiAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ2FkZDpjaGlsZCcsIHRoaXMsIHZpZXcpO1xuICB9LFxuXG4gIC8vIFJldHJpZXZlIHRoZSBgY2hpbGRWaWV3YCBjbGFzc1xuICAvLyBUaGUgYGNoaWxkVmlld2AgcHJvcGVydHkgY2FuIGJlIGVpdGhlciBhIHZpZXcgY2xhc3Mgb3IgYSBmdW5jdGlvbiB0aGF0XG4gIC8vIHJldHVybnMgYSB2aWV3IGNsYXNzLiBJZiBpdCBpcyBhIGZ1bmN0aW9uLCBpdCB3aWxsIHJlY2VpdmUgdGhlIG1vZGVsIHRoYXRcbiAgLy8gd2lsbCBiZSBwYXNzZWQgdG8gdGhlIHZpZXcgaW5zdGFuY2UgKGNyZWF0ZWQgZnJvbSB0aGUgcmV0dXJuZWQgdmlldyBjbGFzcylcbiAgX2dldENoaWxkVmlldyhjaGlsZCkge1xuICAgIGxldCBjaGlsZFZpZXcgPSB0aGlzLmNoaWxkVmlldztcblxuICAgIGlmICghY2hpbGRWaWV3KSB7XG4gICAgICB0aHJvdyBuZXcgTWFyaW9uZXR0ZUVycm9yKHtcbiAgICAgICAgbmFtZTogY2xhc3NFcnJvck5hbWUsXG4gICAgICAgIG1lc3NhZ2U6ICdBIFwiY2hpbGRWaWV3XCIgbXVzdCBiZSBzcGVjaWZpZWQnLFxuICAgICAgICB1cmw6ICdtYXJpb25ldHRlLmNvbGxlY3Rpb252aWV3Lmh0bWwjY29sbGVjdGlvbnZpZXdzLWNoaWxkdmlldydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNoaWxkVmlldyA9IHRoaXMuX2dldFZpZXcoY2hpbGRWaWV3LCBjaGlsZCk7XG5cbiAgICBpZiAoIWNoaWxkVmlldykge1xuICAgICAgdGhyb3cgbmV3IE1hcmlvbmV0dGVFcnJvcih7XG4gICAgICAgIG5hbWU6IGNsYXNzRXJyb3JOYW1lLFxuICAgICAgICBtZXNzYWdlOiAnXCJjaGlsZFZpZXdcIiBtdXN0IGJlIGEgdmlldyBjbGFzcyBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHZpZXcgY2xhc3MnLFxuICAgICAgICB1cmw6ICdtYXJpb25ldHRlLmNvbGxlY3Rpb252aWV3Lmh0bWwjY29sbGVjdGlvbnZpZXdzLWNoaWxkdmlldydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZFZpZXc7XG4gIH0sXG5cbiAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlIGB2aWV3YCBpcyBhIHZpZXcgY2xhc3MgKHRoZSBjb21tb24gY2FzZSlcbiAgLy8gVGhlbiBjaGVjayBpZiBpdCdzIGEgZnVuY3Rpb24gKHdoaWNoIHdlIGFzc3VtZSB0aGF0IHJldHVybnMgYSB2aWV3IGNsYXNzKVxuICBfZ2V0Vmlldyh2aWV3LCBjaGlsZCkge1xuICAgIGlmICh2aWV3LnByb3RvdHlwZSBpbnN0YW5jZW9mIEJhY2tib25lLlZpZXcgfHwgdmlldyA9PT0gQmFja2JvbmUuVmlldykge1xuICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24odmlldykpIHtcbiAgICAgIHJldHVybiB2aWV3LmNhbGwodGhpcywgY2hpbGQpO1xuICAgIH1cbiAgfSxcblxuICBfZ2V0Q2hpbGRWaWV3T3B0aW9ucyhjaGlsZCkge1xuICAgIGlmIChfLmlzRnVuY3Rpb24odGhpcy5jaGlsZFZpZXdPcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRWaWV3T3B0aW9ucyhjaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2hpbGRWaWV3T3B0aW9ucztcbiAgfSxcblxuICAvLyBCdWlsZCBhIGBjaGlsZFZpZXdgIGZvciBhIG1vZGVsIGluIHRoZSBjb2xsZWN0aW9uLlxuICAvLyBPdmVycmlkZSB0byBjdXN0b21pemUgdGhlIGJ1aWxkXG4gIGJ1aWxkQ2hpbGRWaWV3KGNoaWxkLCBDaGlsZFZpZXdDbGFzcywgY2hpbGRWaWV3T3B0aW9ucykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBfLmV4dGVuZCh7bW9kZWw6IGNoaWxkfSwgY2hpbGRWaWV3T3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBDaGlsZFZpZXdDbGFzcyhvcHRpb25zKTtcbiAgfSxcblxuICBfc2V0dXBDaGlsZFZpZXcodmlldykge1xuICAgIG1vbml0b3JWaWV3RXZlbnRzKHZpZXcpO1xuXG4gICAgLy8gV2UgbmVlZCB0byBsaXN0ZW4gZm9yIGlmIGEgdmlldyBpcyBkZXN0cm95ZWQgaW4gYSB3YXkgb3RoZXJcbiAgICAvLyB0aGFuIHRocm91Z2ggdGhlIENvbGxlY3Rpb25WaWV3LlxuICAgIC8vIElmIHRoaXMgaGFwcGVucyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSB2aWV3XG4gICAgLy8gc2luY2Ugb25jZSBhIHZpZXcgaGFzIGJlZW4gZGVzdHJveWVkIHdlIGNhbiBub3QgcmV1c2UgaXQuXG4gICAgdmlldy5vbignZGVzdHJveScsIHRoaXMucmVtb3ZlQ2hpbGRWaWV3LCB0aGlzKTtcblxuICAgIC8vIHNldCB1cCB0aGUgY2hpbGQgdmlldyBldmVudCBmb3J3YXJkaW5nXG4gICAgdGhpcy5fcHJveHlDaGlsZFZpZXdFdmVudHModmlldyk7XG4gIH0sXG5cbiAgLy8gdXNlZCBieSBWaWV3TWl4aW4ncyBgX2NoaWxkVmlld0V2ZW50SGFuZGxlcmBcbiAgX2dldEltbWVkaWF0ZUNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLl92aWV3cztcbiAgfSxcblxuICAvLyBPdmVycmlkaW5nIEJhY2tib25lLlZpZXcncyBgc2V0RWxlbWVudGAgdG8gaGFuZGxlXG4gIC8vIGlmIGFuIGVsIHdhcyBwcmV2aW91c2x5IGRlZmluZWQuIElmIHNvLCB0aGUgdmlldyBtaWdodCBiZVxuICAvLyBhdHRhY2hlZCBvbiBzZXRFbGVtZW50LlxuICBzZXRFbGVtZW50KCkge1xuICAgIEJhY2tib25lLlZpZXcucHJvdG90eXBlLnNldEVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuX2lzQXR0YWNoZWQgPSB0aGlzLl9pc0VsQXR0YWNoZWQoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIFJlbmRlciBjaGlsZHJlbiB2aWV3cy5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLl9pc0Rlc3Ryb3llZCkgeyByZXR1cm4gdGhpczsgfVxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOnJlbmRlcicsIHRoaXMpO1xuXG4gICAgdGhpcy5fZGVzdHJveUNoaWxkcmVuKCk7XG5cbiAgICBpZiAodGhpcy5jb2xsZWN0aW9uKSB7XG4gICAgICB0aGlzLl9hZGRDaGlsZE1vZGVscyh0aGlzLmNvbGxlY3Rpb24ubW9kZWxzKTtcbiAgICAgIHRoaXMuX2luaXRpYWxFdmVudHMoKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZ2V0VGVtcGxhdGUoKTtcblxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgdGhpcy5fcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgdGhpcy5iaW5kVUlFbGVtZW50cygpO1xuICAgIH1cbiAgICB0aGlzLl9nZXRDaGlsZFZpZXdDb250YWluZXIoKTtcbiAgICB0aGlzLnNvcnQoKTtcblxuICAgIHRoaXMuX2lzUmVuZGVyZWQgPSB0cnVlO1xuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdyZW5kZXInLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBHZXQgYSBjb250YWluZXIgd2l0aGluIHRoZSB0ZW1wbGF0ZSB0byBhZGQgdGhlIGNoaWxkcmVuIHdpdGhpblxuICBfZ2V0Q2hpbGRWaWV3Q29udGFpbmVyKCkge1xuICAgIGNvbnN0IGNoaWxkVmlld0NvbnRhaW5lciA9IF8ucmVzdWx0KHRoaXMsICdjaGlsZFZpZXdDb250YWluZXInKTtcbiAgICB0aGlzLiRjb250YWluZXIgPSBjaGlsZFZpZXdDb250YWluZXIgPyB0aGlzLiQoY2hpbGRWaWV3Q29udGFpbmVyKSA6IHRoaXMuJGVsO1xuXG4gICAgaWYgKCF0aGlzLiRjb250YWluZXIubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgTWFyaW9uZXR0ZUVycm9yKHtcbiAgICAgICAgbmFtZTogY2xhc3NFcnJvck5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IGBUaGUgc3BlY2lmaWVkIFwiY2hpbGRWaWV3Q29udGFpbmVyXCIgd2FzIG5vdCBmb3VuZDogJHtjaGlsZFZpZXdDb250YWluZXJ9YCxcbiAgICAgICAgdXJsOiAnbWFyaW9uZXR0ZS5jb2xsZWN0aW9udmlldy5odG1sI2RlZmluaW5nLXRoZS1jaGlsZHZpZXdjb250YWluZXInXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU29ydHMgdGhlIGNoaWxkcmVuIHRoZW4gZmlsdGVycyBhbmQgcmVuZGVycyB0aGUgcmVzdWx0cy5cbiAgc29ydCgpIHtcbiAgICB0aGlzLl9zb3J0Q2hpbGRyZW4oKTtcblxuICAgIHRoaXMuZmlsdGVyKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBTb3J0cyB2aWV3cyBieSB2aWV3Q29tcGFyYXRvciBhbmQgc2V0cyB0aGUgY2hpbGRyZW4gdG8gdGhlIG5ldyBvcmRlclxuICBfc29ydENoaWxkcmVuKCkge1xuICAgIGlmICghdGhpcy5fY2hpbGRyZW4ubGVuZ3RoKSB7IHJldHVybjsgfVxuXG4gICAgbGV0IHZpZXdDb21wYXJhdG9yID0gdGhpcy5nZXRDb21wYXJhdG9yKCk7XG5cbiAgICBpZiAoIXZpZXdDb21wYXJhdG9yKSB7IHJldHVybjsgfVxuXG4gICAgLy8gSWYgY2hpbGRyZW4gYXJlIHNvcnRlZCBwcmV2ZW50IGFkZGVkIHRvIGVuZCBwZXJmXG4gICAgZGVsZXRlIHRoaXMuX2FkZGVkVmlld3M7XG5cbiAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ2JlZm9yZTpzb3J0JywgdGhpcyk7XG5cbiAgICB0aGlzLl9jaGlsZHJlbi5fc29ydCh2aWV3Q29tcGFyYXRvciwgdGhpcyk7XG5cbiAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ3NvcnQnLCB0aGlzKTtcbiAgfSxcblxuICAvLyBTZXRzIHRoZSB2aWV3J3MgYHZpZXdDb21wYXJhdG9yYCBhbmQgYXBwbGllcyB0aGUgc29ydCBpZiB0aGUgdmlldyBpcyByZWFkeS5cbiAgLy8gVG8gcHJldmVudCB0aGUgcmVuZGVyIHBhc3MgYHsgcHJldmVudFJlbmRlcjogdHJ1ZSB9YCBhcyB0aGUgMm5kIGFyZ3VtZW50LlxuICBzZXRDb21wYXJhdG9yKGNvbXBhcmF0b3IsIHtwcmV2ZW50UmVuZGVyfSA9IHt9KSB7XG4gICAgY29uc3QgY29tcGFyYXRvckNoYW5nZWQgPSB0aGlzLnZpZXdDb21wYXJhdG9yICE9PSBjb21wYXJhdG9yO1xuICAgIGNvbnN0IHNob3VsZFNvcnQgPSBjb21wYXJhdG9yQ2hhbmdlZCAmJiAhcHJldmVudFJlbmRlcjtcblxuICAgIHRoaXMudmlld0NvbXBhcmF0b3IgPSBjb21wYXJhdG9yO1xuXG4gICAgaWYgKHNob3VsZFNvcnQpIHtcbiAgICAgIHRoaXMuc29ydCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIENsZWFycyB0aGUgYHZpZXdDb21wYXJhdG9yYCBhbmQgZm9sbG93cyB0aGUgc2FtZSBydWxlcyBmb3IgcmVuZGVyaW5nIGFzIGBzZXRDb21wYXJhdG9yYC5cbiAgcmVtb3ZlQ29tcGFyYXRvcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0Q29tcGFyYXRvcihudWxsLCBvcHRpb25zKTtcbiAgfSxcblxuICAvLyBJZiB2aWV3Q29tcGFyYXRvciBpcyBvdmVycmlkZW4gaXQgd2lsbCBiZSByZXR1cm5lZCBoZXJlLlxuICAvLyBBZGRpdGlvbmFsbHkgb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBwcm92aWRlIGN1c3RvbVxuICAvLyB2aWV3Q29tcGFyYXRvciBsb2dpY1xuICBnZXRDb21wYXJhdG9yKCkge1xuICAgIGlmICh0aGlzLnZpZXdDb21wYXJhdG9yKSB7IHJldHVybiB0aGlzLnZpZXdDb21wYXJhdG9yIH1cblxuICAgIGlmICghdGhpcy5zb3J0V2l0aENvbGxlY3Rpb24gfHwgdGhpcy52aWV3Q29tcGFyYXRvciA9PT0gZmFsc2UgfHwgIXRoaXMuY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl92aWV3Q29tcGFyYXRvcjtcbiAgfSxcblxuICAvLyBEZWZhdWx0IGludGVybmFsIHZpZXcgY29tcGFyYXRvciB0aGF0IG9yZGVyIHRoZSB2aWV3cyBieVxuICAvLyB0aGUgb3JkZXIgb2YgdGhlIGNvbGxlY3Rpb25cbiAgX3ZpZXdDb21wYXJhdG9yKHZpZXcpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uLmluZGV4T2Yodmlldy5tb2RlbCk7XG4gIH0sXG5cbiAgLy8gVGhpcyBtZXRob2QgZmlsdGVycyB0aGUgY2hpbGRyZW4gdmlld3MgYW5kIHJlbmRlcnMgdGhlIHJlc3VsdHNcbiAgZmlsdGVyKCkge1xuICAgIGlmICh0aGlzLl9pc0Rlc3Ryb3llZCkgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgdGhpcy5fZmlsdGVyQ2hpbGRyZW4oKTtcblxuICAgIHRoaXMuX3JlbmRlckNoaWxkcmVuKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfZmlsdGVyQ2hpbGRyZW4oKSB7XG4gICAgaWYgKCF0aGlzLl9jaGlsZHJlbi5sZW5ndGgpIHsgcmV0dXJuOyB9XG5cbiAgICBjb25zdCB2aWV3RmlsdGVyID0gdGhpcy5fZ2V0RmlsdGVyKCk7XG5cbiAgICBpZiAoIXZpZXdGaWx0ZXIpIHtcbiAgICAgIGNvbnN0IHNob3VsZFJlc2V0ID0gdGhpcy5jaGlsZHJlbi5sZW5ndGggIT09IHRoaXMuX2NoaWxkcmVuLmxlbmd0aDtcblxuICAgICAgdGhpcy5jaGlsZHJlbi5fc2V0KHRoaXMuX2NoaWxkcmVuLl92aWV3cywgc2hvdWxkUmVzZXQpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgY2hpbGRyZW4gYXJlIGZpbHRlcmVkIHByZXZlbnQgYWRkZWQgdG8gZW5kIHBlcmZcbiAgICBkZWxldGUgdGhpcy5fYWRkZWRWaWV3cztcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOmZpbHRlcicsIHRoaXMpO1xuXG4gICAgY29uc3QgYXR0YWNoVmlld3MgPSBbXTtcbiAgICBjb25zdCBkZXRhY2hWaWV3cyA9IFtdO1xuXG4gICAgXy5lYWNoKHRoaXMuX2NoaWxkcmVuLl92aWV3cywgKHZpZXcsIGtleSwgY2hpbGRyZW4pID0+IHtcbiAgICAgICh2aWV3RmlsdGVyLmNhbGwodGhpcywgdmlldywga2V5LCBjaGlsZHJlbikgPyBhdHRhY2hWaWV3cyA6IGRldGFjaFZpZXdzKS5wdXNoKHZpZXcpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fZGV0YWNoQ2hpbGRyZW4oZGV0YWNoVmlld3MpO1xuXG4gICAgLy8gcmVzZXQgY2hpbGRyZW5cbiAgICB0aGlzLmNoaWxkcmVuLl9zZXQoYXR0YWNoVmlld3MsIHRydWUpO1xuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdmaWx0ZXInLCB0aGlzLCBhdHRhY2hWaWV3cywgZGV0YWNoVmlld3MpO1xuICB9LFxuXG4gIC8vIFRoaXMgbWV0aG9kIHJldHVybnMgYSBmdW5jdGlvbiBmb3IgdGhlIHZpZXdGaWx0ZXJcbiAgX2dldEZpbHRlcigpIHtcbiAgICBjb25zdCB2aWV3RmlsdGVyID0gdGhpcy5nZXRGaWx0ZXIoKTtcblxuICAgIGlmICghdmlld0ZpbHRlcikgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmIChfLmlzRnVuY3Rpb24odmlld0ZpbHRlcikpIHtcbiAgICAgIHJldHVybiB2aWV3RmlsdGVyO1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQgZmlsdGVyIHByZWRpY2F0ZXMgYHsgZm9vRmxhZzogdHJ1ZSB9YFxuICAgIGlmIChfLmlzT2JqZWN0KHZpZXdGaWx0ZXIpKSB7XG4gICAgICBjb25zdCBtYXRjaGVyID0gXy5tYXRjaGVzKHZpZXdGaWx0ZXIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZpZXcpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIodmlldy5tb2RlbCAmJiB2aWV3Lm1vZGVsLmF0dHJpYnV0ZXMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBGaWx0ZXIgYnkgbW9kZWwgYXR0cmlidXRlXG4gICAgaWYgKF8uaXNTdHJpbmcodmlld0ZpbHRlcikpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgIHJldHVybiB2aWV3Lm1vZGVsICYmIHZpZXcubW9kZWwuZ2V0KHZpZXdGaWx0ZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgTWFyaW9uZXR0ZUVycm9yKHtcbiAgICAgIG5hbWU6IGNsYXNzRXJyb3JOYW1lLFxuICAgICAgbWVzc2FnZTogJ1widmlld0ZpbHRlclwiIG11c3QgYmUgYSBmdW5jdGlvbiwgcHJlZGljYXRlIG9iamVjdCBsaXRlcmFsLCBhIHN0cmluZyBpbmRpY2F0aW5nIGEgbW9kZWwgYXR0cmlidXRlLCBvciBmYWxzeScsXG4gICAgICB1cmw6ICdtYXJpb25ldHRlLmNvbGxlY3Rpb252aWV3Lmh0bWwjZGVmaW5pbmctdGhlLXZpZXdmaWx0ZXInXG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gT3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBwcm92aWRlIGN1c3RvbVxuICAvLyB2aWV3RmlsdGVyIGxvZ2ljXG4gIGdldEZpbHRlcigpIHtcbiAgICByZXR1cm4gdGhpcy52aWV3RmlsdGVyO1xuICB9LFxuXG4gIC8vIFNldHMgdGhlIHZpZXcncyBgdmlld0ZpbHRlcmAgYW5kIGFwcGxpZXMgdGhlIGZpbHRlciBpZiB0aGUgdmlldyBpcyByZWFkeS5cbiAgLy8gVG8gcHJldmVudCB0aGUgcmVuZGVyIHBhc3MgYHsgcHJldmVudFJlbmRlcjogdHJ1ZSB9YCBhcyB0aGUgMm5kIGFyZ3VtZW50LlxuICBzZXRGaWx0ZXIoZmlsdGVyLCB7cHJldmVudFJlbmRlcn0gPSB7fSkge1xuICAgIGNvbnN0IGZpbHRlckNoYW5nZWQgPSB0aGlzLnZpZXdGaWx0ZXIgIT09IGZpbHRlcjtcbiAgICBjb25zdCBzaG91bGRSZW5kZXIgPSBmaWx0ZXJDaGFuZ2VkICYmICFwcmV2ZW50UmVuZGVyO1xuXG4gICAgdGhpcy52aWV3RmlsdGVyID0gZmlsdGVyO1xuXG4gICAgaWYgKHNob3VsZFJlbmRlcikge1xuICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBDbGVhcnMgdGhlIGB2aWV3RmlsdGVyYCBhbmQgZm9sbG93cyB0aGUgc2FtZSBydWxlcyBmb3IgcmVuZGVyaW5nIGFzIGBzZXRGaWx0ZXJgLlxuICByZW1vdmVGaWx0ZXIob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnNldEZpbHRlcihudWxsLCBvcHRpb25zKTtcbiAgfSxcblxuICBfZGV0YWNoQ2hpbGRyZW4oZGV0YWNoaW5nVmlld3MpIHtcbiAgICBfLmVhY2goZGV0YWNoaW5nVmlld3MsIHRoaXMuX2RldGFjaENoaWxkVmlldy5iaW5kKHRoaXMpKTtcbiAgfSxcblxuICBfZGV0YWNoQ2hpbGRWaWV3KHZpZXcpIHtcbiAgICBjb25zdCBzaG91bGRUcmlnZ2VyRGV0YWNoID0gdmlldy5faXNBdHRhY2hlZCAmJiB0aGlzLm1vbml0b3JWaWV3RXZlbnRzICE9PSBmYWxzZTtcbiAgICBpZiAoc2hvdWxkVHJpZ2dlckRldGFjaCkge1xuICAgICAgdmlldy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6ZGV0YWNoJywgdmlldyk7XG4gICAgfVxuXG4gICAgdGhpcy5kZXRhY2hIdG1sKHZpZXcpO1xuXG4gICAgaWYgKHNob3VsZFRyaWdnZXJEZXRhY2gpIHtcbiAgICAgIHZpZXcuX2lzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIHZpZXcudHJpZ2dlck1ldGhvZCgnZGV0YWNoJywgdmlldyk7XG4gICAgfVxuXG4gICAgdmlldy5faXNTaG93biA9IGZhbHNlO1xuICB9LFxuXG4gIC8vIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSBob3cgdGhlIGNvbGxlY3Rpb25WaWV3IGRldGFjaGVzIGEgY2hpbGQgdmlld1xuICBkZXRhY2hIdG1sKHZpZXcpIHtcbiAgICB0aGlzLkRvbS5kZXRhY2hFbCh2aWV3LmVsLCB2aWV3LiRlbCk7XG4gIH0sXG5cbiAgX3JlbmRlckNoaWxkcmVuKCkge1xuICAgIC8vIElmIHRoZXJlIGFyZSB1bnJlbmRlcmVkIHZpZXdzIHByZXZlbnQgYWRkIHRvIGVuZCBwZXJmXG4gICAgaWYgKHRoaXMuX2hhc1VucmVuZGVyZWRWaWV3cykge1xuICAgICAgZGVsZXRlIHRoaXMuX2FkZGVkVmlld3M7XG4gICAgICBkZWxldGUgdGhpcy5faGFzVW5yZW5kZXJlZFZpZXdzO1xuICAgIH1cblxuICAgIGNvbnN0IHZpZXdzID0gdGhpcy5fYWRkZWRWaWV3cyB8fCB0aGlzLmNoaWxkcmVuLl92aWV3cztcblxuICAgIHRoaXMudHJpZ2dlck1ldGhvZCgnYmVmb3JlOnJlbmRlcjpjaGlsZHJlbicsIHRoaXMsIHZpZXdzKTtcblxuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy5fc2hvd0VtcHR5VmlldygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kZXN0cm95RW1wdHlWaWV3KCk7XG5cbiAgICAgIGNvbnN0IGVscyA9IHRoaXMuX2dldEJ1ZmZlcih2aWV3cyk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaENoaWxkcmVuKGVscywgdmlld3MpO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLl9hZGRlZFZpZXdzO1xuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdyZW5kZXI6Y2hpbGRyZW4nLCB0aGlzLCB2aWV3cyk7XG4gIH0sXG5cbiAgLy8gUmVuZGVycyBlYWNoIHZpZXcgYW5kIGNyZWF0ZXMgYSBmcmFnbWVudCBidWZmZXIgZnJvbSB0aGVtXG4gIF9nZXRCdWZmZXIodmlld3MpIHtcbiAgICBjb25zdCBlbEJ1ZmZlciA9IHRoaXMuRG9tLmNyZWF0ZUJ1ZmZlcigpO1xuXG4gICAgXy5lYWNoKHZpZXdzLCB2aWV3ID0+IHtcbiAgICAgIHJlbmRlclZpZXcodmlldyk7XG4gICAgICAvLyBjb3JyZXNwb25kcyB0aGF0IHZpZXcgaXMgc2hvd24gaW4gYSBSZWdpb24gb3IgQ29sbGVjdGlvblZpZXdcbiAgICAgIHZpZXcuX2lzU2hvd24gPSB0cnVlO1xuICAgICAgdGhpcy5Eb20uYXBwZW5kQ29udGVudHMoZWxCdWZmZXIsIHZpZXcuZWwsIHtfJGNvbnRlbnRzOiB2aWV3LiRlbH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVsQnVmZmVyO1xuICB9LFxuXG4gIF9hdHRhY2hDaGlsZHJlbihlbHMsIHZpZXdzKSB7XG4gICAgY29uc3Qgc2hvdWxkVHJpZ2dlckF0dGFjaCA9IHRoaXMuX2lzQXR0YWNoZWQgJiYgdGhpcy5tb25pdG9yVmlld0V2ZW50cyAhPT0gZmFsc2U7XG5cbiAgICB2aWV3cyA9IHNob3VsZFRyaWdnZXJBdHRhY2ggPyB2aWV3cyA6IFtdO1xuXG4gICAgXy5lYWNoKHZpZXdzLCB2aWV3ID0+IHtcbiAgICAgIGlmICh2aWV3Ll9pc0F0dGFjaGVkKSB7IHJldHVybjsgfVxuICAgICAgdmlldy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6YXR0YWNoJywgdmlldyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmF0dGFjaEh0bWwoZWxzLCB0aGlzLiRjb250YWluZXIpO1xuXG4gICAgXy5lYWNoKHZpZXdzLCB2aWV3ID0+IHtcbiAgICAgIGlmICh2aWV3Ll9pc0F0dGFjaGVkKSB7IHJldHVybjsgfVxuICAgICAgdmlldy5faXNBdHRhY2hlZCA9IHRydWU7XG4gICAgICB2aWV3LnRyaWdnZXJNZXRob2QoJ2F0dGFjaCcsIHZpZXcpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8vIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGRvIHNvbWV0aGluZyBvdGhlciB0aGFuIGAuYXBwZW5kYC5cbiAgLy8gWW91IGNhbiBhdHRhY2ggYW55IEhUTUwgYXQgdGhpcyBwb2ludCBpbmNsdWRpbmcgdGhlIGVscy5cbiAgYXR0YWNoSHRtbChlbHMsICRjb250YWluZXIpIHtcbiAgICB0aGlzLkRvbS5hcHBlbmRDb250ZW50cygkY29udGFpbmVyWzBdLCBlbHMsIHtfJGVsOiAkY29udGFpbmVyfSk7XG4gIH0sXG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICB9LFxuXG4gIF9zaG93RW1wdHlWaWV3KCkge1xuICAgIGNvbnN0IEVtcHR5VmlldyA9IHRoaXMuX2dldEVtcHR5VmlldygpO1xuXG4gICAgaWYgKCFFbXB0eVZpZXcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZ2V0RW1wdHlWaWV3T3B0aW9ucygpO1xuXG4gICAgY29uc3QgZW1wdHlSZWdpb24gPSB0aGlzLmdldEVtcHR5UmVnaW9uKCk7XG5cbiAgICBlbXB0eVJlZ2lvbi5zaG93KG5ldyBFbXB0eVZpZXcob3B0aW9ucykpO1xuICB9LFxuXG4gIC8vIFJldHJpZXZlIHRoZSBlbXB0eSB2aWV3IGNsYXNzXG4gIF9nZXRFbXB0eVZpZXcoKSB7XG4gICAgY29uc3QgZW1wdHlWaWV3ID0gdGhpcy5lbXB0eVZpZXc7XG5cbiAgICBpZiAoIWVtcHR5VmlldykgeyByZXR1cm47IH1cblxuICAgIHJldHVybiB0aGlzLl9nZXRWaWV3KGVtcHR5Vmlldyk7XG4gIH0sXG5cbiAgLy8gUmVtb3ZlIHRoZSBlbXB0eVZpZXdcbiAgX2Rlc3Ryb3lFbXB0eVZpZXcoKSB7XG4gICAgY29uc3QgZW1wdHlSZWdpb24gPSB0aGlzLmdldEVtcHR5UmVnaW9uKCk7XG4gICAgLy8gT25seSBlbXB0eSBpZiBhIHZpZXcgaXMgc2hvdyBzbyB0aGUgcmVnaW9uXG4gICAgLy8gZG9lc24ndCBkZXRhY2ggYW55IG90aGVyIHVucmVsYXRlZCBIVE1MXG4gICAgaWYgKGVtcHR5UmVnaW9uLmhhc1ZpZXcoKSkge1xuICAgICAgZW1wdHlSZWdpb24uZW1wdHkoKTtcbiAgICB9XG4gIH0sXG5cbiAgLy9cbiAgX2dldEVtcHR5Vmlld09wdGlvbnMoKSB7XG4gICAgY29uc3QgZW1wdHlWaWV3T3B0aW9ucyA9IHRoaXMuZW1wdHlWaWV3T3B0aW9ucyB8fCB0aGlzLmNoaWxkVmlld09wdGlvbnM7XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGVtcHR5Vmlld09wdGlvbnMpKSB7XG4gICAgICByZXR1cm4gZW1wdHlWaWV3T3B0aW9ucy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBlbXB0eVZpZXdPcHRpb25zO1xuICB9LFxuXG4gIHN3YXBDaGlsZFZpZXdzKHZpZXcxLCB2aWV3Mikge1xuICAgIGlmICghdGhpcy5fY2hpbGRyZW4uaGFzVmlldyh2aWV3MSkgfHwgIXRoaXMuX2NoaWxkcmVuLmhhc1ZpZXcodmlldzIpKSB7XG4gICAgICB0aHJvdyBuZXcgTWFyaW9uZXR0ZUVycm9yKHtcbiAgICAgICAgbmFtZTogY2xhc3NFcnJvck5hbWUsXG4gICAgICAgIG1lc3NhZ2U6ICdCb3RoIHZpZXdzIG11c3QgYmUgY2hpbGRyZW4gb2YgdGhlIGNvbGxlY3Rpb24gdmlldyB0byBzd2FwLicsXG4gICAgICAgIHVybDogJ21hcmlvbmV0dGUuY29sbGVjdGlvbnZpZXcuaHRtbCNzd2FwcGluZy1jaGlsZC12aWV3cydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX2NoaWxkcmVuLl9zd2FwKHZpZXcxLCB2aWV3Mik7XG4gICAgdGhpcy5Eb20uc3dhcEVsKHZpZXcxLmVsLCB2aWV3Mi5lbCk7XG5cbiAgICAvLyBJZiB0aGUgdmlld3MgYXJlIG5vdCBmaWx0ZXJlZCB0aGUgc2FtZSwgcmVmaWx0ZXJcbiAgICBpZiAodGhpcy5jaGlsZHJlbi5oYXNWaWV3KHZpZXcxKSAhPT0gdGhpcy5jaGlsZHJlbi5oYXNWaWV3KHZpZXcyKSkge1xuICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGlsZHJlbi5fc3dhcCh2aWV3MSwgdmlldzIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIFJlbmRlciB0aGUgY2hpbGQncyB2aWV3IGFuZCBhZGQgaXQgdG8gdGhlIEhUTUwgZm9yIHRoZSBjb2xsZWN0aW9uIHZpZXcgYXQgYSBnaXZlbiBpbmRleCwgYmFzZWQgb24gdGhlIGN1cnJlbnQgc29ydFxuICBhZGRDaGlsZFZpZXcodmlldywgaW5kZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghdmlldyB8fCB2aWV3Ll9pc0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuXG4gICAgaWYgKHZpZXcuX2lzU2hvd24pIHtcbiAgICAgIHRocm93IG5ldyBNYXJpb25ldHRlRXJyb3Ioe1xuICAgICAgICBuYW1lOiBjbGFzc0Vycm9yTmFtZSxcbiAgICAgICAgbWVzc2FnZTogJ1ZpZXcgaXMgYWxyZWFkeSBzaG93biBpbiBhIFJlZ2lvbiBvciBDb2xsZWN0aW9uVmlldycsXG4gICAgICAgIHVybDogJ21hcmlvbmV0dGUucmVnaW9uLmh0bWwjc2hvd2luZy1hLXZpZXcnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoXy5pc09iamVjdChpbmRleCkpIHtcbiAgICAgIG9wdGlvbnMgPSBpbmRleDtcbiAgICB9XG5cbiAgICAvLyBJZiBvcHRpb25zIGhhcyBkZWZpbmVkIGluZGV4IHdlIHNob3VsZCB1c2UgaXRcbiAgICBpZiAob3B0aW9ucy5pbmRleCAhPSBudWxsKSB7XG4gICAgICBpbmRleCA9IG9wdGlvbnMuaW5kZXg7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1JlbmRlcmVkKSB7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cblxuICAgIHRoaXMuX2FkZENoaWxkKHZpZXcsIGluZGV4KTtcblxuICAgIGlmIChvcHRpb25zLnByZXZlbnRSZW5kZXIpIHtcbiAgICAgIHRoaXMuX2hhc1VucmVuZGVyZWRWaWV3cyA9IHRydWU7XG4gICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICBjb25zdCBoYXNJbmRleCA9ICh0eXBlb2YgaW5kZXggIT09ICd1bmRlZmluZWQnKTtcbiAgICBjb25zdCBpc0FkZGVkVG9FbmQgPSAhaGFzSW5kZXggfHwgaW5kZXggPj0gdGhpcy5fY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgLy8gT25seSBjYWNoZSB2aWV3cyBpZiBhZGRlZCB0byB0aGUgZW5kIGFuZCB0aGVyZSBpcyBubyB1bnJlbmRlcmVkIHZpZXdzXG4gICAgaWYgKGlzQWRkZWRUb0VuZCAmJiAhdGhpcy5faGFzVW5yZW5kZXJlZFZpZXdzKSB7XG4gICAgICB0aGlzLl9hZGRlZFZpZXdzID0gW3ZpZXddO1xuICAgIH1cblxuICAgIGlmIChoYXNJbmRleCkge1xuICAgICAgdGhpcy5fcmVuZGVyQ2hpbGRyZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zb3J0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZXc7XG4gIH0sXG5cbiAgLy8gRGV0YWNoIGEgdmlldyBmcm9tIHRoZSBjaGlsZHJlbi4gIEJlc3QgdXNlZCB3aGVuIGFkZGluZyBhXG4gIC8vIGNoaWxkVmlldyBmcm9tIGBhZGRDaGlsZFZpZXdgXG4gIGRldGFjaENoaWxkVmlldyh2aWV3KSB7XG4gICAgdGhpcy5yZW1vdmVDaGlsZFZpZXcodmlldywgeyBzaG91bGREZXRhY2g6IHRydWUgfSk7XG5cbiAgICByZXR1cm4gdmlldztcbiAgfSxcblxuICAvLyBSZW1vdmUgdGhlIGNoaWxkIHZpZXcgYW5kIGRlc3Ryb3kgaXQuICBCZXN0IHVzZWQgd2hlbiBhZGRpbmcgYVxuICAvLyBjaGlsZFZpZXcgZnJvbSBgYWRkQ2hpbGRWaWV3YFxuICAvLyBUaGUgb3B0aW9ucyBhcmd1bWVudCBpcyBmb3IgaW50ZXJuYWwgdXNlIG9ubHlcbiAgcmVtb3ZlQ2hpbGRWaWV3KHZpZXcsIG9wdGlvbnMpIHtcbiAgICBpZiAoIXZpZXcpIHtcbiAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cblxuICAgIHRoaXMuX3JlbW92ZUNoaWxkVmlldyh2aWV3LCBvcHRpb25zKTtcblxuICAgIHRoaXMuX3JlbW92ZUNoaWxkKHZpZXcpO1xuXG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICB0aGlzLl9zaG93RW1wdHlWaWV3KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZXc7XG4gIH0sXG5cbiAgX3JlbW92ZUNoaWxkVmlld3Modmlld3MpIHtcbiAgICBfLmVhY2godmlld3MsIHRoaXMuX3JlbW92ZUNoaWxkVmlldy5iaW5kKHRoaXMpKTtcbiAgfSxcblxuICBfcmVtb3ZlQ2hpbGRWaWV3KHZpZXcsIHtzaG91bGREZXRhY2h9ID0ge30pIHtcbiAgICB2aWV3Lm9mZignZGVzdHJveScsIHRoaXMucmVtb3ZlQ2hpbGRWaWV3LCB0aGlzKTtcblxuICAgIGlmIChzaG91bGREZXRhY2gpIHtcbiAgICAgIHRoaXMuX2RldGFjaENoaWxkVmlldyh2aWV3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGVzdHJveUNoaWxkVmlldyh2aWV3KTtcbiAgICB9XG5cbiAgICB0aGlzLnN0b3BMaXN0ZW5pbmcodmlldyk7XG4gIH0sXG5cbiAgX2Rlc3Ryb3lDaGlsZFZpZXcodmlldykge1xuICAgIGlmICh2aWV3Ll9pc0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3VsZERpc2FibGVFdmVudHMgPSB0aGlzLm1vbml0b3JWaWV3RXZlbnRzID09PSBmYWxzZTtcbiAgICBkZXN0cm95Vmlldyh2aWV3LCBzaG91bGREaXNhYmxlRXZlbnRzKTtcbiAgfSxcblxuICAvLyBjYWxsZWQgYnkgVmlld01peGluIGRlc3Ryb3lcbiAgX3JlbW92ZUNoaWxkcmVuKCkge1xuICAgIHRoaXMuX2Rlc3Ryb3lDaGlsZHJlbigpO1xuICAgIGNvbnN0IGVtcHR5UmVnaW9uID0gdGhpcy5nZXRFbXB0eVJlZ2lvbigpO1xuICAgIGVtcHR5UmVnaW9uLmRlc3Ryb3koKTtcbiAgICBkZWxldGUgdGhpcy5fYWRkZWRWaWV3cztcbiAgfSxcblxuICAvLyBEZXN0cm95IHRoZSBjaGlsZCB2aWV3cyB0aGF0IHRoaXMgY29sbGVjdGlvbiB2aWV3IGlzIGhvbGRpbmcgb24gdG8sIGlmIGFueVxuICBfZGVzdHJveUNoaWxkcmVuKCkge1xuICAgIGlmICghdGhpcy5fY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6ZGVzdHJveTpjaGlsZHJlbicsIHRoaXMpO1xuICAgIGlmICh0aGlzLm1vbml0b3JWaWV3RXZlbnRzID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5Eb20uZGV0YWNoQ29udGVudHModGhpcy5lbCwgdGhpcy4kZWwpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbW92ZUNoaWxkVmlld3ModGhpcy5fY2hpbGRyZW4uX3ZpZXdzKTtcblxuICAgIC8vIEFmdGVyIGFsbCBjaGlsZHJlbiBoYXZlIGJlZW4gZGVzdHJveWVkIHJlLWluaXQgdGhlIGNvbnRhaW5lclxuICAgIHRoaXMuX2NoaWxkcmVuLl9pbml0KCk7XG4gICAgdGhpcy5jaGlsZHJlbi5faW5pdCgpO1xuXG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdkZXN0cm95OmNoaWxkcmVuJywgdGhpcyk7XG4gIH1cbn0sIHtcbiAgc2V0RG9tQXBpLFxuICBzZXRSZW5kZXJlclxufSk7XG5cbl8uZXh0ZW5kKENvbGxlY3Rpb25WaWV3LnByb3RvdHlwZSwgVmlld01peGluKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sbGVjdGlvblZpZXc7XG4iLCIvLyBCZWhhdmlvclxuLy8gLS0tLS0tLS1cblxuLy8gQSBCZWhhdmlvciBpcyBhbiBpc29sYXRlZCBzZXQgb2YgRE9NIC9cbi8vIHVzZXIgaW50ZXJhY3Rpb25zIHRoYXQgY2FuIGJlIG1peGVkIGludG8gYW55IFZpZXcuXG4vLyBCZWhhdmlvcnMgYWxsb3cgeW91IHRvIGJsYWNrYm94IFZpZXcgc3BlY2lmaWMgaW50ZXJhY3Rpb25zXG4vLyBpbnRvIHBvcnRhYmxlIGxvZ2ljYWwgY2h1bmtzLCBrZWVwaW5nIHlvdXIgdmlld3Mgc2ltcGxlIGFuZCB5b3VyIGNvZGUgRFJZLlxuXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBleHRlbmQgZnJvbSAnLi91dGlscy9leHRlbmQnO1xuaW1wb3J0IGdldE5hbWVzcGFjZWRFdmVudE5hbWUgZnJvbSAnLi91dGlscy9nZXQtbmFtZXNwYWNlZC1ldmVudC1uYW1lJztcbmltcG9ydCBDb21tb25NaXhpbiBmcm9tICcuL21peGlucy9jb21tb24nO1xuaW1wb3J0IERlbGVnYXRlRW50aXR5RXZlbnRzTWl4aW4gZnJvbSAnLi9taXhpbnMvZGVsZWdhdGUtZW50aXR5LWV2ZW50cyc7XG5pbXBvcnQgVHJpZ2dlcnNNaXhpbiBmcm9tICcuL21peGlucy90cmlnZ2Vycyc7XG5pbXBvcnQgVUlNaXhpbiBmcm9tICcuL21peGlucy91aSc7XG5cbmNvbnN0IENsYXNzT3B0aW9ucyA9IFtcbiAgJ2NvbGxlY3Rpb25FdmVudHMnLFxuICAnZXZlbnRzJyxcbiAgJ21vZGVsRXZlbnRzJyxcbiAgJ3RyaWdnZXJzJyxcbiAgJ3VpJ1xuXTtcblxuY29uc3QgQmVoYXZpb3IgPSBmdW5jdGlvbihvcHRpb25zLCB2aWV3KSB7XG4gIC8vIFNldHVwIHJlZmVyZW5jZSB0byB0aGUgdmlldy5cbiAgLy8gdGhpcyBjb21lcyBpbiBoYW5kbGUgd2hlbiBhIGJlaGF2aW9yXG4gIC8vIHdhbnRzIHRvIGRpcmVjdGx5IHRhbGsgdXAgdGhlIGNoYWluXG4gIC8vIHRvIHRoZSB2aWV3LlxuICB0aGlzLnZpZXcgPSB2aWV3O1xuXG4gIHRoaXMuX3NldE9wdGlvbnMob3B0aW9ucywgQ2xhc3NPcHRpb25zKTtcbiAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKHRoaXMuY2lkUHJlZml4KTtcblxuICAvLyBDb25zdHJ1Y3QgYW4gaW50ZXJuYWwgVUkgaGFzaCB1c2luZyB0aGUgYmVoYXZpb3JzIFVJXG4gIC8vIGhhc2ggY29tYmluZWQgYW5kIG92ZXJyaWRkZW4gYnkgdGhlIHZpZXcgVUkgaGFzaC5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gdXNlIFVJIGhhc2ggZWxlbWVudHMgZGVmaW5lZFxuICAvLyBpbiB0aGUgcGFyZW50IHZpZXcgYXMgd2VsbCBhcyB0aG9zZSBkZWZpbmVkIGluIHRoZSBiZWhhdmlvci5cbiAgLy8gVGhpcyBvcmRlciB3aWxsIGhlbHAgdGhlIHJldXNlIGFuZCBzaGFyZSBvZiBhIGJlaGF2aW9yXG4gIC8vIGJldHdlZW4gbXVsdGlwbGUgdmlld3MsIHdoaWxlIGxldHRpbmcgYSB2aWV3IG92ZXJyaWRlXG4gIC8vIGEgc2VsZWN0b3IgdW5kZXIgYW4gVUkga2V5LlxuICB0aGlzLnVpID0gXy5leHRlbmQoe30sIF8ucmVzdWx0KHRoaXMsICd1aScpLCBfLnJlc3VsdCh2aWV3LCAndWknKSk7XG5cbiAgLy8gUHJveHkgdmlldyB0cmlnZ2Vyc1xuICB0aGlzLmxpc3RlblRvKHZpZXcsICdhbGwnLCB0aGlzLnRyaWdnZXJNZXRob2QpO1xuXG4gIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuQmVoYXZpb3IuZXh0ZW5kID0gZXh0ZW5kO1xuXG4vLyBCZWhhdmlvciBNZXRob2RzXG4vLyAtLS0tLS0tLS0tLS0tLVxuXG5fLmV4dGVuZChCZWhhdmlvci5wcm90b3R5cGUsIENvbW1vbk1peGluLCBEZWxlZ2F0ZUVudGl0eUV2ZW50c01peGluLCBUcmlnZ2Vyc01peGluLCBVSU1peGluLCB7XG4gIGNpZFByZWZpeDogJ21uYicsXG5cbiAgLy8gVGhpcyBpcyBhIG5vb3AgbWV0aG9kIGludGVuZGVkIHRvIGJlIG92ZXJyaWRkZW5cbiAgaW5pdGlhbGl6ZSgpIHt9LFxuXG4gIC8vIHByb3h5IGJlaGF2aW9yICQgbWV0aG9kIHRvIHRoZSB2aWV3XG4gIC8vIHRoaXMgaXMgdXNlZnVsIGZvciBkb2luZyBqcXVlcnkgRE9NIGxvb2t1cHNcbiAgLy8gc2NvcGVkIHRvIGJlaGF2aW9ycyB2aWV3LlxuICAkKCkge1xuICAgIHJldHVybiB0aGlzLnZpZXcuJC5hcHBseSh0aGlzLnZpZXcsIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgLy8gU3RvcHMgdGhlIGJlaGF2aW9yIGZyb20gbGlzdGVuaW5nIHRvIGV2ZW50cy5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcblxuICAgIHRoaXMudmlldy5fcmVtb3ZlQmVoYXZpb3IodGhpcyk7XG5cbiAgICB0aGlzLl9kZWxldGVFbnRpdHlFdmVudEhhbmRsZXJzKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBwcm94eVZpZXdQcm9wZXJ0aWVzKCkge1xuICAgIHRoaXMuJGVsID0gdGhpcy52aWV3LiRlbDtcbiAgICB0aGlzLmVsID0gdGhpcy52aWV3LmVsO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgYmluZFVJRWxlbWVudHMoKSB7XG4gICAgdGhpcy5fYmluZFVJRWxlbWVudHMoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHVuYmluZFVJRWxlbWVudHMoKSB7XG4gICAgdGhpcy5fdW5iaW5kVUlFbGVtZW50cygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgZ2V0VUkobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9nZXRVSShuYW1lKTtcbiAgfSxcblxuICAvLyBIYW5kbGUgYG1vZGVsRXZlbnRzYCwgYW5kIGBjb2xsZWN0aW9uRXZlbnRzYCBjb25maWd1cmF0aW9uXG4gIGRlbGVnYXRlRW50aXR5RXZlbnRzKCkge1xuICAgIHRoaXMuX2RlbGVnYXRlRW50aXR5RXZlbnRzKHRoaXMudmlldy5tb2RlbCwgdGhpcy52aWV3LmNvbGxlY3Rpb24pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgdW5kZWxlZ2F0ZUVudGl0eUV2ZW50cygpIHtcbiAgICB0aGlzLl91bmRlbGVnYXRlRW50aXR5RXZlbnRzKHRoaXMudmlldy5tb2RlbCwgdGhpcy52aWV3LmNvbGxlY3Rpb24pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgX2dldEV2ZW50cygpIHtcbiAgICBpZiAoIXRoaXMuZXZlbnRzKSB7IHJldHVybjsgfVxuXG4gICAgLy8gTm9ybWFsaXplIGJlaGF2aW9yIGV2ZW50cyBoYXNoIHRvIGFsbG93XG4gICAgLy8gYSB1c2VyIHRvIHVzZSB0aGUgQHVpLiBzeW50YXguXG4gICAgY29uc3QgYmVoYXZpb3JFdmVudHMgPSB0aGlzLm5vcm1hbGl6ZVVJS2V5cyhfLnJlc3VsdCh0aGlzLCAnZXZlbnRzJykpO1xuXG4gICAgLy8gYmluZHMgdGhlIGhhbmRsZXIgdG8gdGhlIGJlaGF2aW9yIGFuZCBidWlsZHMgYSB1bmlxdWUgZXZlbnROYW1lXG4gICAgcmV0dXJuIF8ucmVkdWNlKGJlaGF2aW9yRXZlbnRzLCAoZXZlbnRzLCBiZWhhdmlvckhhbmRsZXIsIGtleSkgPT4ge1xuICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oYmVoYXZpb3JIYW5kbGVyKSkge1xuICAgICAgICBiZWhhdmlvckhhbmRsZXIgPSB0aGlzW2JlaGF2aW9ySGFuZGxlcl07XG4gICAgICB9XG4gICAgICBpZiAoIWJlaGF2aW9ySGFuZGxlcikgeyByZXR1cm4gZXZlbnRzOyB9XG4gICAgICBrZXkgPSBnZXROYW1lc3BhY2VkRXZlbnROYW1lKGtleSwgdGhpcy5jaWQpO1xuICAgICAgZXZlbnRzW2tleV0gPSBiZWhhdmlvckhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICAgIHJldHVybiBldmVudHM7XG4gICAgfSwge30pO1xuICB9LFxuXG4gIC8vIEludGVybmFsIG1ldGhvZCB0byBidWlsZCBhbGwgdHJpZ2dlciBoYW5kbGVycyBmb3IgYSBnaXZlbiBiZWhhdmlvclxuICBfZ2V0VHJpZ2dlcnMoKSB7XG4gICAgaWYgKCF0aGlzLnRyaWdnZXJzKSB7IHJldHVybjsgfVxuXG4gICAgLy8gTm9ybWFsaXplIGJlaGF2aW9yIHRyaWdnZXJzIGhhc2ggdG8gYWxsb3dcbiAgICAvLyBhIHVzZXIgdG8gdXNlIHRoZSBAdWkuIHN5bnRheC5cbiAgICBjb25zdCBiZWhhdmlvclRyaWdnZXJzID0gdGhpcy5ub3JtYWxpemVVSUtleXMoXy5yZXN1bHQodGhpcywgJ3RyaWdnZXJzJykpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2dldFZpZXdUcmlnZ2Vycyh0aGlzLnZpZXcsIGJlaGF2aW9yVHJpZ2dlcnMpO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQmVoYXZpb3I7XG4iLCIvLyBBcHBsaWNhdGlvblxuLy8gLS0tLS0tLS0tLS1cblxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgZXh0ZW5kIGZyb20gJy4vdXRpbHMvZXh0ZW5kJztcbmltcG9ydCBidWlsZFJlZ2lvbiBmcm9tICcuL2NvbW1vbi9idWlsZC1yZWdpb24nO1xuaW1wb3J0IENvbW1vbk1peGluIGZyb20gJy4vbWl4aW5zL2NvbW1vbic7XG5pbXBvcnQgRGVzdHJveU1peGluIGZyb20gJy4vbWl4aW5zL2Rlc3Ryb3knO1xuaW1wb3J0IFJhZGlvTWl4aW4gZnJvbSAnLi9taXhpbnMvcmFkaW8nO1xuaW1wb3J0IFJlZ2lvbiBmcm9tICcuL3JlZ2lvbic7XG5cbmNvbnN0IENsYXNzT3B0aW9ucyA9IFtcbiAgJ2NoYW5uZWxOYW1lJyxcbiAgJ3JhZGlvRXZlbnRzJyxcbiAgJ3JhZGlvUmVxdWVzdHMnLFxuICAncmVnaW9uJyxcbiAgJ3JlZ2lvbkNsYXNzJ1xuXTtcblxuY29uc3QgQXBwbGljYXRpb24gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMuX3NldE9wdGlvbnMob3B0aW9ucywgQ2xhc3NPcHRpb25zKTtcbiAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKHRoaXMuY2lkUHJlZml4KTtcbiAgdGhpcy5faW5pdFJlZ2lvbigpO1xuICB0aGlzLl9pbml0UmFkaW8oKTtcbiAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG5BcHBsaWNhdGlvbi5leHRlbmQgPSBleHRlbmQ7XG5cbi8vIEFwcGxpY2F0aW9uIE1ldGhvZHNcbi8vIC0tLS0tLS0tLS0tLS0tXG5cbl8uZXh0ZW5kKEFwcGxpY2F0aW9uLnByb3RvdHlwZSwgQ29tbW9uTWl4aW4sIERlc3Ryb3lNaXhpbiwgUmFkaW9NaXhpbiwge1xuICBjaWRQcmVmaXg6ICdtbmEnLFxuXG4gIC8vIFRoaXMgaXMgYSBub29wIG1ldGhvZCBpbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuXG4gIGluaXRpYWxpemUoKSB7fSxcblxuICAvLyBLaWNrIG9mZiBhbGwgb2YgdGhlIGFwcGxpY2F0aW9uJ3MgcHJvY2Vzc2VzLlxuICBzdGFydChvcHRpb25zKSB7XG4gICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdiZWZvcmU6c3RhcnQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ3N0YXJ0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgcmVnaW9uQ2xhc3M6IFJlZ2lvbixcblxuICBfaW5pdFJlZ2lvbigpIHtcbiAgICBjb25zdCByZWdpb24gPSB0aGlzLnJlZ2lvbjtcblxuICAgIGlmICghcmVnaW9uKSB7IHJldHVybjsgfVxuXG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICByZWdpb25DbGFzczogdGhpcy5yZWdpb25DbGFzc1xuICAgIH07XG5cbiAgICB0aGlzLl9yZWdpb24gPSBidWlsZFJlZ2lvbihyZWdpb24sIGRlZmF1bHRzKTtcbiAgfSxcblxuICBnZXRSZWdpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZ2lvbjtcbiAgfSxcblxuICBzaG93Vmlldyh2aWV3LCAuLi5hcmdzKSB7XG4gICAgY29uc3QgcmVnaW9uID0gdGhpcy5nZXRSZWdpb24oKTtcbiAgICByZWdpb24uc2hvdyh2aWV3LCAuLi5hcmdzKTtcbiAgICByZXR1cm4gdmlldztcbiAgfSxcblxuICBnZXRWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLmdldFJlZ2lvbigpLmN1cnJlbnRWaWV3O1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwbGljYXRpb247XG4iLCJpbXBvcnQge3ZlcnNpb24gYXMgVkVSU0lPTn0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcblxuaW1wb3J0IHByb3h5IGZyb20gJy4vdXRpbHMvcHJveHknO1xuaW1wb3J0IGV4dGVuZCBmcm9tICcuL3V0aWxzL2V4dGVuZCc7XG5cbmltcG9ydCB7XG4gIGJpbmRFdmVudHMgYXMgX2JpbmRFdmVudHMsXG4gIHVuYmluZEV2ZW50cyBhcyBfdW5iaW5kRXZlbnRzXG59IGZyb20gJy4vY29tbW9uL2JpbmQtZXZlbnRzJztcbmltcG9ydCB7XG4gIGJpbmRSZXF1ZXN0cyBhcyBfYmluZFJlcXVlc3RzLFxuICB1bmJpbmRSZXF1ZXN0cyBhcyBfdW5iaW5kUmVxdWVzdHNcbn0gZnJvbSAnLi9jb21tb24vYmluZC1yZXF1ZXN0cyc7XG5pbXBvcnQgX2dldE9wdGlvbiBmcm9tICcuL2NvbW1vbi9nZXQtb3B0aW9uJztcbmltcG9ydCBfbWVyZ2VPcHRpb25zIGZyb20gJy4vY29tbW9uL21lcmdlLW9wdGlvbnMnO1xuaW1wb3J0IG1vbml0b3JWaWV3RXZlbnRzIGZyb20gJy4vY29tbW9uL21vbml0b3Itdmlldy1ldmVudHMnO1xuaW1wb3J0IF9ub3JtYWxpemVNZXRob2RzIGZyb20gJy4vY29tbW9uL25vcm1hbGl6ZS1tZXRob2RzJztcbmltcG9ydCBfdHJpZ2dlck1ldGhvZCBmcm9tICcuL2NvbW1vbi90cmlnZ2VyLW1ldGhvZCc7XG5cbmltcG9ydCBFdmVudHMgZnJvbSAnLi9taXhpbnMvZXZlbnRzJztcblxuaW1wb3J0IE1uT2JqZWN0IGZyb20gJy4vb2JqZWN0JztcbmltcG9ydCBWaWV3IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgQ29sbGVjdGlvblZpZXcgZnJvbSAnLi9jb2xsZWN0aW9uLXZpZXcnO1xuaW1wb3J0IEJlaGF2aW9yIGZyb20gJy4vYmVoYXZpb3InO1xuaW1wb3J0IFJlZ2lvbiBmcm9tICcuL3JlZ2lvbic7XG5pbXBvcnQgQXBwbGljYXRpb24gZnJvbSAnLi9hcHBsaWNhdGlvbic7XG5cbmltcG9ydCBEb21BcGkgZnJvbSAnLi9jb25maWcvZG9tJztcblxuaW1wb3J0IHtcbiAgaXNFbmFibGVkLFxuICBzZXRFbmFibGVkXG59IGZyb20gJy4vY29uZmlnL2ZlYXR1cmVzJztcblxuLy8gVXRpbGl0aWVzXG5cbmV4cG9ydCBjb25zdCBiaW5kRXZlbnRzID0gcHJveHkoX2JpbmRFdmVudHMpO1xuZXhwb3J0IGNvbnN0IHVuYmluZEV2ZW50cyA9IHByb3h5KF91bmJpbmRFdmVudHMpO1xuZXhwb3J0IGNvbnN0IGJpbmRSZXF1ZXN0cyA9IHByb3h5KF9iaW5kUmVxdWVzdHMpO1xuZXhwb3J0IGNvbnN0IHVuYmluZFJlcXVlc3RzID0gcHJveHkoX3VuYmluZFJlcXVlc3RzKTtcbmV4cG9ydCBjb25zdCBtZXJnZU9wdGlvbnMgPSBwcm94eShfbWVyZ2VPcHRpb25zKTtcbmV4cG9ydCBjb25zdCBnZXRPcHRpb24gPSBwcm94eShfZ2V0T3B0aW9uKTtcbmV4cG9ydCBjb25zdCBub3JtYWxpemVNZXRob2RzID0gcHJveHkoX25vcm1hbGl6ZU1ldGhvZHMpO1xuZXhwb3J0IGNvbnN0IHRyaWdnZXJNZXRob2QgPSBwcm94eShfdHJpZ2dlck1ldGhvZCk7XG5cblxuLy8gQ29uZmlndXJhdGlvblxuXG5leHBvcnQgY29uc3Qgc2V0RG9tQXBpID0gZnVuY3Rpb24obWl4aW4pIHtcbiAgQ29sbGVjdGlvblZpZXcuc2V0RG9tQXBpKG1peGluKTtcbiAgUmVnaW9uLnNldERvbUFwaShtaXhpbik7XG4gIFZpZXcuc2V0RG9tQXBpKG1peGluKTtcbn07XG5leHBvcnQgY29uc3Qgc2V0UmVuZGVyZXIgPSBmdW5jdGlvbihyZW5kZXJlcikge1xuICBDb2xsZWN0aW9uVmlldy5zZXRSZW5kZXJlcihyZW5kZXJlcik7XG4gIFZpZXcuc2V0UmVuZGVyZXIocmVuZGVyZXIpO1xufTtcblxuZXhwb3J0IHtcbiAgVmlldyxcbiAgQ29sbGVjdGlvblZpZXcsXG4gIE1uT2JqZWN0LFxuICBSZWdpb24sXG4gIEJlaGF2aW9yLFxuICBBcHBsaWNhdGlvbixcbiAgaXNFbmFibGVkLFxuICBzZXRFbmFibGVkLFxuICBtb25pdG9yVmlld0V2ZW50cyxcbiAgRXZlbnRzLFxuICBleHRlbmQsXG4gIERvbUFwaSxcbiAgVkVSU0lPTlxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBWaWV3LFxuICBDb2xsZWN0aW9uVmlldyxcbiAgTW5PYmplY3QsXG4gIE9iamVjdDogTW5PYmplY3QsXG4gIFJlZ2lvbixcbiAgQmVoYXZpb3IsXG4gIEFwcGxpY2F0aW9uLFxuICBpc0VuYWJsZWQsXG4gIHNldEVuYWJsZWQsXG4gIG1vbml0b3JWaWV3RXZlbnRzLFxuICBFdmVudHMsXG4gIGV4dGVuZCxcbiAgRG9tQXBpLFxuICBWRVJTSU9OXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///76\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return Object.getPrototypeOf;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvZ2V0UHJvdG8uanM/Y2UxMiJdLCJuYW1lcyI6WyJkZWZpbmUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiJdLCJtYXBwaW5ncyI6IkFBQUFBLHFFQUFRLFlBQVc7QUFDbEI7O0FBRUEsU0FBT0MsTUFBTSxDQUFDQyxjQUFkO0FBQ0EsQ0FKSztBQUFBLG9HQUFOIiwiZmlsZSI6Ijc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///77\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(49)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (fnToString) {\n  "use strict";\n\n  return fnToString.call(Object);\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy92YXIvT2JqZWN0RnVuY3Rpb25TdHJpbmcuanM/ZjlhNCJdLCJuYW1lcyI6WyJkZWZpbmUiLCJmblRvU3RyaW5nIiwiY2FsbCIsIk9iamVjdCJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1AsdUJBRE8sQ0FBRixtQ0FFSCxVQUFVQyxVQUFWLEVBQXVCO0FBQ3pCOztBQUVBLFNBQU9BLFVBQVUsQ0FBQ0MsSUFBWCxDQUFpQkMsTUFBakIsQ0FBUDtBQUNBLENBTks7QUFBQSxvR0FBTiIsImZpbGUiOiI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4vZm5Ub1N0cmluZ1wiXG5dLCBmdW5jdGlvbiggZm5Ub1N0cmluZyApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0cmV0dXJuIGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///78\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(80)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, Sizzle) {\n  "use strict";\n\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors; // Deprecated\n\n  jQuery.expr[":"] = jQuery.expr.pseudos;\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  jQuery.escapeSelector = Sizzle.escape;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9zZWxlY3Rvci1zaXp6bGUuanM/YjcxZSJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJTaXp6bGUiLCJmaW5kIiwiZXhwciIsInNlbGVjdG9ycyIsInBzZXVkb3MiLCJ1bmlxdWVTb3J0IiwidW5pcXVlIiwidGV4dCIsImdldFRleHQiLCJpc1hNTERvYyIsImlzWE1MIiwiY29udGFpbnMiLCJlc2NhcGVTZWxlY3RvciIsImVzY2FwZSJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCx1QkFGTyxDQUFGLG1DQUdILFVBQVVDLE1BQVYsRUFBa0JDLE1BQWxCLEVBQTJCO0FBRTlCOztBQUVBRCxRQUFNLENBQUNFLElBQVAsR0FBY0QsTUFBZDtBQUNBRCxRQUFNLENBQUNHLElBQVAsR0FBY0YsTUFBTSxDQUFDRyxTQUFyQixDQUw4QixDQU85Qjs7QUFDQUosUUFBTSxDQUFDRyxJQUFQLENBQWEsR0FBYixJQUFxQkgsTUFBTSxDQUFDRyxJQUFQLENBQVlFLE9BQWpDO0FBQ0FMLFFBQU0sQ0FBQ00sVUFBUCxHQUFvQk4sTUFBTSxDQUFDTyxNQUFQLEdBQWdCTixNQUFNLENBQUNLLFVBQTNDO0FBQ0FOLFFBQU0sQ0FBQ1EsSUFBUCxHQUFjUCxNQUFNLENBQUNRLE9BQXJCO0FBQ0FULFFBQU0sQ0FBQ1UsUUFBUCxHQUFrQlQsTUFBTSxDQUFDVSxLQUF6QjtBQUNBWCxRQUFNLENBQUNZLFFBQVAsR0FBa0JYLE1BQU0sQ0FBQ1csUUFBekI7QUFDQVosUUFBTSxDQUFDYSxjQUFQLEdBQXdCWixNQUFNLENBQUNhLE1BQS9CO0FBRUMsQ0FsQks7QUFBQSxvR0FBTiIsImZpbGUiOiI3OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4vY29yZVwiLFxuXHRcIi4uL2V4dGVybmFsL3NpenpsZS9kaXN0L3NpenpsZVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBTaXp6bGUgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Sizzle CSS Selector Engine v2.3.4\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2019-04-08\n */\n(function (window) {\n  var i,\n      support,\n      Expr,\n      getText,\n      isXML,\n      tokenize,\n      compile,\n      select,\n      outermostContext,\n      sortInput,\n      hasDuplicate,\n      // Local document vars\n  setDocument,\n      document,\n      docElem,\n      documentIsHTML,\n      rbuggyQSA,\n      rbuggyMatches,\n      matches,\n      contains,\n      // Instance-specific data\n  expando = "sizzle" + 1 * new Date(),\n      preferredDoc = window.document,\n      dirruns = 0,\n      done = 0,\n      classCache = createCache(),\n      tokenCache = createCache(),\n      compilerCache = createCache(),\n      nonnativeSelectorCache = createCache(),\n      sortOrder = function (a, b) {\n    if (a === b) {\n      hasDuplicate = true;\n    }\n\n    return 0;\n  },\n      // Instance methods\n  hasOwn = {}.hasOwnProperty,\n      arr = [],\n      pop = arr.pop,\n      push_native = arr.push,\n      push = arr.push,\n      slice = arr.slice,\n      // Use a stripped-down indexOf as it\'s faster than native\n  // https://jsperf.com/thor-indexof-vs-for/5\n  indexOf = function (list, elem) {\n    var i = 0,\n        len = list.length;\n\n    for (; i < len; i++) {\n      if (list[i] === elem) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",\n      // Regular expressions\n  // http://www.w3.org/TR/css3-selectors/#whitespace\n  whitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n      // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n  identifier = "(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",\n      // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n  attributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)\n  "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"\n  "*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace + "*\\\\]",\n      pseudos = ":(" + identifier + ")(?:\\\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n  // 1. quoted (capture 3; capture 4 or capture 5)\n  "(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" + // 2. simple (capture 6)\n  "((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)\n  ".*" + ")\\\\)|)",\n      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n  rwhitespace = new RegExp(whitespace + "+", "g"),\n      rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g"),\n      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),\n      rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),\n      rdescend = new RegExp(whitespace + "|>"),\n      rpseudo = new RegExp(pseudos),\n      ridentifier = new RegExp("^" + identifier + "$"),\n      matchExpr = {\n    "ID": new RegExp("^#(" + identifier + ")"),\n    "CLASS": new RegExp("^\\\\.(" + identifier + ")"),\n    "TAG": new RegExp("^(" + identifier + "|[*])"),\n    "ATTR": new RegExp("^" + attributes),\n    "PSEUDO": new RegExp("^" + pseudos),\n    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace + "*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i"),\n    "bool": new RegExp("^(?:" + booleans + ")$", "i"),\n    // For use in libraries implementing .is()\n    // We use this for POS matching in `select`\n    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" + whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i")\n  },\n      rhtml = /HTML$/i,\n      rinputs = /^(?:input|select|textarea|button)$/i,\n      rheader = /^h\\d$/i,\n      rnative = /^[^{]+\\{\\s*\\[native \\w/,\n      // Easily-parseable/retrievable ID or TAG or CLASS selectors\n  rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n      rsibling = /[+~]/,\n      // CSS escapes\n  // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n  runescape = new RegExp("\\\\\\\\([\\\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),\n      funescape = function (_, escaped, escapedWhitespace) {\n    var high = "0x" + escaped - 0x10000; // NaN means non-codepoint\n    // Support: Firefox<24\n    // Workaround erroneous numeric interpretation of +"0x"\n\n    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n    String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n  },\n      // CSS string/identifier serialization\n  // https://drafts.csswg.org/cssom/#common-serializing-idioms\n  rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n      fcssescape = function (ch, asCodePoint) {\n    if (asCodePoint) {\n      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n      if (ch === "\\0") {\n        return "\\uFFFD";\n      } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n      return ch.slice(0, -1) + "\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";\n    } // Other potentially-special ASCII characters get backslash-escaped\n\n\n    return "\\\\" + ch;\n  },\n      // Used for iframes\n  // See setDocument()\n  // Removing the function wrapper causes a "Permission Denied"\n  // error in IE\n  unloadHandler = function () {\n    setDocument();\n  },\n      inDisabledFieldset = addCombinator(function (elem) {\n    return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";\n  }, {\n    dir: "parentNode",\n    next: "legend"\n  }); // Optimize for push.apply( _, NodeList )\n\n\n  try {\n    push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n    // Detect silently failing push.apply\n\n    arr[preferredDoc.childNodes.length].nodeType;\n  } catch (e) {\n    push = {\n      apply: arr.length ? // Leverage slice if possible\n      function (target, els) {\n        push_native.apply(target, slice.call(els));\n      } : // Support: IE<9\n      // Otherwise append directly\n      function (target, els) {\n        var j = target.length,\n            i = 0; // Can\'t trust NodeList.length\n\n        while (target[j++] = els[i++]) {}\n\n        target.length = j - 1;\n      }\n    };\n  }\n\n  function Sizzle(selector, context, results, seed) {\n    var m,\n        i,\n        elem,\n        nid,\n        match,\n        groups,\n        newSelector,\n        newContext = context && context.ownerDocument,\n        // nodeType defaults to 9, since context defaults to document\n    nodeType = context ? context.nodeType : 9;\n    results = results || []; // Return early from calls with invalid selector or context\n\n    if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n      return results;\n    } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n    if (!seed) {\n      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n        setDocument(context);\n      }\n\n      context = context || document;\n\n      if (documentIsHTML) {\n        // If the selector is sufficiently simple, try using a "get*By*" DOM method\n        // (excepting DocumentFragment context, where the methods don\'t exist)\n        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n          // ID selector\n          if (m = match[1]) {\n            // Document context\n            if (nodeType === 9) {\n              if (elem = context.getElementById(m)) {\n                // Support: IE, Opera, Webkit\n                // TODO: identify versions\n                // getElementById can match elements by name instead of ID\n                if (elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } else {\n                return results;\n              } // Element context\n\n            } else {\n              // Support: IE, Opera, Webkit\n              // TODO: identify versions\n              // getElementById can match elements by name instead of ID\n              if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                results.push(elem);\n                return results;\n              }\n            } // Type selector\n\n          } else if (match[2]) {\n            push.apply(results, context.getElementsByTagName(selector));\n            return results; // Class selector\n          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n            push.apply(results, context.getElementsByClassName(m));\n            return results;\n          }\n        } // Take advantage of querySelectorAll\n\n\n        if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only\n        // Exclude object elements\n        nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {\n          newSelector = selector;\n          newContext = context; // qSA considers elements outside a scoping root when evaluating child or\n          // descendant combinators, which is not what we want.\n          // In such cases, we work around the behavior by prefixing every selector in the\n          // list with an ID selector referencing the scope context.\n          // Thanks to Andrew Dupont for this technique.\n\n          if (nodeType === 1 && rdescend.test(selector)) {\n            // Capture the context ID, setting it first if necessary\n            if (nid = context.getAttribute("id")) {\n              nid = nid.replace(rcssescape, fcssescape);\n            } else {\n              context.setAttribute("id", nid = expando);\n            } // Prefix every selector in the list\n\n\n            groups = tokenize(selector);\n            i = groups.length;\n\n            while (i--) {\n              groups[i] = "#" + nid + " " + toSelector(groups[i]);\n            }\n\n            newSelector = groups.join(","); // Expand context for sibling selectors\n\n            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n          }\n\n          try {\n            push.apply(results, newContext.querySelectorAll(newSelector));\n            return results;\n          } catch (qsaError) {\n            nonnativeSelectorCache(selector, true);\n          } finally {\n            if (nid === expando) {\n              context.removeAttribute("id");\n            }\n          }\n        }\n      }\n    } // All others\n\n\n    return select(selector.replace(rtrim, "$1"), context, results, seed);\n  }\n  /**\n   * Create key-value caches of limited size\n   * @returns {function(string, object)} Returns the Object data after storing it on itself with\n   *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n   *\tdeleting the oldest entry\n   */\n\n\n  function createCache() {\n    var keys = [];\n\n    function cache(key, value) {\n      // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n      if (keys.push(key + " ") > Expr.cacheLength) {\n        // Only keep the most recent entries\n        delete cache[keys.shift()];\n      }\n\n      return cache[key + " "] = value;\n    }\n\n    return cache;\n  }\n  /**\n   * Mark a function for special use by Sizzle\n   * @param {Function} fn The function to mark\n   */\n\n\n  function markFunction(fn) {\n    fn[expando] = true;\n    return fn;\n  }\n  /**\n   * Support testing using an element\n   * @param {Function} fn Passed the created element and returns a boolean result\n   */\n\n\n  function assert(fn) {\n    var el = document.createElement("fieldset");\n\n    try {\n      return !!fn(el);\n    } catch (e) {\n      return false;\n    } finally {\n      // Remove from its parent by default\n      if (el.parentNode) {\n        el.parentNode.removeChild(el);\n      } // release memory in IE\n\n\n      el = null;\n    }\n  }\n  /**\n   * Adds the same handler for all of the specified attrs\n   * @param {String} attrs Pipe-separated list of attributes\n   * @param {Function} handler The method that will be applied\n   */\n\n\n  function addHandle(attrs, handler) {\n    var arr = attrs.split("|"),\n        i = arr.length;\n\n    while (i--) {\n      Expr.attrHandle[arr[i]] = handler;\n    }\n  }\n  /**\n   * Checks document order of two siblings\n   * @param {Element} a\n   * @param {Element} b\n   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n   */\n\n\n  function siblingCheck(a, b) {\n    var cur = b && a,\n        diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n    if (diff) {\n      return diff;\n    } // Check if b follows a\n\n\n    if (cur) {\n      while (cur = cur.nextSibling) {\n        if (cur === b) {\n          return -1;\n        }\n      }\n    }\n\n    return a ? 1 : -1;\n  }\n  /**\n   * Returns a function to use in pseudos for input types\n   * @param {String} type\n   */\n\n\n  function createInputPseudo(type) {\n    return function (elem) {\n      var name = elem.nodeName.toLowerCase();\n      return name === "input" && elem.type === type;\n    };\n  }\n  /**\n   * Returns a function to use in pseudos for buttons\n   * @param {String} type\n   */\n\n\n  function createButtonPseudo(type) {\n    return function (elem) {\n      var name = elem.nodeName.toLowerCase();\n      return (name === "input" || name === "button") && elem.type === type;\n    };\n  }\n  /**\n   * Returns a function to use in pseudos for :enabled/:disabled\n   * @param {Boolean} disabled true for :disabled; false for :enabled\n   */\n\n\n  function createDisabledPseudo(disabled) {\n    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n    return function (elem) {\n      // Only certain elements can match :enabled or :disabled\n      // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n      // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n      if ("form" in elem) {\n        // Check for inherited disabledness on relevant non-disabled elements:\n        // * listed form-associated elements in a disabled fieldset\n        //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n        //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n        // * option elements in a disabled optgroup\n        //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n        // All such elements have a "form" property.\n        if (elem.parentNode && elem.disabled === false) {\n          // Option elements defer to a parent optgroup if present\n          if ("label" in elem) {\n            if ("label" in elem.parentNode) {\n              return elem.parentNode.disabled === disabled;\n            } else {\n              return elem.disabled === disabled;\n            }\n          } // Support: IE 6 - 11\n          // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n          return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n          /* jshint -W018 */\n          elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n        }\n\n        return elem.disabled === disabled; // Try to winnow out elements that can\'t be disabled before trusting the disabled property.\n        // Some victims get caught in our net (label, legend, menu, track), but it shouldn\'t\n        // even exist on them, let alone have a boolean value.\n      } else if ("label" in elem) {\n        return elem.disabled === disabled;\n      } // Remaining elements are neither :enabled nor :disabled\n\n\n      return false;\n    };\n  }\n  /**\n   * Returns a function to use in pseudos for positionals\n   * @param {Function} fn\n   */\n\n\n  function createPositionalPseudo(fn) {\n    return markFunction(function (argument) {\n      argument = +argument;\n      return markFunction(function (seed, matches) {\n        var j,\n            matchIndexes = fn([], seed.length, argument),\n            i = matchIndexes.length; // Match elements found at the specified indexes\n\n        while (i--) {\n          if (seed[j = matchIndexes[i]]) {\n            seed[j] = !(matches[j] = seed[j]);\n          }\n        }\n      });\n    });\n  }\n  /**\n   * Checks a node for validity as a Sizzle context\n   * @param {Element|Object=} context\n   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n   */\n\n\n  function testContext(context) {\n    return context && typeof context.getElementsByTagName !== "undefined" && context;\n  } // Expose support vars for convenience\n\n\n  support = Sizzle.support = {};\n  /**\n   * Detects XML nodes\n   * @param {Element|Object} elem An element or a document\n   * @returns {Boolean} True iff elem is a non-HTML XML node\n   */\n\n  isXML = Sizzle.isXML = function (elem) {\n    var namespace = elem.namespaceURI,\n        docElem = (elem.ownerDocument || elem).documentElement; // Support: IE <=8\n    // Assume HTML when documentElement doesn\'t yet exist, such as inside loading iframes\n    // https://bugs.jquery.com/ticket/4833\n\n    return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");\n  };\n  /**\n   * Sets document-related variables once based on the current document\n   * @param {Element|Object} [doc] An element or document object to use to set the document\n   * @returns {Object} Returns the current document\n   */\n\n\n  setDocument = Sizzle.setDocument = function (node) {\n    var hasCompare,\n        subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n\n    if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n      return document;\n    } // Update global variables\n\n\n    document = doc;\n    docElem = document.documentElement;\n    documentIsHTML = !isXML(document); // Support: IE 9-11, Edge\n    // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)\n\n    if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n      // Support: IE 11, Edge\n      if (subWindow.addEventListener) {\n        subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only\n      } else if (subWindow.attachEvent) {\n        subWindow.attachEvent("onunload", unloadHandler);\n      }\n    }\n    /* Attributes\n    ---------------------------------------------------------------------- */\n    // Support: IE<8\n    // Verify that getAttribute really returns attributes and not properties\n    // (excepting IE8 booleans)\n\n\n    support.attributes = assert(function (el) {\n      el.className = "i";\n      return !el.getAttribute("className");\n    });\n    /* getElement(s)By*\n    ---------------------------------------------------------------------- */\n    // Check if getElementsByTagName("*") returns only elements\n\n    support.getElementsByTagName = assert(function (el) {\n      el.appendChild(document.createComment(""));\n      return !el.getElementsByTagName("*").length;\n    }); // Support: IE<9\n\n    support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n    // Check if getElementById returns elements by name\n    // The broken getElementById methods don\'t pick up programmatically-set names,\n    // so use a roundabout getElementsByName test\n\n    support.getById = assert(function (el) {\n      docElem.appendChild(el).id = expando;\n      return !document.getElementsByName || !document.getElementsByName(expando).length;\n    }); // ID filter and find\n\n    if (support.getById) {\n      Expr.filter["ID"] = function (id) {\n        var attrId = id.replace(runescape, funescape);\n        return function (elem) {\n          return elem.getAttribute("id") === attrId;\n        };\n      };\n\n      Expr.find["ID"] = function (id, context) {\n        if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n          var elem = context.getElementById(id);\n          return elem ? [elem] : [];\n        }\n      };\n    } else {\n      Expr.filter["ID"] = function (id) {\n        var attrId = id.replace(runescape, funescape);\n        return function (elem) {\n          var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");\n          return node && node.value === attrId;\n        };\n      }; // Support: IE 6 - 7 only\n      // getElementById is not reliable as a find shortcut\n\n\n      Expr.find["ID"] = function (id, context) {\n        if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n          var node,\n              i,\n              elems,\n              elem = context.getElementById(id);\n\n          if (elem) {\n            // Verify the id attribute\n            node = elem.getAttributeNode("id");\n\n            if (node && node.value === id) {\n              return [elem];\n            } // Fall back on getElementsByName\n\n\n            elems = context.getElementsByName(id);\n            i = 0;\n\n            while (elem = elems[i++]) {\n              node = elem.getAttributeNode("id");\n\n              if (node && node.value === id) {\n                return [elem];\n              }\n            }\n          }\n\n          return [];\n        }\n      };\n    } // Tag\n\n\n    Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {\n      if (typeof context.getElementsByTagName !== "undefined") {\n        return context.getElementsByTagName(tag); // DocumentFragment nodes don\'t have gEBTN\n      } else if (support.qsa) {\n        return context.querySelectorAll(tag);\n      }\n    } : function (tag, context) {\n      var elem,\n          tmp = [],\n          i = 0,\n          // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n      results = context.getElementsByTagName(tag); // Filter out possible comments\n\n      if (tag === "*") {\n        while (elem = results[i++]) {\n          if (elem.nodeType === 1) {\n            tmp.push(elem);\n          }\n        }\n\n        return tmp;\n      }\n\n      return results;\n    }; // Class\n\n    Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {\n      if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {\n        return context.getElementsByClassName(className);\n      }\n    };\n    /* QSA/matchesSelector\n    ---------------------------------------------------------------------- */\n    // QSA and matchesSelector support\n    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n    rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n    // We allow this because of a bug in IE8/9 that throws an error\n    // whenever `document.activeElement` is accessed on an iframe\n    // So, we allow :focus to pass through QSA all the time to avoid the IE error\n    // See https://bugs.jquery.com/ticket/13378\n\n    rbuggyQSA = [];\n\n    if (support.qsa = rnative.test(document.querySelectorAll)) {\n      // Build QSA regex\n      // Regex strategy adopted from Diego Perini\n      assert(function (el) {\n        // Select is set to empty string on purpose\n        // This is to test IE\'s treatment of not explicitly\n        // setting a boolean content attribute,\n        // since its presence should be enough\n        // https://bugs.jquery.com/ticket/12359\n        docElem.appendChild(el).innerHTML = "<a id=\'" + expando + "\'></a>" + "<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" + "<option selected=\'\'></option></select>"; // Support: IE8, Opera 11-12.16\n        // Nothing should be selected when empty strings follow ^= or $= or *=\n        // The test attribute must be unknown in Opera but "safe" for WinRT\n        // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n        if (el.querySelectorAll("[msallowcapture^=\'\']").length) {\n          rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\'\'|\\"\\")");\n        } // Support: IE8\n        // Boolean attributes and "value" are not treated correctly\n\n\n        if (!el.querySelectorAll("[selected]").length) {\n          rbuggyQSA.push("\\\\[" + whitespace + "*(?:value|" + booleans + ")");\n        } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {\n          rbuggyQSA.push("~=");\n        } // Webkit/Opera - :checked should return selected option elements\n        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n        // IE8 throws error here and will not see later tests\n\n\n        if (!el.querySelectorAll(":checked").length) {\n          rbuggyQSA.push(":checked");\n        } // Support: Safari 8+, iOS 8+\n        // https://bugs.webkit.org/show_bug.cgi?id=136851\n        // In-page `selector#id sibling-combinator selector` fails\n\n\n        if (!el.querySelectorAll("a#" + expando + "+*").length) {\n          rbuggyQSA.push(".#.+[+~]");\n        }\n      });\n      assert(function (el) {\n        el.innerHTML = "<a href=\'\' disabled=\'disabled\'></a>" + "<select disabled=\'disabled\'><option/></select>"; // Support: Windows 8 Native Apps\n        // The type and name attributes are restricted during .innerHTML assignment\n\n        var input = document.createElement("input");\n        input.setAttribute("type", "hidden");\n        el.appendChild(input).setAttribute("name", "D"); // Support: IE8\n        // Enforce case-sensitivity of name attribute\n\n        if (el.querySelectorAll("[name=d]").length) {\n          rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");\n        } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n        // IE8 throws error here and will not see later tests\n\n\n        if (el.querySelectorAll(":enabled").length !== 2) {\n          rbuggyQSA.push(":enabled", ":disabled");\n        } // Support: IE9-11+\n        // IE\'s :disabled selector does not pick up the children of disabled fieldsets\n\n\n        docElem.appendChild(el).disabled = true;\n\n        if (el.querySelectorAll(":disabled").length !== 2) {\n          rbuggyQSA.push(":enabled", ":disabled");\n        } // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n        el.querySelectorAll("*,:x");\n        rbuggyQSA.push(",.*:");\n      });\n    }\n\n    if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n      assert(function (el) {\n        // Check to see if it\'s possible to do matchesSelector\n        // on a disconnected node (IE 9)\n        support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception\n        // Gecko does not error, returns false instead\n\n        matches.call(el, "[s!=\'\']:x");\n        rbuggyMatches.push("!=", pseudos);\n      });\n    }\n\n    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));\n    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));\n    /* Contains\n    ---------------------------------------------------------------------- */\n\n    hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n    // Purposefully self-exclusive\n    // As in, an element does not contain itself\n\n    contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n      var adown = a.nodeType === 9 ? a.documentElement : a,\n          bup = b && b.parentNode;\n      return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n    } : function (a, b) {\n      if (b) {\n        while (b = b.parentNode) {\n          if (b === a) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n    /* Sorting\n    ---------------------------------------------------------------------- */\n    // Document order sorting\n\n    sortOrder = hasCompare ? function (a, b) {\n      // Flag for duplicate removal\n      if (a === b) {\n        hasDuplicate = true;\n        return 0;\n      } // Sort on method existence if only one input has compareDocumentPosition\n\n\n      var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n      if (compare) {\n        return compare;\n      } // Calculate position if both inputs belong to the same document\n\n\n      compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n      1; // Disconnected nodes\n\n      if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n        // Choose the first element that is related to our preferred document\n        if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n          return -1;\n        }\n\n        if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n          return 1;\n        } // Maintain original order\n\n\n        return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n      }\n\n      return compare & 4 ? -1 : 1;\n    } : function (a, b) {\n      // Exit early if the nodes are identical\n      if (a === b) {\n        hasDuplicate = true;\n        return 0;\n      }\n\n      var cur,\n          i = 0,\n          aup = a.parentNode,\n          bup = b.parentNode,\n          ap = [a],\n          bp = [b]; // Parentless nodes are either documents or disconnected\n\n      if (!aup || !bup) {\n        return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n      } else if (aup === bup) {\n        return siblingCheck(a, b);\n      } // Otherwise we need full lists of their ancestors for comparison\n\n\n      cur = a;\n\n      while (cur = cur.parentNode) {\n        ap.unshift(cur);\n      }\n\n      cur = b;\n\n      while (cur = cur.parentNode) {\n        bp.unshift(cur);\n      } // Walk down the tree looking for a discrepancy\n\n\n      while (ap[i] === bp[i]) {\n        i++;\n      }\n\n      return i ? // Do a sibling check if the nodes have a common ancestor\n      siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n      ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n    };\n    return document;\n  };\n\n  Sizzle.matches = function (expr, elements) {\n    return Sizzle(expr, null, null, elements);\n  };\n\n  Sizzle.matchesSelector = function (elem, expr) {\n    // Set document vars if needed\n    if ((elem.ownerDocument || elem) !== document) {\n      setDocument(elem);\n    }\n\n    if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n      try {\n        var ret = matches.call(elem, expr); // IE 9\'s matchesSelector returns false on disconnected nodes\n\n        if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n        // fragment in IE 9\n        elem.document && elem.document.nodeType !== 11) {\n          return ret;\n        }\n      } catch (e) {\n        nonnativeSelectorCache(expr, true);\n      }\n    }\n\n    return Sizzle(expr, document, null, [elem]).length > 0;\n  };\n\n  Sizzle.contains = function (context, elem) {\n    // Set document vars if needed\n    if ((context.ownerDocument || context) !== document) {\n      setDocument(context);\n    }\n\n    return contains(context, elem);\n  };\n\n  Sizzle.attr = function (elem, name) {\n    // Set document vars if needed\n    if ((elem.ownerDocument || elem) !== document) {\n      setDocument(elem);\n    }\n\n    var fn = Expr.attrHandle[name.toLowerCase()],\n        // Don\'t get fooled by Object.prototype properties (jQuery #13807)\n    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n    return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n  };\n\n  Sizzle.escape = function (sel) {\n    return (sel + "").replace(rcssescape, fcssescape);\n  };\n\n  Sizzle.error = function (msg) {\n    throw new Error("Syntax error, unrecognized expression: " + msg);\n  };\n  /**\n   * Document sorting and removing duplicates\n   * @param {ArrayLike} results\n   */\n\n\n  Sizzle.uniqueSort = function (results) {\n    var elem,\n        duplicates = [],\n        j = 0,\n        i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n    hasDuplicate = !support.detectDuplicates;\n    sortInput = !support.sortStable && results.slice(0);\n    results.sort(sortOrder);\n\n    if (hasDuplicate) {\n      while (elem = results[i++]) {\n        if (elem === results[i]) {\n          j = duplicates.push(i);\n        }\n      }\n\n      while (j--) {\n        results.splice(duplicates[j], 1);\n      }\n    } // Clear input after sorting to release objects\n    // See https://github.com/jquery/sizzle/pull/225\n\n\n    sortInput = null;\n    return results;\n  };\n  /**\n   * Utility function for retrieving the text value of an array of DOM nodes\n   * @param {Array|Element} elem\n   */\n\n\n  getText = Sizzle.getText = function (elem) {\n    var node,\n        ret = "",\n        i = 0,\n        nodeType = elem.nodeType;\n\n    if (!nodeType) {\n      // If no nodeType, this is expected to be an array\n      while (node = elem[i++]) {\n        // Do not traverse comment nodes\n        ret += getText(node);\n      }\n    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n      // Use textContent for elements\n      // innerText usage removed for consistency of new lines (jQuery #11153)\n      if (typeof elem.textContent === "string") {\n        return elem.textContent;\n      } else {\n        // Traverse its children\n        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n          ret += getText(elem);\n        }\n      }\n    } else if (nodeType === 3 || nodeType === 4) {\n      return elem.nodeValue;\n    } // Do not include comment or processing instruction nodes\n\n\n    return ret;\n  };\n\n  Expr = Sizzle.selectors = {\n    // Can be adjusted by the user\n    cacheLength: 50,\n    createPseudo: markFunction,\n    match: matchExpr,\n    attrHandle: {},\n    find: {},\n    relative: {\n      ">": {\n        dir: "parentNode",\n        first: true\n      },\n      " ": {\n        dir: "parentNode"\n      },\n      "+": {\n        dir: "previousSibling",\n        first: true\n      },\n      "~": {\n        dir: "previousSibling"\n      }\n    },\n    preFilter: {\n      "ATTR": function (match) {\n        match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);\n\n        if (match[2] === "~=") {\n          match[3] = " " + match[3] + " ";\n        }\n\n        return match.slice(0, 4);\n      },\n      "CHILD": function (match) {\n        /* matches from matchExpr["CHILD"]\n        \t1 type (only|nth|...)\n        \t2 what (child|of-type)\n        \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n        \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n        \t5 sign of xn-component\n        \t6 x of xn-component\n        \t7 sign of y-component\n        \t8 y of y-component\n        */\n        match[1] = match[1].toLowerCase();\n\n        if (match[1].slice(0, 3) === "nth") {\n          // nth-* requires argument\n          if (!match[3]) {\n            Sizzle.error(match[0]);\n          } // numeric x and y parameters for Expr.filter.CHILD\n          // remember that false/true cast respectively to 0/1\n\n\n          match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));\n          match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments\n        } else if (match[3]) {\n          Sizzle.error(match[0]);\n        }\n\n        return match;\n      },\n      "PSEUDO": function (match) {\n        var excess,\n            unquoted = !match[6] && match[2];\n\n        if (matchExpr["CHILD"].test(match[0])) {\n          return null;\n        } // Accept quoted arguments as-is\n\n\n        if (match[3]) {\n          match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments\n        } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n        excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n        excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {\n          // excess is a negative index\n          match[0] = match[0].slice(0, excess);\n          match[2] = unquoted.slice(0, excess);\n        } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n        return match.slice(0, 3);\n      }\n    },\n    filter: {\n      "TAG": function (nodeNameSelector) {\n        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n        return nodeNameSelector === "*" ? function () {\n          return true;\n        } : function (elem) {\n          return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n        };\n      },\n      "CLASS": function (className) {\n        var pattern = classCache[className + " "];\n        return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {\n          return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");\n        });\n      },\n      "ATTR": function (name, operator, check) {\n        return function (elem) {\n          var result = Sizzle.attr(elem, name);\n\n          if (result == null) {\n            return operator === "!=";\n          }\n\n          if (!operator) {\n            return true;\n          }\n\n          result += "";\n          return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;\n        };\n      },\n      "CHILD": function (type, what, argument, first, last) {\n        var simple = type.slice(0, 3) !== "nth",\n            forward = type.slice(-4) !== "last",\n            ofType = what === "of-type";\n        return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n        function (elem) {\n          return !!elem.parentNode;\n        } : function (elem, context, xml) {\n          var cache,\n              uniqueCache,\n              outerCache,\n              node,\n              nodeIndex,\n              start,\n              dir = simple !== forward ? "nextSibling" : "previousSibling",\n              parent = elem.parentNode,\n              name = ofType && elem.nodeName.toLowerCase(),\n              useCache = !xml && !ofType,\n              diff = false;\n\n          if (parent) {\n            // :(first|last|only)-(child|of-type)\n            if (simple) {\n              while (dir) {\n                node = elem;\n\n                while (node = node[dir]) {\n                  if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                    return false;\n                  }\n                } // Reverse direction for :only-* (if we haven\'t yet done so)\n\n\n                start = dir = type === "only" && !start && "nextSibling";\n              }\n\n              return true;\n            }\n\n            start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n            if (forward && useCache) {\n              // Seek `elem` from a previously-cached index\n              // ...in a gzip-friendly way\n              node = parent;\n              outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n              // Defend against cloned attroperties (jQuery gh-1709)\n\n              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n              cache = uniqueCache[type] || [];\n              nodeIndex = cache[0] === dirruns && cache[1];\n              diff = nodeIndex && cache[2];\n              node = nodeIndex && parent.childNodes[nodeIndex];\n\n              while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n              diff = nodeIndex = 0) || start.pop()) {\n                // When found, cache indexes on `parent` and break\n                if (node.nodeType === 1 && ++diff && node === elem) {\n                  uniqueCache[type] = [dirruns, nodeIndex, diff];\n                  break;\n                }\n              }\n            } else {\n              // Use previously-cached element index if available\n              if (useCache) {\n                // ...in a gzip-friendly way\n                node = elem;\n                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                cache = uniqueCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex;\n              } // xml :nth-child(...)\n              // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n              if (diff === false) {\n                // Use the same loop as above to seek `elem` from the start\n                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                    // Cache the index of each encountered element\n                    if (useCache) {\n                      outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                      // Defend against cloned attroperties (jQuery gh-1709)\n\n                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                      uniqueCache[type] = [dirruns, diff];\n                    }\n\n                    if (node === elem) {\n                      break;\n                    }\n                  }\n                }\n              }\n            } // Incorporate the offset, then check against cycle size\n\n\n            diff -= last;\n            return diff === first || diff % first === 0 && diff / first >= 0;\n          }\n        };\n      },\n      "PSEUDO": function (pseudo, argument) {\n        // pseudo-class names are case-insensitive\n        // http://www.w3.org/TR/selectors/#pseudo-classes\n        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n        // Remember that setFilters inherits from pseudos\n        var args,\n            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that\n        // arguments are needed to create the filter function\n        // just as Sizzle does\n\n        if (fn[expando]) {\n          return fn(argument);\n        } // But maintain support for old signatures\n\n\n        if (fn.length > 1) {\n          args = [pseudo, pseudo, "", argument];\n          return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n            var idx,\n                matched = fn(seed, argument),\n                i = matched.length;\n\n            while (i--) {\n              idx = indexOf(seed, matched[i]);\n              seed[idx] = !(matches[idx] = matched[i]);\n            }\n          }) : function (elem) {\n            return fn(elem, 0, args);\n          };\n        }\n\n        return fn;\n      }\n    },\n    pseudos: {\n      // Potentially complex pseudos\n      "not": markFunction(function (selector) {\n        // Trim the selector passed to compile\n        // to avoid treating leading and trailing\n        // spaces as combinators\n        var input = [],\n            results = [],\n            matcher = compile(selector.replace(rtrim, "$1"));\n        return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n          var elem,\n              unmatched = matcher(seed, null, xml, []),\n              i = seed.length; // Match elements unmatched by `matcher`\n\n          while (i--) {\n            if (elem = unmatched[i]) {\n              seed[i] = !(matches[i] = elem);\n            }\n          }\n        }) : function (elem, context, xml) {\n          input[0] = elem;\n          matcher(input, null, xml, results); // Don\'t keep the element (issue #299)\n\n          input[0] = null;\n          return !results.pop();\n        };\n      }),\n      "has": markFunction(function (selector) {\n        return function (elem) {\n          return Sizzle(selector, elem).length > 0;\n        };\n      }),\n      "contains": markFunction(function (text) {\n        text = text.replace(runescape, funescape);\n        return function (elem) {\n          return (elem.textContent || getText(elem)).indexOf(text) > -1;\n        };\n      }),\n      // "Whether an element is represented by a :lang() selector\n      // is based solely on the element\'s language value\n      // being equal to the identifier C,\n      // or beginning with the identifier C immediately followed by "-".\n      // The matching of C against the element\'s language value is performed case-insensitively.\n      // The identifier C does not have to be a valid language name."\n      // http://www.w3.org/TR/selectors/#lang-pseudo\n      "lang": markFunction(function (lang) {\n        // lang value must be a valid identifier\n        if (!ridentifier.test(lang || "")) {\n          Sizzle.error("unsupported lang: " + lang);\n        }\n\n        lang = lang.replace(runescape, funescape).toLowerCase();\n        return function (elem) {\n          var elemLang;\n\n          do {\n            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {\n              elemLang = elemLang.toLowerCase();\n              return elemLang === lang || elemLang.indexOf(lang + "-") === 0;\n            }\n          } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n          return false;\n        };\n      }),\n      // Miscellaneous\n      "target": function (elem) {\n        var hash = window.location && window.location.hash;\n        return hash && hash.slice(1) === elem.id;\n      },\n      "root": function (elem) {\n        return elem === docElem;\n      },\n      "focus": function (elem) {\n        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n      },\n      // Boolean properties\n      "enabled": createDisabledPseudo(false),\n      "disabled": createDisabledPseudo(true),\n      "checked": function (elem) {\n        // In CSS3, :checked should return both checked and selected elements\n        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n        var nodeName = elem.nodeName.toLowerCase();\n        return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;\n      },\n      "selected": function (elem) {\n        // Accessing this property makes selected-by-default\n        // options in Safari work properly\n        if (elem.parentNode) {\n          elem.parentNode.selectedIndex;\n        }\n\n        return elem.selected === true;\n      },\n      // Contents\n      "empty": function (elem) {\n        // http://www.w3.org/TR/selectors/#empty-pseudo\n        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n        //   but not by others (comment: 8; processing instruction: 7; etc.)\n        // nodeType < 6 works because attributes (2) do not appear as children\n        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n          if (elem.nodeType < 6) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n      "parent": function (elem) {\n        return !Expr.pseudos["empty"](elem);\n      },\n      // Element/input types\n      "header": function (elem) {\n        return rheader.test(elem.nodeName);\n      },\n      "input": function (elem) {\n        return rinputs.test(elem.nodeName);\n      },\n      "button": function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === "input" && elem.type === "button" || name === "button";\n      },\n      "text": function (elem) {\n        var attr;\n        return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8\n        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"\n        (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");\n      },\n      // Position-in-collection\n      "first": createPositionalPseudo(function () {\n        return [0];\n      }),\n      "last": createPositionalPseudo(function (matchIndexes, length) {\n        return [length - 1];\n      }),\n      "eq": createPositionalPseudo(function (matchIndexes, length, argument) {\n        return [argument < 0 ? argument + length : argument];\n      }),\n      "even": createPositionalPseudo(function (matchIndexes, length) {\n        var i = 0;\n\n        for (; i < length; i += 2) {\n          matchIndexes.push(i);\n        }\n\n        return matchIndexes;\n      }),\n      "odd": createPositionalPseudo(function (matchIndexes, length) {\n        var i = 1;\n\n        for (; i < length; i += 2) {\n          matchIndexes.push(i);\n        }\n\n        return matchIndexes;\n      }),\n      "lt": createPositionalPseudo(function (matchIndexes, length, argument) {\n        var i = argument < 0 ? argument + length : argument > length ? length : argument;\n\n        for (; --i >= 0;) {\n          matchIndexes.push(i);\n        }\n\n        return matchIndexes;\n      }),\n      "gt": createPositionalPseudo(function (matchIndexes, length, argument) {\n        var i = argument < 0 ? argument + length : argument;\n\n        for (; ++i < length;) {\n          matchIndexes.push(i);\n        }\n\n        return matchIndexes;\n      })\n    }\n  };\n  Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos\n\n  for (i in {\n    radio: true,\n    checkbox: true,\n    file: true,\n    password: true,\n    image: true\n  }) {\n    Expr.pseudos[i] = createInputPseudo(i);\n  }\n\n  for (i in {\n    submit: true,\n    reset: true\n  }) {\n    Expr.pseudos[i] = createButtonPseudo(i);\n  } // Easy API for creating new setFilters\n\n\n  function setFilters() {}\n\n  setFilters.prototype = Expr.filters = Expr.pseudos;\n  Expr.setFilters = new setFilters();\n\n  tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n    var matched,\n        match,\n        tokens,\n        type,\n        soFar,\n        groups,\n        preFilters,\n        cached = tokenCache[selector + " "];\n\n    if (cached) {\n      return parseOnly ? 0 : cached.slice(0);\n    }\n\n    soFar = selector;\n    groups = [];\n    preFilters = Expr.preFilter;\n\n    while (soFar) {\n      // Comma and first run\n      if (!matched || (match = rcomma.exec(soFar))) {\n        if (match) {\n          // Don\'t consume trailing commas as valid\n          soFar = soFar.slice(match[0].length) || soFar;\n        }\n\n        groups.push(tokens = []);\n      }\n\n      matched = false; // Combinators\n\n      if (match = rcombinators.exec(soFar)) {\n        matched = match.shift();\n        tokens.push({\n          value: matched,\n          // Cast descendant combinators to space\n          type: match[0].replace(rtrim, " ")\n        });\n        soFar = soFar.slice(matched.length);\n      } // Filters\n\n\n      for (type in Expr.filter) {\n        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            type: type,\n            matches: match\n          });\n          soFar = soFar.slice(matched.length);\n        }\n      }\n\n      if (!matched) {\n        break;\n      }\n    } // Return the length of the invalid excess\n    // if we\'re just parsing\n    // Otherwise, throw an error or return tokens\n\n\n    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n    tokenCache(selector, groups).slice(0);\n  };\n\n  function toSelector(tokens) {\n    var i = 0,\n        len = tokens.length,\n        selector = "";\n\n    for (; i < len; i++) {\n      selector += tokens[i].value;\n    }\n\n    return selector;\n  }\n\n  function addCombinator(matcher, combinator, base) {\n    var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === "parentNode",\n        doneName = done++;\n    return combinator.first ? // Check against closest ancestor/preceding element\n    function (elem, context, xml) {\n      while (elem = elem[dir]) {\n        if (elem.nodeType === 1 || checkNonElements) {\n          return matcher(elem, context, xml);\n        }\n      }\n\n      return false;\n    } : // Check against all ancestor/preceding elements\n    function (elem, context, xml) {\n      var oldCache,\n          uniqueCache,\n          outerCache,\n          newCache = [dirruns, doneName]; // We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n\n      if (xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            if (matcher(elem, context, xml)) {\n              return true;\n            }\n          }\n        }\n      } else {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n            // Defend against cloned attroperties (jQuery gh-1709)\n\n            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n            if (skip && skip === elem.nodeName.toLowerCase()) {\n              elem = elem[dir] || elem;\n            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n              // Assign to newCache so results back-propagate to previous elements\n              return newCache[2] = oldCache[2];\n            } else {\n              // Reuse newcache so results back-propagate to previous elements\n              uniqueCache[key] = newCache; // A match means we\'re done; a fail means we have to keep checking\n\n              if (newCache[2] = matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      return false;\n    };\n  }\n\n  function elementMatcher(matchers) {\n    return matchers.length > 1 ? function (elem, context, xml) {\n      var i = matchers.length;\n\n      while (i--) {\n        if (!matchers[i](elem, context, xml)) {\n          return false;\n        }\n      }\n\n      return true;\n    } : matchers[0];\n  }\n\n  function multipleContexts(selector, contexts, results) {\n    var i = 0,\n        len = contexts.length;\n\n    for (; i < len; i++) {\n      Sizzle(selector, contexts[i], results);\n    }\n\n    return results;\n  }\n\n  function condense(unmatched, map, filter, context, xml) {\n    var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n\n    for (; i < len; i++) {\n      if (elem = unmatched[i]) {\n        if (!filter || filter(elem, context, xml)) {\n          newUnmatched.push(elem);\n\n          if (mapped) {\n            map.push(i);\n          }\n        }\n      }\n    }\n\n    return newUnmatched;\n  }\n\n  function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n    if (postFilter && !postFilter[expando]) {\n      postFilter = setMatcher(postFilter);\n    }\n\n    if (postFinder && !postFinder[expando]) {\n      postFinder = setMatcher(postFinder, postSelector);\n    }\n\n    return markFunction(function (seed, results, context, xml) {\n      var temp,\n          i,\n          elem,\n          preMap = [],\n          postMap = [],\n          preexisting = results.length,\n          // Get initial elements from seed or context\n      elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),\n          // Prefilter to get matcher input, preserving a map for seed-results synchronization\n      matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n          matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n      postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n      [] : // ...otherwise use results directly\n      results : matcherIn; // Find primary matches\n\n      if (matcher) {\n        matcher(matcherIn, matcherOut, context, xml);\n      } // Apply postFilter\n\n\n      if (postFilter) {\n        temp = condense(matcherOut, postMap);\n        postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n        i = temp.length;\n\n        while (i--) {\n          if (elem = temp[i]) {\n            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n          }\n        }\n      }\n\n      if (seed) {\n        if (postFinder || preFilter) {\n          if (postFinder) {\n            // Get the final matcherOut by condensing this intermediate into postFinder contexts\n            temp = [];\n            i = matcherOut.length;\n\n            while (i--) {\n              if (elem = matcherOut[i]) {\n                // Restore matcherIn since elem is not yet a final match\n                temp.push(matcherIn[i] = elem);\n              }\n            }\n\n            postFinder(null, matcherOut = [], temp, xml);\n          } // Move matched elements from seed to results to keep them synchronized\n\n\n          i = matcherOut.length;\n\n          while (i--) {\n            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n              seed[temp] = !(results[temp] = elem);\n            }\n          }\n        } // Add elements to results, through postFinder if defined\n\n      } else {\n        matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n        if (postFinder) {\n          postFinder(null, results, matcherOut, xml);\n        } else {\n          push.apply(results, matcherOut);\n        }\n      }\n    });\n  }\n\n  function matcherFromTokens(tokens) {\n    var checkContext,\n        matcher,\n        j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[tokens[0].type],\n        implicitRelative = leadingRelative || Expr.relative[" "],\n        i = leadingRelative ? 1 : 0,\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n    matchContext = addCombinator(function (elem) {\n      return elem === checkContext;\n    }, implicitRelative, true),\n        matchAnyContext = addCombinator(function (elem) {\n      return indexOf(checkContext, elem) > -1;\n    }, implicitRelative, true),\n        matchers = [function (elem, context, xml) {\n      var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n      checkContext = null;\n      return ret;\n    }];\n\n    for (; i < len; i++) {\n      if (matcher = Expr.relative[tokens[i].type]) {\n        matchers = [addCombinator(elementMatcher(matchers), matcher)];\n      } else {\n        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n        if (matcher[expando]) {\n          // Find the next relative operator (if any) for proper handling\n          j = ++i;\n\n          for (; j < len; j++) {\n            if (Expr.relative[tokens[j].type]) {\n              break;\n            }\n          }\n\n          return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n          tokens.slice(0, i - 1).concat({\n            value: tokens[i - 2].type === " " ? "*" : ""\n          })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n        }\n\n        matchers.push(matcher);\n      }\n    }\n\n    return elementMatcher(matchers);\n  }\n\n  function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n    var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function (seed, context, xml, results, outermost) {\n      var elem,\n          j,\n          matcher,\n          matchedCount = 0,\n          i = "0",\n          unmatched = seed && [],\n          setMatched = [],\n          contextBackup = outermostContext,\n          // We must always have either seed elements or outermost context\n      elems = seed || byElement && Expr.find["TAG"]("*", outermost),\n          // Use integer dirruns iff this is the outermost matcher\n      dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n          len = elems.length;\n\n      if (outermost) {\n        outermostContext = context === document || context || outermost;\n      } // Add elements passing elementMatchers directly to results\n      // Support: IE<9, Safari\n      // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id\n\n\n      for (; i !== len && (elem = elems[i]) != null; i++) {\n        if (byElement && elem) {\n          j = 0;\n\n          if (!context && elem.ownerDocument !== document) {\n            setDocument(elem);\n            xml = !documentIsHTML;\n          }\n\n          while (matcher = elementMatchers[j++]) {\n            if (matcher(elem, context || document, xml)) {\n              results.push(elem);\n              break;\n            }\n          }\n\n          if (outermost) {\n            dirruns = dirrunsUnique;\n          }\n        } // Track unmatched elements for set filters\n\n\n        if (bySet) {\n          // They will have gone through all possible matchers\n          if (elem = !matcher && elem) {\n            matchedCount--;\n          } // Lengthen the array for every element, matched or not\n\n\n          if (seed) {\n            unmatched.push(elem);\n          }\n        }\n      } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n      // makes the latter nonnegative.\n\n\n      matchedCount += i; // Apply set filters to unmatched elements\n      // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n      // equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n      // no element matchers and no seed.\n      // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n      // case, which will result in a "00" `matchedCount` that differs from `i` but is also\n      // numerically zero.\n\n      if (bySet && i !== matchedCount) {\n        j = 0;\n\n        while (matcher = setMatchers[j++]) {\n          matcher(unmatched, setMatched, context, xml);\n        }\n\n        if (seed) {\n          // Reintegrate element matches to eliminate the need for sorting\n          if (matchedCount > 0) {\n            while (i--) {\n              if (!(unmatched[i] || setMatched[i])) {\n                setMatched[i] = pop.call(results);\n              }\n            }\n          } // Discard index placeholder values to get only actual matches\n\n\n          setMatched = condense(setMatched);\n        } // Add matches to results\n\n\n        push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n          Sizzle.uniqueSort(results);\n        }\n      } // Override manipulation of globals by nested matchers\n\n\n      if (outermost) {\n        dirruns = dirrunsUnique;\n        outermostContext = contextBackup;\n      }\n\n      return unmatched;\n    };\n\n    return bySet ? markFunction(superMatcher) : superMatcher;\n  }\n\n  compile = Sizzle.compile = function (selector, match\n  /* Internal Use Only */\n  ) {\n    var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[selector + " "];\n\n    if (!cached) {\n      // Generate a function of recursive functions that can be used to check each element\n      if (!match) {\n        match = tokenize(selector);\n      }\n\n      i = match.length;\n\n      while (i--) {\n        cached = matcherFromTokens(match[i]);\n\n        if (cached[expando]) {\n          setMatchers.push(cached);\n        } else {\n          elementMatchers.push(cached);\n        }\n      } // Cache the compiled function\n\n\n      cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n      cached.selector = selector;\n    }\n\n    return cached;\n  };\n  /**\n   * A low-level selection function that works with Sizzle\'s compiled\n   *  selector functions\n   * @param {String|Function} selector A selector or a pre-compiled\n   *  selector function built with Sizzle.compile\n   * @param {Element} context\n   * @param {Array} [results]\n   * @param {Array} [seed] A set of elements to match against\n   */\n\n\n  select = Sizzle.select = function (selector, context, results, seed) {\n    var i,\n        tokens,\n        token,\n        type,\n        find,\n        compiled = typeof selector === "function" && selector,\n        match = !seed && tokenize(selector = compiled.selector || selector);\n    results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n    // (the latter of which guarantees us context)\n\n    if (match.length === 1) {\n      // Reduce context if the leading compound selector is an ID\n      tokens = match[0] = match[0].slice(0);\n\n      if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n        if (!context) {\n          return results; // Precompiled matchers will still verify ancestry, so step up a level\n        } else if (compiled) {\n          context = context.parentNode;\n        }\n\n        selector = selector.slice(tokens.shift().value.length);\n      } // Fetch a seed set for right-to-left matching\n\n\n      i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;\n\n      while (i--) {\n        token = tokens[i]; // Abort if we hit a combinator\n\n        if (Expr.relative[type = token.type]) {\n          break;\n        }\n\n        if (find = Expr.find[type]) {\n          // Search, expanding context for leading sibling combinators\n          if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n            // If seed is empty or no tokens remain, we can return early\n            tokens.splice(i, 1);\n            selector = seed.length && toSelector(tokens);\n\n            if (!selector) {\n              push.apply(results, seed);\n              return results;\n            }\n\n            break;\n          }\n        }\n      }\n    } // Compile and execute a filtering function if one is not provided\n    // Provide `match` to avoid retokenization if we modified the selector above\n\n\n    (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n    return results;\n  }; // One-time assignments\n  // Sort stability\n\n\n  support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+\n  // Always assume duplicates if they aren\'t passed to the comparison function\n\n  support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n  setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n  // Detached nodes confoundingly follow *each other*\n\n  support.sortDetached = assert(function (el) {\n    // Should return 1, but returns 4 (following)\n    return el.compareDocumentPosition(document.createElement("fieldset")) & 1;\n  }); // Support: IE<8\n  // Prevent attribute/property "interpolation"\n  // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n  if (!assert(function (el) {\n    el.innerHTML = "<a href=\'#\'></a>";\n    return el.firstChild.getAttribute("href") === "#";\n  })) {\n    addHandle("type|href|height|width", function (elem, name, isXML) {\n      if (!isXML) {\n        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);\n      }\n    });\n  } // Support: IE<9\n  // Use defaultValue in place of getAttribute("value")\n\n\n  if (!support.attributes || !assert(function (el) {\n    el.innerHTML = "<input/>";\n    el.firstChild.setAttribute("value", "");\n    return el.firstChild.getAttribute("value") === "";\n  })) {\n    addHandle("value", function (elem, name, isXML) {\n      if (!isXML && elem.nodeName.toLowerCase() === "input") {\n        return elem.defaultValue;\n      }\n    });\n  } // Support: IE<9\n  // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n  if (!assert(function (el) {\n    return el.getAttribute("disabled") == null;\n  })) {\n    addHandle(booleans, function (elem, name, isXML) {\n      var val;\n\n      if (!isXML) {\n        return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n      }\n    });\n  } // EXPOSE\n\n\n  var _sizzle = window.Sizzle;\n\n  Sizzle.noConflict = function () {\n    if (window.Sizzle === Sizzle) {\n      window.Sizzle = _sizzle;\n    }\n\n    return Sizzle;\n  };\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return Sizzle;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // Sizzle requires that there be a global window in Common-JS like environments\n  } else {} // EXPOSE\n\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  return function (elem, dir, until) {\n    var matched = [],\n        truncate = until !== undefined;\n\n    while ((elem = elem[dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n\n        matched.push(elem);\n      }\n    }\n\n    return matched;\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy90cmF2ZXJzaW5nL3Zhci9kaXIuanM/MmFjNiJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJlbGVtIiwiZGlyIiwidW50aWwiLCJtYXRjaGVkIiwidHJ1bmNhdGUiLCJ1bmRlZmluZWQiLCJub2RlVHlwZSIsImlzIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sQ0FBRixtQ0FFSCxVQUFVQyxNQUFWLEVBQW1CO0FBRXRCOztBQUVBLFNBQU8sVUFBVUMsSUFBVixFQUFnQkMsR0FBaEIsRUFBcUJDLEtBQXJCLEVBQTZCO0FBQ25DLFFBQUlDLE9BQU8sR0FBRyxFQUFkO0FBQUEsUUFDQ0MsUUFBUSxHQUFHRixLQUFLLEtBQUtHLFNBRHRCOztBQUdBLFdBQVEsQ0FBRUwsSUFBSSxHQUFHQSxJQUFJLENBQUVDLEdBQUYsQ0FBYixLQUEwQkQsSUFBSSxDQUFDTSxRQUFMLEtBQWtCLENBQXBELEVBQXdEO0FBQ3ZELFVBQUtOLElBQUksQ0FBQ00sUUFBTCxLQUFrQixDQUF2QixFQUEyQjtBQUMxQixZQUFLRixRQUFRLElBQUlMLE1BQU0sQ0FBRUMsSUFBRixDQUFOLENBQWVPLEVBQWYsQ0FBbUJMLEtBQW5CLENBQWpCLEVBQThDO0FBQzdDO0FBQ0E7O0FBQ0RDLGVBQU8sQ0FBQ0ssSUFBUixDQUFjUixJQUFkO0FBQ0E7QUFDRDs7QUFDRCxXQUFPRyxPQUFQO0FBQ0EsR0FiRDtBQWVDLENBckJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi8uLi9jb3JlXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5yZXR1cm4gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return function (n, elem) {\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy90cmF2ZXJzaW5nL3Zhci9zaWJsaW5ncy5qcz9lZjk3Il0sIm5hbWVzIjpbImRlZmluZSIsIm4iLCJlbGVtIiwibWF0Y2hlZCIsIm5leHRTaWJsaW5nIiwibm9kZVR5cGUiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUVuQjs7QUFFQSxTQUFPLFVBQVVDLENBQVYsRUFBYUMsSUFBYixFQUFvQjtBQUMxQixRQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFFQSxXQUFRRixDQUFSLEVBQVdBLENBQUMsR0FBR0EsQ0FBQyxDQUFDRyxXQUFqQixFQUErQjtBQUM5QixVQUFLSCxDQUFDLENBQUNJLFFBQUYsS0FBZSxDQUFmLElBQW9CSixDQUFDLEtBQUtDLElBQS9CLEVBQXNDO0FBQ3JDQyxlQUFPLENBQUNHLElBQVIsQ0FBY0wsQ0FBZDtBQUNBO0FBQ0Q7O0FBRUQsV0FBT0UsT0FBUDtBQUNBLEdBVkQ7QUFZQyxDQWhCSztBQUFBLG9HQUFOIiwiZmlsZSI6IjgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnJldHVybiBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///82\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict"; // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n  jQuery.Deferred.exceptionHook = function (error, stack) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);\n    }\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9kZWZlcnJlZC9leGNlcHRpb25Ib29rLmpzP2EzYjciXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwicmVycm9yTmFtZXMiLCJEZWZlcnJlZCIsImV4Y2VwdGlvbkhvb2siLCJlcnJvciIsInN0YWNrIiwid2luZG93IiwiY29uc29sZSIsIndhcm4iLCJ0ZXN0IiwibmFtZSIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sQ0FBRixtQ0FHSCxVQUFVQyxNQUFWLEVBQW1CO0FBRXRCLGVBRnNCLENBSXRCO0FBQ0E7O0FBQ0EsTUFBSUMsV0FBVyxHQUFHLHdEQUFsQjs7QUFFQUQsUUFBTSxDQUFDRSxRQUFQLENBQWdCQyxhQUFoQixHQUFnQyxVQUFVQyxLQUFWLEVBQWlCQyxLQUFqQixFQUF5QjtBQUV4RDtBQUNBO0FBQ0EsUUFBS0MsTUFBTSxDQUFDQyxPQUFQLElBQWtCRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsSUFBakMsSUFBeUNKLEtBQXpDLElBQWtESCxXQUFXLENBQUNRLElBQVosQ0FBa0JMLEtBQUssQ0FBQ00sSUFBeEIsQ0FBdkQsRUFBd0Y7QUFDdkZKLFlBQU0sQ0FBQ0MsT0FBUCxDQUFlQyxJQUFmLENBQXFCLGdDQUFnQ0osS0FBSyxDQUFDTyxPQUEzRCxFQUFvRVAsS0FBSyxDQUFDQyxLQUExRSxFQUFpRkEsS0FBakY7QUFDQTtBQUNELEdBUEQ7QUFTQyxDQXBCSztBQUFBLG9HQUFOIiwiZmlsZSI6IjgzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL2RlZmVycmVkXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///83\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL3JlYWR5RXhjZXB0aW9uLmpzP2I0OGYiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwicmVhZHlFeGNlcHRpb24iLCJlcnJvciIsIndpbmRvdyIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLENBQUYsbUNBRUgsVUFBVUMsTUFBVixFQUFtQjtBQUV0Qjs7QUFFQUEsUUFBTSxDQUFDQyxjQUFQLEdBQXdCLFVBQVVDLEtBQVYsRUFBa0I7QUFDekNDLFVBQU0sQ0FBQ0MsVUFBUCxDQUFtQixZQUFXO0FBQzdCLFlBQU1GLEtBQU47QUFDQSxLQUZEO0FBR0EsR0FKRDtBQU1DLENBWks7QUFBQSxvR0FBTiIsImZpbGUiOiI4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///84\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(22), __webpack_require__(9), __webpack_require__(56)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, camelCase, dataPriv, dataUser) {\n  "use strict"; //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module\'s maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support "private" and "user" data.\n  //\t4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      rmultiDash = /[A-Z]/g;\n\n  function getData(data) {\n    if (data === "true") {\n      return true;\n    }\n\n    if (data === "false") {\n      return false;\n    }\n\n    if (data === "null") {\n      return null;\n    } // Only convert to a number if it doesn\'t change the string\n\n\n    if (data === +data + "") {\n      return +data;\n    }\n\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  }\n\n  function dataAttr(elem, key, data) {\n    var name; // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n\n    if (data === undefined && elem.nodeType === 1) {\n      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === "string") {\n        try {\n          data = getData(data);\n        } catch (e) {} // Make sure we set the data so it isn\'t changed later\n\n\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  jQuery.extend({\n    hasData: function (elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function (elem, name, data) {\n      return dataUser.access(elem, name, data);\n    },\n    removeData: function (elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function (elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function (elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function (key, value) {\n      var i,\n          name,\n          data,\n          elem = this[0],\n          attrs = elem && elem.attributes; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n\n          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {\n            i = attrs.length;\n\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n\n                if (name.indexOf("data-") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n\n            dataPriv.set(elem, "hasDataAttrs", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (typeof key === "object") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n\n      return access(this, function (value) {\n        var data; // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to "discover" the data in\n          // HTML5 custom data-* attrs\n\n\n          data = dataAttr(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // We tried really hard, but the data doesn\'t exist.\n\n\n          return;\n        } // Set the data...\n\n\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function (key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(34), __webpack_require__(35) // Delay is optional because of this dependency\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict"; // Based off of the plugin by Clint Helfers, with permission.\n  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || "fx";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n\n  return jQuery.fn.delay;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9xdWV1ZS9kZWxheS5qcz9lMWZlIl0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsImZuIiwiZGVsYXkiLCJ0aW1lIiwidHlwZSIsImZ4Iiwic3BlZWRzIiwicXVldWUiLCJuZXh0IiwiaG9va3MiLCJ0aW1lb3V0Iiwid2luZG93Iiwic2V0VGltZW91dCIsInN0b3AiLCJjbGVhclRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sRUFHUCx1QkFITyxDQUdNO0FBSE4sQ0FBRixtQ0FJSCxVQUFVQyxNQUFWLEVBQW1CO0FBRXRCLGVBRnNCLENBSXRCO0FBQ0E7O0FBQ0FBLFFBQU0sQ0FBQ0MsRUFBUCxDQUFVQyxLQUFWLEdBQWtCLFVBQVVDLElBQVYsRUFBZ0JDLElBQWhCLEVBQXVCO0FBQ3hDRCxRQUFJLEdBQUdILE1BQU0sQ0FBQ0ssRUFBUCxHQUFZTCxNQUFNLENBQUNLLEVBQVAsQ0FBVUMsTUFBVixDQUFrQkgsSUFBbEIsS0FBNEJBLElBQXhDLEdBQStDQSxJQUF0RDtBQUNBQyxRQUFJLEdBQUdBLElBQUksSUFBSSxJQUFmO0FBRUEsV0FBTyxLQUFLRyxLQUFMLENBQVlILElBQVosRUFBa0IsVUFBVUksSUFBVixFQUFnQkMsS0FBaEIsRUFBd0I7QUFDaEQsVUFBSUMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLFVBQVAsQ0FBbUJKLElBQW5CLEVBQXlCTCxJQUF6QixDQUFkOztBQUNBTSxXQUFLLENBQUNJLElBQU4sR0FBYSxZQUFXO0FBQ3ZCRixjQUFNLENBQUNHLFlBQVAsQ0FBcUJKLE9BQXJCO0FBQ0EsT0FGRDtBQUdBLEtBTE0sQ0FBUDtBQU1BLEdBVkQ7O0FBWUEsU0FBT1YsTUFBTSxDQUFDQyxFQUFQLENBQVVDLEtBQWpCO0FBQ0MsQ0F2Qks7QUFBQSxvR0FBTiIsImZpbGUiOiI4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi9xdWV1ZVwiLFxuXHRcIi4uL2VmZmVjdHNcIiAvLyBEZWxheSBpcyBvcHRpb25hbCBiZWNhdXNlIG9mIHRoaXMgZGVwZW5kZW5jeVxuXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5yZXR1cm4galF1ZXJ5LmZuLmRlbGF5O1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///86\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(9), __webpack_require__(58)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, dataPriv, isHiddenWithinTree) {\n  "use strict";\n\n  var defaultDisplayMap = {};\n\n  function getDefaultDisplay(elem) {\n    var temp,\n        doc = elem.ownerDocument,\n        nodeName = elem.nodeName,\n        display = defaultDisplayMap[nodeName];\n\n    if (display) {\n      return display;\n    }\n\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, "display");\n    temp.parentNode.removeChild(temp);\n\n    if (display === "none") {\n      display = "block";\n    }\n\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        values = [],\n        index = 0,\n        length = elements.length; // Determine new display value for elements that need to change\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      display = elem.style.display;\n\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === "none") {\n          values[index] = dataPriv.get(elem, "display") || null;\n\n          if (!values[index]) {\n            elem.style.display = "";\n          }\n        }\n\n        if (elem.style.display === "" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== "none") {\n          values[index] = "none"; // Remember what we\'re overwriting\n\n          dataPriv.set(elem, "display", display);\n        }\n      }\n    } // Set the display of the elements in a second loop to avoid constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.fn.extend({\n    show: function () {\n      return showHide(this, true);\n    },\n    hide: function () {\n      return showHide(this);\n    },\n    toggle: function (state) {\n      if (typeof state === "boolean") {\n        return state ? this.show() : this.hide();\n      }\n\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  return showHide;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3Mvc2hvd0hpZGUuanM/YzZlNCJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJkYXRhUHJpdiIsImlzSGlkZGVuV2l0aGluVHJlZSIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJlbGVtIiwidGVtcCIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJub2RlTmFtZSIsImRpc3BsYXkiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwiY3NzIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic2hvd0hpZGUiLCJlbGVtZW50cyIsInNob3ciLCJ2YWx1ZXMiLCJpbmRleCIsImxlbmd0aCIsInN0eWxlIiwiZ2V0Iiwic2V0IiwiZm4iLCJleHRlbmQiLCJoaWRlIiwidG9nZ2xlIiwic3RhdGUiLCJlYWNoIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHNCQUZPLEVBR1AsdUJBSE8sQ0FBRixtQ0FJSCxVQUFVQyxNQUFWLEVBQWtCQyxRQUFsQixFQUE0QkMsa0JBQTVCLEVBQWlEO0FBRXBEOztBQUVBLE1BQUlDLGlCQUFpQixHQUFHLEVBQXhCOztBQUVBLFdBQVNDLGlCQUFULENBQTRCQyxJQUE1QixFQUFtQztBQUNsQyxRQUFJQyxJQUFKO0FBQUEsUUFDQ0MsR0FBRyxHQUFHRixJQUFJLENBQUNHLGFBRFo7QUFBQSxRQUVDQyxRQUFRLEdBQUdKLElBQUksQ0FBQ0ksUUFGakI7QUFBQSxRQUdDQyxPQUFPLEdBQUdQLGlCQUFpQixDQUFFTSxRQUFGLENBSDVCOztBQUtBLFFBQUtDLE9BQUwsRUFBZTtBQUNkLGFBQU9BLE9BQVA7QUFDQTs7QUFFREosUUFBSSxHQUFHQyxHQUFHLENBQUNJLElBQUosQ0FBU0MsV0FBVCxDQUFzQkwsR0FBRyxDQUFDTSxhQUFKLENBQW1CSixRQUFuQixDQUF0QixDQUFQO0FBQ0FDLFdB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TCxDQUFXLFlBQVc7QUFDNUIsWUFBSzdCLGtCQUFrQixDQUFFLElBQUYsQ0FBdkIsRUFBa0M7QUFDakNGLGdCQUFNLENBQUUsSUFBRixDQUFOLENBQWVtQixJQUFmO0FBQ0EsU0FGRCxNQUVPO0FBQ05uQixnQkFBTSxDQUFFLElBQUYsQ0FBTixDQUFlNEIsSUFBZjtBQUNBO0FBQ0QsT0FOTSxDQUFQO0FBT0E7QUFuQmdCLEdBQWxCO0FBc0JBLFNBQU9YLFFBQVA7QUFDQyxDQXhHSztBQUFBLG9HQUFOIiwiZmlsZSI6Ijg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL2RhdGEvdmFyL2RhdGFQcml2XCIsXG5cdFwiLi4vY3NzL3Zhci9pc0hpZGRlbldpdGhpblRyZWVcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgZGF0YVByaXYsIGlzSGlkZGVuV2l0aGluVHJlZSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxucmV0dXJuIHNob3dIaWRlO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///87\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, support) {\n  "use strict";\n\n  (function () {\n    var fragment = document.createDocumentFragment(),\n        div = fragment.appendChild(document.createElement("div")),\n        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (#11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (#14901)\n\n    input.setAttribute("type", "radio");\n    input.setAttribute("checked", "checked");\n    input.setAttribute("name", "t");\n    div.appendChild(input); // Support: Android <=4.1 only\n    // Older WebKit doesn\'t clone checked state correctly in fragments\n\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n    div.innerHTML = "<textarea>x</textarea>";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n  })();\n\n  return support;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vc3VwcG9ydC5qcz8xODdhIl0sIm5hbWVzIjpbImRlZmluZSIsImRvY3VtZW50Iiwic3VwcG9ydCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImRpdiIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsImlucHV0Iiwic2V0QXR0cmlidXRlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsImxhc3RDaGlsZCIsImNoZWNrZWQiLCJpbm5lckhUTUwiLCJub0Nsb25lQ2hlY2tlZCIsImRlZmF1bHRWYWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCx1QkFGTyxDQUFGLG1DQUdILFVBQVVDLFFBQVYsRUFBb0JDLE9BQXBCLEVBQThCO0FBRWpDOztBQUVBLEdBQUUsWUFBVztBQUNaLFFBQUlDLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxzQkFBVCxFQUFmO0FBQUEsUUFDQ0MsR0FBRyxHQUFHRixRQUFRLENBQUNHLFdBQVQsQ0FBc0JMLFFBQVEsQ0FBQ00sYUFBVCxDQUF3QixLQUF4QixDQUF0QixDQURQO0FBQUEsUUFFQ0MsS0FBSyxHQUFHUCxRQUFRLENBQUNNLGFBQVQsQ0FBd0IsT0FBeEIsQ0FGVCxDQURZLENBS1o7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FDLFNBQUssQ0FBQ0MsWUFBTixDQUFvQixNQUFwQixFQUE0QixPQUE1QjtBQUNBRCxTQUFLLENBQUNDLFlBQU4sQ0FBb0IsU0FBcEIsRUFBK0IsU0FBL0I7QUFDQUQsU0FBSyxDQUFDQyxZQUFOLENBQW9CLE1BQXBCLEVBQTRCLEdBQTVCO0FBRUFKLE9BQUcsQ0FBQ0MsV0FBSixDQUFpQkUsS0FBakIsRUFiWSxDQWVaO0FBQ0E7O0FBQ0FOLFdBQU8sQ0FBQ1EsVUFBUixHQUFxQkwsR0FBRyxDQUFDTSxTQUFKLENBQWUsSUFBZixFQUFzQkEsU0FBdEIsQ0FBaUMsSUFBakMsRUFBd0NDLFNBQXhDLENBQWtEQyxPQUF2RSxDQWpCWSxDQW1CWjtBQUNBOztBQUNBUixPQUFHLENBQUNTLFNBQUosR0FBZ0Isd0JBQWhCO0FBQ0FaLFdBQU8sQ0FBQ2EsY0FBUixHQUF5QixDQUFDLENBQUNWLEdBQUcsQ0FBQ00sU0FBSixDQUFlLElBQWYsRUFBc0JDLFNBQXRCLENBQWdDSSxZQUEzRDtBQUNBLEdBdkJEOztBQXlCQSxTQUFPZCxPQUFQO0FBRUMsQ0FsQ0s7QUFBQSxvR0FBTiIsImZpbGUiOiI4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL3Zhci9kb2N1bWVudFwiLFxuXHRcIi4uL3Zhci9zdXBwb3J0XCJcbl0sIGZ1bmN0aW9uKCBkb2N1bWVudCwgc3VwcG9ydCApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5yZXR1cm4gc3VwcG9ydDtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///88\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (cssExpand) {\n  "use strict";\n\n  return new RegExp(cssExpand.join("|"), "i");\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvdmFyL3Jib3hTdHlsZS5qcz84YTQ2Il0sIm5hbWVzIjpbImRlZmluZSIsImNzc0V4cGFuZCIsIlJlZ0V4cCIsImpvaW4iXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsU0FBVixFQUFzQjtBQUN4Qjs7QUFFQSxTQUFPLElBQUlDLE1BQUosQ0FBWUQsU0FBUyxDQUFDRSxJQUFWLENBQWdCLEdBQWhCLENBQVosRUFBbUMsR0FBbkMsQ0FBUDtBQUNBLENBTks7QUFBQSxvR0FBTiIsImZpbGUiOiI4OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4vY3NzRXhwYW5kXCJcbl0sIGZ1bmN0aW9uKCBjc3NFeHBhbmQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHJldHVybiBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///89\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(70), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, finalPropName) {\n  "use strict";\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function (elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");\n    },\n    cur: function () {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function (percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function (tween) {\n        var result; // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        } // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as "10px" are parsed to Float;\n        // complex values such as "rotate(1rad)" are returned as-is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.\n\n        return !result || result === "auto" ? 0 : result;\n      },\n      set: function (tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function (tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function (p) {\n      return p;\n    },\n    swing: function (p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: "swing"\n  };\n  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\n\n  jQuery.fx.step = {};\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(92), __webpack_require__(71), __webpack_require__(93), __webpack_require__(94)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict"; // Return jQuery for attributes-only inclusion\n\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hdHRyaWJ1dGVzLmpzPzllMzYiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHVCQUZPLEVBR1AsdUJBSE8sRUFJUCx1QkFKTyxFQUtQLHVCQUxPLENBQUYsbUNBTUgsVUFBVUMsTUFBVixFQUFtQjtBQUV0QixlQUZzQixDQUl0Qjs7QUFDQSxTQUFPQSxNQUFQO0FBQ0MsQ0FaSztBQUFBLG9HQUFOIiwiZmlsZSI6IjkxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9jb3JlXCIsXG5cdFwiLi9hdHRyaWJ1dGVzL2F0dHJcIixcblx0XCIuL2F0dHJpYnV0ZXMvcHJvcFwiLFxuXHRcIi4vYXR0cmlidXRlcy9jbGFzc2VzXCIsXG5cdFwiLi9hdHRyaWJ1dGVzL3ZhbFwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(12), __webpack_require__(41), __webpack_require__(10), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, nodeName, support, rnothtmlwhite) {\n  "use strict";\n\n  var boolHook,\n      attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function (name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function (name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set attributes on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (typeof elem.getAttribute === "undefined") {\n        return jQuery.prop(elem, name, value);\n      } // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        elem.setAttribute(name, value + "");\n        return value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function (elem, value) {\n          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {\n            var val = elem.value;\n            elem.setAttribute("type", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function (elem, value) {\n      var name,\n          i = 0,\n          // Attribute names can contain non-HTML whitespace characters\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n      attrNames = value && value.match(rnothtmlwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  }); // Hooks for boolean attributes\n\n  boolHook = {\n    set: function (elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n          handle,\n          lowercaseName = name.toLowerCase();\n\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n\n      return ret;\n    };\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(42), __webpack_require__(3), __webpack_require__(10), __webpack_require__(9), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, stripAndCollapse, isFunction, rnothtmlwhite, dataPriv) {\n  "use strict";\n\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute("class") || "";\n  }\n\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n\n    if (typeof value === "string") {\n      return value.match(rnothtmlwhite) || [];\n    }\n\n    return [];\n  }\n\n  jQuery.fn.extend({\n    addClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem);\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(" " + clazz + " ") < 0) {\n                cur += clazz + " ";\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      if (!arguments.length) {\n        return this.attr("class", "");\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(" " + clazz + " ") > -1) {\n                cur = cur.replace(" " + clazz + " ", " ");\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function (value, stateVal) {\n      var type = typeof value,\n          isValidValue = type === "string" || Array.isArray(value);\n\n      if (typeof stateVal === "boolean" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        var className, i, self, classNames;\n\n        if (isValidValue) {\n          // Toggle individual class names\n          i = 0;\n          self = jQuery(this);\n          classNames = classesToArray(value);\n\n          while (className = classNames[i++]) {\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          } // Toggle whole class name\n\n        } else if (value === undefined || type === "boolean") {\n          className = getClass(this);\n\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, "__className__", className);\n          } // If the element has a class name or if we\'re passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          if (this.setAttribute) {\n            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");\n          }\n        }\n      });\n    },\n    hasClass: function (selector) {\n      var className,\n          elem,\n          i = 0;\n      className = " " + selector + " ";\n\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///93\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(42), __webpack_require__(41), __webpack_require__(12), __webpack_require__(3), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, stripAndCollapse, support, nodeName, isFunction) {\n  "use strict";\n\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function (value) {\n      var hooks,\n          ret,\n          valueIsFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value; // Handle most common string cases\n\n          if (typeof ret === "string") {\n            return ret.replace(rreturn, "");\n          } // Handle cases where value is null/undef or number\n\n\n          return ret == null ? "" : ret;\n        }\n\n        return;\n      }\n\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        } // Treat null/undefined as ""; convert numbers to string\n\n\n        if (val == null) {\n          val = "";\n        } else if (typeof val === "number") {\n          val += "";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? "" : value + "";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function (elem) {\n          var val = jQuery.find.attr(elem, "value");\n          return val != null ? val : // Support: IE <=10 - 11 only\n          // option.text throws exceptions (#14686, #14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function (elem) {\n          var value,\n              option,\n              i,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === "select-one",\n              values = one ? null : [],\n              max = one ? index + 1 : options.length;\n\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          } // Loop through all the selected options\n\n\n          for (; i < max; i++) {\n            option = options[i]; // Support: IE <=9 only\n            // IE8-9 doesn\'t update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && // Don\'t return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don\'t need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function (elem, value) {\n          var optionSet,\n              option,\n              options = elem.options,\n              values = jQuery.makeArray(value),\n              i = options.length;\n\n          while (i--) {\n            option = options[i];\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n            /* eslint-enable no-cond-assign */\n\n          } // Force browsers to behave consistently when non-matching value is set\n\n\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    }\n  }); // Radios and checkboxes getter/setter\n\n  jQuery.each(["radio", "checkbox"], function () {\n    jQuery.valHooks[this] = {\n      set: function (elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute("value") === null ? "on" : elem.value;\n      };\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(9), __webpack_require__(96), __webpack_require__(17), __webpack_require__(43)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, dataPriv, support) {\n  "use strict"; // Support: Firefox <=44\n  // Firefox doesn\'t have focus(in | out) events\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n  //\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n  // focus(in | out) events fire after focus & blur events,\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\n  if (!support.focusin) {\n    jQuery.each({\n      focus: "focusin",\n      blur: "focusout"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function (event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function () {\n          var doc = this.ownerDocument || this,\n              attaches = dataPriv.access(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function () {\n          var doc = this.ownerDocument || this,\n              attaches = dataPriv.access(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            dataPriv.remove(doc, fix);\n          } else {\n            dataPriv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9ldmVudC9mb2N1c2luLmpzPzE3YmYiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwiZGF0YVByaXYiLCJzdXBwb3J0IiwiZm9jdXNpbiIsImVhY2giLCJmb2N1cyIsImJsdXIiLCJvcmlnIiwiZml4IiwiaGFuZGxlciIsImV2ZW50Iiwic2ltdWxhdGUiLCJ0YXJnZXQiLCJzcGVjaWFsIiwic2V0dXAiLCJkb2MiLCJvd25lckRvY3VtZW50IiwiYXR0YWNoZXMiLCJhY2Nlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwidGVhcmRvd24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHNCQUZPLEVBR1AsdUJBSE8sRUFLUCx1QkFMTyxFQU1QLHVCQU5PLENBQUYsbUNBT0gsVUFBVUMsTUFBVixFQUFrQkMsUUFBbEIsRUFBNEJDLE9BQTVCLEVBQXNDO0FBRXpDLGVBRnlDLENBSXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSyxDQUFDQSxPQUFPLENBQUNDLE9BQWQsRUFBd0I7QUFDdkJILFVBQU0sQ0FBQ0ksSUFBUCxDQUFhO0FBQUVDLFdBQUssRUFBRSxTQUFUO0FBQW9CQyxVQUFJLEVBQUU7QUFBMUIsS0FBYixFQUFxRCxVQUFVQyxJQUFWLEVBQWdCQyxHQUFoQixFQUFzQjtBQUUxRTtBQUNBLFVBQUlDLE9BQU8sR0FBRyxVQUFVQyxLQUFWLEVBQWtCO0FBQy9CVixjQUFNLENBQUNVLEtBQVAsQ0FBYUMsUUFBYixDQUF1QkgsR0FBdkIsRUFBNEJFLEtBQUssQ0FBQ0UsTUFBbEMsRUFBMENaLE1BQU0sQ0FBQ1UsS0FBUCxDQUFhRixHQUFiLENBQWtCRSxLQUFsQixDQUExQztBQUNBLE9BRkQ7O0FBSUFWLFlBQU0sQ0FBQ1UsS0FBUCxDQUFhRyxPQUFiLENBQXNCTCxHQUF0QixJQUE4QjtBQUM3Qk0sYUFBSyxFQUFFLFlBQVc7QUFDakIsY0FBSUMsR0FBRyxHQUFHLEtBQUtDLGFBQUwsSUFBc0IsSUFBaEM7QUFBQSxjQUNDQyxRQUFRLEdBQUdoQixRQUFRLENBQUNpQixNQUFULENBQWlCSCxHQUFqQixFQUFzQlAsR0FBdEIsQ0FEWjs7QUFHQSxjQUFLLENBQUNTLFFBQU4sRUFBaUI7QUFDaEJGLGVBQUcsQ0FBQ0ksZ0JBQUosQ0FBc0JaLElBQXRCLEVBQTRCRSxPQUE1QixFQUFxQyxJQUFyQztBQUNBOztBQUNEUixrQkFBUSxDQUFDaUIsTUFBVCxDQUFpQkgsR0FBakIsRUFBc0JQLEdBQXRCLEVBQTJCLENBQUVTLFFBQVEsSUFBSSxDQUFkLElBQW9CLENBQS9DO0FBQ0EsU0FUNEI7QUFVN0JHLGdCQUFRLEVBQUUsWUFBVztBQUNwQixjQUFJTCxHQUFHLEdBQUcsS0FBS0MsYUFBTCxJQUFzQixJQUFoQztBQUFBLGNBQ0NDLFFBQVEsR0FBR2hCLFFBQVEsQ0FBQ2lCLE1BQVQsQ0FBaUJILEdBQWpCLEVBQXNCUCxHQUF0QixJQUE4QixDQUQxQzs7QUFHQSxjQUFLLENBQUNTLFFBQU4sRUFBaUI7QUFDaEJGLGVBQUcsQ0FBQ00sbUJBQUosQ0FBeUJkLElBQXpCLEVBQStCRSxPQUEvQixFQUF3QyxJQUF4QztBQUNBUixvQkFBUSxDQUFDcUIsTUFBVCxDQUFpQlAsR0FBakIsRUFBc0JQLEdBQXRCO0FBRUEsV0FKRCxNQUlPO0FBQ05QLG9CQUFRLENBQUNpQixNQUFULENBQWlCSCxHQUFqQixFQUFzQlAsR0FBdEIsRUFBMkJTLFFBQTNCO0FBQ0E7QUFDRDtBQXJCNEIsT0FBOUI7QUF1QkEsS0E5QkQ7QUErQkE7O0FBRUQsU0FBT2pCLE1BQVA7QUFDQyxDQXRESztBQUFBLG9HQUFOIiwiZmlsZSI6Ijk1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL2RhdGEvdmFyL2RhdGFQcml2XCIsXG5cdFwiLi9zdXBwb3J0XCIsXG5cblx0XCIuLi9ldmVudFwiLFxuXHRcIi4vdHJpZ2dlclwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBkYXRhUHJpdiwgc3VwcG9ydCApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///95\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (support) {\n  "use strict";\n\n  support.focusin = "onfocusin" in window;\n  return support;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9ldmVudC9zdXBwb3J0LmpzPzQ3OTkiXSwibmFtZXMiOlsiZGVmaW5lIiwic3VwcG9ydCIsImZvY3VzaW4iLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHVCQURPLENBQUYsbUNBRUgsVUFBVUMsT0FBVixFQUFvQjtBQUV2Qjs7QUFFQUEsU0FBTyxDQUFDQyxPQUFSLEdBQWtCLGVBQWVDLE1BQWpDO0FBRUEsU0FBT0YsT0FBUDtBQUVDLENBVks7QUFBQSxvR0FBTiIsImZpbGUiOiI5Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL3Zhci9zdXBwb3J0XCJcbl0sIGZ1bmN0aW9uKCBzdXBwb3J0ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cbnJldHVybiBzdXBwb3J0O1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  jQuery._evalUrl = function (url, options) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (#11264)\n      type: "GET",\n      dataType: "script",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        "text script": function () {}\n      },\n      dataFilter: function (response) {\n        jQuery.globalEval(response, options);\n      }\n    });\n  };\n\n  return jQuery._evalUrl;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vX2V2YWxVcmwuanM/NzRjOSJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJfZXZhbFVybCIsInVybCIsIm9wdGlvbnMiLCJhamF4IiwidHlwZSIsImRhdGFUeXBlIiwiY2FjaGUiLCJhc3luYyIsImdsb2JhbCIsImNvbnZlcnRlcnMiLCJkYXRhRmlsdGVyIiwicmVzcG9uc2UiLCJnbG9iYWxFdmFsIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCx1QkFETyxDQUFGLG1DQUVILFVBQVVDLE1BQVYsRUFBbUI7QUFFdEI7O0FBRUFBLFFBQU0sQ0FBQ0MsUUFBUCxHQUFrQixVQUFVQyxHQUFWLEVBQWVDLE9BQWYsRUFBeUI7QUFDMUMsV0FBT0gsTUFBTSxDQUFDSSxJQUFQLENBQWE7QUFDbkJGLFNBQUcsRUFBRUEsR0FEYztBQUduQjtBQUNBRyxVQUFJLEVBQUUsS0FKYTtBQUtuQkMsY0FBUSxFQUFFLFFBTFM7QUFNbkJDLFdBQUssRUFBRSxJQU5ZO0FBT25CQyxXQUFLLEVBQUUsS0FQWTtBQVFuQkMsWUFBTSxFQUFFLEtBUlc7QUFVbkI7QUFDQTtBQUNBO0FBQ0FDLGdCQUFVLEVBQUU7QUFDWCx1QkFBZSxZQUFXLENBQUU7QUFEakIsT0FiTztBQWdCbkJDLGdCQUFVLEVBQUUsVUFBVUMsUUFBVixFQUFxQjtBQUNoQ1osY0FBTSxDQUFDYSxVQUFQLENBQW1CRCxRQUFuQixFQUE2QlQsT0FBN0I7QUFDQTtBQWxCa0IsS0FBYixDQUFQO0FBb0JBLEdBckJEOztBQXVCQSxTQUFPSCxNQUFNLENBQUNDLFFBQWQ7QUFFQyxDQS9CSztBQUFBLG9HQUFOIiwiZmlsZSI6Ijk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vYWpheFwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5yZXR1cm4galF1ZXJ5Ll9ldmFsVXJsO1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///97\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  "use strict";\n\n  return window.location;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hamF4L3Zhci9sb2NhdGlvbi5qcz82NDhlIl0sIm5hbWVzIjpbImRlZmluZSIsIndpbmRvdyIsImxvY2F0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQUEscUVBQVEsWUFBVztBQUNsQjs7QUFFQSxTQUFPQyxNQUFNLENBQUNDLFFBQWQ7QUFDQSxDQUpLO0FBQUEsb0dBQU4iLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRyZXR1cm4gd2luZG93LmxvY2F0aW9uO1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///98\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict"; // Cross-browser xml parsing\n\n  jQuery.parseXML = function (data) {\n    var xml;\n\n    if (!data || typeof data !== "string") {\n      return null;\n    } // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n\n\n    try {\n      xml = new window.DOMParser().parseFromString(data, "text/xml");\n    } catch (e) {\n      xml = undefined;\n    }\n\n    if (!xml || xml.getElementsByTagName("parsererror").length) {\n      jQuery.error("Invalid XML: " + data);\n    }\n\n    return xml;\n  };\n\n  return jQuery.parseXML;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hamF4L3BhcnNlWE1MLmpzPzkxMWEiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwicGFyc2VYTUwiLCJkYXRhIiwieG1sIiwid2luZG93IiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZSIsInVuZGVmaW5lZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLENBQUYsbUNBRUgsVUFBVUMsTUFBVixFQUFtQjtBQUV0QixlQUZzQixDQUl0Qjs7QUFDQUEsUUFBTSxDQUFDQyxRQUFQLEdBQWtCLFVBQVVDLElBQVYsRUFBaUI7QUFDbEMsUUFBSUMsR0FBSjs7QUFDQSxRQUFLLENBQUNELElBQUQsSUFBUyxPQUFPQSxJQUFQLEtBQWdCLFFBQTlCLEVBQXlDO0FBQ3hDLGFBQU8sSUFBUDtBQUNBLEtBSmlDLENBTWxDO0FBQ0E7OztBQUNBLFFBQUk7QUFDSEMsU0FBRyxHQUFLLElBQUlDLE1BQU0sQ0FBQ0MsU0FBWCxFQUFGLENBQTJCQyxlQUEzQixDQUE0Q0osSUFBNUMsRUFBa0QsVUFBbEQsQ0FBTjtBQUNBLEtBRkQsQ0FFRSxPQUFRSyxDQUFSLEVBQVk7QUFDYkosU0FBRyxHQUFHSyxTQUFOO0FBQ0E7O0FBRUQsUUFBSyxDQUFDTCxHQUFELElBQVFBLEdBQUcsQ0FBQ00sb0JBQUosQ0FBMEIsYUFBMUIsRUFBMENDLE1BQXZELEVBQWdFO0FBQy9EVixZQUFNLENBQUNXLEtBQVAsQ0FBYyxrQkFBa0JULElBQWhDO0FBQ0E7O0FBQ0QsV0FBT0MsR0FBUDtBQUNBLEdBbEJEOztBQW9CQSxTQUFPSCxNQUFNLENBQUNDLFFBQWQ7QUFFQyxDQTdCSztBQUFBLG9HQUFOIiwiZmlsZSI6Ijk5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxucmV0dXJuIGpRdWVyeS5wYXJzZVhNTDtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///99\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(8), __webpack_require__(28), // clone\n__webpack_require__(15) // parent, contents\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isFunction) {\n  "use strict";\n\n  jQuery.fn.extend({\n    wrapAll: function (html) {\n      var wrap;\n\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        } // The elements to wrap the target around\n\n\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function (html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function (html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function (selector) {\n      this.parent(selector).not("body").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy93cmFwLmpzP2VkZmMiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwiaXNGdW5jdGlvbiIsImZuIiwiZXh0ZW5kIiwid3JhcEFsbCIsImh0bWwiLCJ3cmFwIiwiY2FsbCIsIm93bmVyRG9jdW1lbnQiLCJlcSIsImNsb25lIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsIm1hcCIsImVsZW0iLCJmaXJzdEVsZW1lbnRDaGlsZCIsImFwcGVuZCIsIndyYXBJbm5lciIsImVhY2giLCJpIiwic2VsZiIsImNvbnRlbnRzIiwibGVuZ3RoIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJzZWxlY3RvciIsInBhcmVudCIsIm5vdCIsInJlcGxhY2VXaXRoIiwiY2hpbGROb2RlcyJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCxzQkFGTyxFQUdQLHNCQUhPLEVBSVAsdUJBSk8sRUFJVztBQUNsQix1QkFMTyxDQUtRO0FBTFIsQ0FBRixtQ0FNSCxVQUFVQyxNQUFWLEVBQWtCQyxVQUFsQixFQUErQjtBQUVsQzs7QUFFQUQsUUFBTSxDQUFDRSxFQUFQLENBQVVDLE1BQVYsQ0FBa0I7QUFDakJDLFdBQU8sRUFBRSxVQUFVQyxJQUFWLEVBQWlCO0FBQ3pCLFVBQUlDLElBQUo7O0FBRUEsVUFBSyxLQUFNLENBQU4sQ0FBTCxFQUFpQjtBQUNoQixZQUFLTCxVQUFVLENBQUVJLElBQUYsQ0FBZixFQUEwQjtBQUN6QkEsY0FBSSxHQUFHQSxJQUFJLENBQUNFLElBQUwsQ0FBVyxLQUFNLENBQU4sQ0FBWCxDQUFQO0FBQ0EsU0FIZSxDQUtoQjs7O0FBQ0FELFlBQUksR0FBR04sTUFBTSxDQUFFSyxJQUFGLEVBQVEsS0FBTSxDQUFOLEVBQVVHLGFBQWxCLENBQU4sQ0FBd0NDLEVBQXhDLENBQTRDLENBQTVDLEVBQWdEQyxLQUFoRCxDQUF1RCxJQUF2RCxDQUFQOztBQUVBLFlBQUssS0FBTSxDQUFOLEVBQVVDLFVBQWYsRUFBNEI7QUFDM0JMLGNBQUksQ0FBQ00sWUFBTCxDQUFtQixLQUFNLENBQU4sQ0FBbkI7QUFDQTs7QUFFRE4sWUFBSSxDQUFDTyxHQUFMLENBQVUsWUFBVztBQUNwQixjQUFJQyxJQUFJLEdBQUcsSUFBWDs7QUFFQSxpQkFBUUEsSUFBSSxDQUFDQyxpQkFBYixFQUFpQztBQUNoQ0QsZ0JBQUksR0FBR0EsSUFBSSxDQUFDQyxpQkFBWjtBQUNBOztBQUVELGlCQUFPRCxJQUFQO0FBQ0EsU0FSRCxFQVFJRSxNQVJKLENBUVksSUFSWjtBQVNBOztBQUVELGFBQU8sSUFBUDtBQUNBLEtBNUJnQjtBQThCakJDLGFBQVMsRUFBRSxVQUFVWixJQUFWLEVBQWlCO0FBQzNCLFVBQUtKLFVBQVUsQ0FBRUksSUFBRixDQUFmLEVBQTBCO0FBQ3pCLGVBQU8sS0FBS2EsSUFBTCxDQUFXLFVBQVVDLENBQVYsRUFBYztBQUMvQm5CLGdCQUFNLENBQUUsSUFBRixDQUFOLENBQWVpQixTQUFmLENBQTBCWixJQUFJLENBQUNFLElBQUwsQ0FBVyxJQUFYLEVBQWlCWSxDQUFqQixDQUExQjtBQUNBLFNBRk0sQ0FBUDtBQUdBOztBQUVELGFBQU8sS0FBS0QsSUFBTCxDQUFXLFlBQVc7QUFDNUIsWUFBSUUsSUFBSSxHQUFHcEIsTUFBTSxDQUFFLElBQUYsQ0FBakI7QUFBQSxZQUNDcUIsUUFBUSxHQUFHRCxJQUFJLENBQUNDLFFBQUwsRUFEWjs7QUFHQSxZQUFLQSxRQUFRLENBQUNDLE1BQWQsRUFBdUI7QUFDdEJELGtCQUFRLENBQUNqQixPQUFULENBQWtCQyxJQUFsQjtBQUVBLFNBSEQsTUFHTztBQUNOZSxjQUFJLENBQUNKLE1BQUwsQ0FBYVgsSUFBYjtBQUNBO0FBQ0QsT0FWTSxDQUFQO0FBV0EsS0FoRGdCO0FBa0RqQkMsUUFBSSxFQUFFLFVBQVVELElBQVYsRUFBaUI7QUFDdEIsVUFBSWtCLGNBQWMsR0FBR3RCLFVBQVUsQ0FBRUksSUFBRixDQUEvQjtBQUVBLGFBQU8sS0FBS2EsSUFBTCxDQUFXLFVBQVVDLENBQVYsRUFBYztBQUMvQm5CLGNBQU0sQ0FBRSxJQUFGLENBQU4sQ0FBZUksT0FBZixDQUF3Qm1CLGNBQWMsR0FBR2xCLElBQUksQ0FBQ0UsSUFBTCxDQUFXLElBQVgsRUFBaUJZLENBQWpCLENBQUgsR0FBMEJkLElBQWhFO0FBQ0EsT0FGTSxDQUFQO0FBR0EsS0F4RGdCO0FBMERqQm1CLFVBQU0sRUFBRSxVQUFVQyxRQUFWLEVBQXFCO0FBQzVCLFdBQUtDLE1BQUwsQ0FBYUQsUUFBYixFQUF3QkUsR0FBeEIsQ0FBNkIsTUFBN0IsRUFBc0NULElBQXRDLENBQTRDLFlBQVc7QUFDdERsQixjQUFNLENBQUUsSUFBRixDQUFOLENBQWU0QixXQUFmLENBQTRCLEtBQUtDLFVBQWpDO0FBQ0EsT0FGRDtBQUdBLGFBQU8sSUFBUDtBQUNBO0FBL0RnQixHQUFsQjtBQWtFQSxTQUFPN0IsTUFBUDtBQUNDLENBN0VLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTAwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9jb3JlXCIsXG5cdFwiLi92YXIvaXNGdW5jdGlvblwiLFxuXHRcIi4vY29yZS9pbml0XCIsXG5cdFwiLi9tYW5pcHVsYXRpb25cIiwgLy8gY2xvbmVcblx0XCIuL3RyYXZlcnNpbmdcIiAvLyBwYXJlbnQsIGNvbnRlbnRzXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBpc0Z1bmN0aW9uICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///100\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jc3MvaGlkZGVuVmlzaWJsZVNlbGVjdG9ycy5qcz80YTc4Il0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsImV4cHIiLCJwc2V1ZG9zIiwiaGlkZGVuIiwiZWxlbSIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldENsaWVudFJlY3RzIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHNCQUZPLENBQUYsbUNBR0gsVUFBVUMsTUFBVixFQUFtQjtBQUV0Qjs7QUFFQUEsUUFBTSxDQUFDQyxJQUFQLENBQVlDLE9BQVosQ0FBb0JDLE1BQXBCLEdBQTZCLFVBQVVDLElBQVYsRUFBaUI7QUFDN0MsV0FBTyxDQUFDSixNQUFNLENBQUNDLElBQVAsQ0FBWUMsT0FBWixDQUFvQkcsT0FBcEIsQ0FBNkJELElBQTdCLENBQVI7QUFDQSxHQUZEOztBQUdBSixRQUFNLENBQUNDLElBQVAsQ0FBWUMsT0FBWixDQUFvQkcsT0FBcEIsR0FBOEIsVUFBVUQsSUFBVixFQUFpQjtBQUM5QyxXQUFPLENBQUMsRUFBR0EsSUFBSSxDQUFDRSxXQUFMLElBQW9CRixJQUFJLENBQUNHLFlBQXpCLElBQXlDSCxJQUFJLENBQUNJLGNBQUwsR0FBc0JDLE1BQWxFLENBQVI7QUFDQSxHQUZEO0FBSUMsQ0FkSztBQUFBLG9HQUFOIiwiZmlsZSI6IjEwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi9zZWxlY3RvclwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///101\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(11), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, support) {\n  "use strict";\n\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n\n  var xhrSuccessStatus = {\n    // File protocol always yields status code 0, assume 200\n    0: 200,\n    // Support: IE <=9 only\n    // #1450: sometimes IE returns 1223 when it should be 204\n    1223: 204\n  },\n      xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\n\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function (headers, complete) {\n          var i,\n              xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          } // Override mime type if needed\n\n\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          } // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won\'t change header if already provided.\n\n\n          if (!options.crossDomain && !headers["X-Requested-With"]) {\n            headers["X-Requested-With"] = "XMLHttpRequest";\n          } // Set headers\n\n\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          } // Callback\n\n\n          callback = function (type) {\n            return function () {\n              if (callback) {\n                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n\n                if (type === "abort") {\n                  xhr.abort();\n                } else if (type === "error") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== "number") {\n                    complete(0, "error");\n                  } else {\n                    complete( // File: protocol always yields status 0; see #8605, #14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          }; // Listen to events\n\n\n          xhr.onload = callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = callback("error"); // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          } // Create the abort callback\n\n\n          callback = callback("abort");\n\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // #14683: Only rethrow if this hasn\'t been notified as an error yet\n            if (callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hamF4L3hoci5qcz9kM2FhIl0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsInN1cHBvcnQiLCJhamF4U2V0dGluZ3MiLCJ4aHIiLCJ3aW5kb3ciLCJYTUxIdHRwUmVxdWVzdCIsImUiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImFqYXgiLCJhamF4VHJhbnNwb3J0Iiwib3B0aW9ucyIsImNhbGxiYWNrIiwiZXJyb3JDYWxsYmFjayIsImNyb3NzRG9tYWluIiwic2VuZCIsImhlYWRlcnMiLCJjb21wbGV0ZSIsImkiLCJvcGVuIiwidHlwZSIsInVybCIsImFzeW5jIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInhockZpZWxkcyIsIm1pbWVUeXBlIiwib3ZlcnJpZGVNaW1lVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImFib3J0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInJlc3BvbnNlIiwidGV4dCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInVuZGVmaW5lZCIsInJlYWR5U3RhdGUiLCJzZXRUaW1lb3V0IiwiaGFzQ29udGVudCIsImRhdGEiXSwibWFwcGluZ3MiOiJBQUFBQSxpR0FBUSxDQUNQLHNCQURPLEVBRVAsdUJBRk8sRUFHUCx1QkFITyxDQUFGLG1DQUlILFVBQVVDLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTRCO0FBRS9COztBQUVBRCxRQUFNLENBQUNFLFlBQVAsQ0FBb0JDLEdBQXBCLEdBQTBCLFlBQVc7QUFDcEMsUUFBSTtBQUNILGFBQU8sSUFBSUMsTUFBTSxDQUFDQyxjQUFYLEVBQVA7QUFDQSxLQUZELENBRUUsT0FBUUMsQ0FBUixFQUFZLENBQUU7QUFDaEIs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QUNBRCxrQkFBUSxHQUFHQSxRQUFRLENBQUUsT0FBRixDQUFuQjs7QUFFQSxjQUFJO0FBRUg7QUFDQVYsZUFBRyxDQUFDYSxJQUFKLENBQVVKLE9BQU8sQ0FBQ21DLFVBQVIsSUFBc0JuQyxPQUFPLENBQUNvQyxJQUE5QixJQUFzQyxJQUFoRDtBQUNBLFdBSkQsQ0FJRSxPQUFRMUMsQ0FBUixFQUFZO0FBRWI7QUFDQSxnQkFBS08sUUFBTCxFQUFnQjtBQUNmLG9CQUFNUCxDQUFOO0FBQ0E7QUFDRDtBQUNELFNBN0hLO0FBK0hONkIsYUFBSyxFQUFFLFlBQVc7QUFDakIsY0FBS3RCLFFBQUwsRUFBZ0I7QUFDZkEsb0JBQVE7QUFDUjtBQUNEO0FBbklLLE9BQVA7QUFxSUE7QUFDRCxHQTNJRDtBQTZJQyxDQXpLSztBQUFBLG9HQUFOIiwiZmlsZSI6IjEwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi92YXIvc3VwcG9ydFwiLFxuXHRcIi4uL2FqYXhcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgc3VwcG9ydCApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///102\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document) {\n  "use strict"; // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  }); // Install script dataType\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      "text script": function (text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache\'s special case and crossDomain\n\n  jQuery.ajaxPrefilter("script", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = "GET";\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport("script", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, callback;\n      return {\n        send: function (_, complete) {\n          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on("load error", callback = function (evt) {\n            script.remove();\n            callback = null;\n\n            if (evt) {\n              complete(evt.type === "error" ? 404 : 200, evt.type);\n            }\n          }); // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n          document.head.appendChild(script[0]);\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hamF4L3NjcmlwdC5qcz80MjViIl0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsImRvY3VtZW50IiwiYWpheFByZWZpbHRlciIsInMiLCJjcm9zc0RvbWFpbiIsImNvbnRlbnRzIiwic2NyaXB0IiwiYWpheFNldHVwIiwiYWNjZXB0cyIsImNvbnZlcnRlcnMiLCJ0ZXh0IiwiZ2xvYmFsRXZhbCIsImNhY2hlIiwidW5kZWZpbmVkIiwidHlwZSIsImFqYXhUcmFuc3BvcnQiLCJzY3JpcHRBdHRycyIsImNhbGxiYWNrIiwic2VuZCIsIl8iLCJjb21wbGV0ZSIsImF0dHIiLCJwcm9wIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJzcmMiLCJ1cmwiLCJvbiIsImV2dCIsInJlbW92ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImFib3J0Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHNCQUZPLEVBR1AsdUJBSE8sQ0FBRixtQ0FJSCxVQUFVQyxNQUFWLEVBQWtCQyxRQUFsQixFQUE2QjtBQUVoQyxlQUZnQyxDQUloQzs7QUFDQUQsUUFBTSxDQUFDRSxhQUFQLENBQXNCLFVBQVVDLENBQVYsRUFBYztBQUNuQyxRQUFLQSxDQUFDLENBQUNDLFdBQVAsRUFBcUI7QUFDcEJELE9BQUMsQ0FBQ0UsUUFBRixDQUFXQyxNQUFYLEdBQW9CLEtBQXBCO0FBQ0E7QUFDRCxHQUpELEVBTGdDLENBV2hDOztBQUNBTixRQUFNLENBQUNPLFNBQVAsQ0FBa0I7QUFDakJDLFdBQU8sRUFBRTtBQUNSRixZQUFNLEVBQUUsOENBQ1A7QUFGTyxLQURRO0FBS2pCRCxZQUFRLEVBQUU7QUFDVEMsWUFBTSxFQUFFO0FBREMsS0FMTztBQVFqQkcsY0FBVSxFQUFFO0FBQ1gscUJBQWUsVUFBVUMsSUFBVixFQUFpQjtBQUMvQlYsY0FBTSxDQUFDVyxVQUFQLENBQW1CRCxJQUFuQjtBQUNBLGVBQU9BLElBQVA7QUFDQTtBQUpVO0FBUkssR0FBbEIsRUFaZ0MsQ0E0QmhDOztBQUNBVixRQUFNLENBQUNFLGFBQVAsQ0FBc0IsUUFBdEIsRUFBZ0MsVUFBVUMsQ0FBVixFQUFjO0FBQzdDLFFBQUtBLENBQUMsQ0FBQ1MsS0FBRixLQUFZQyxTQUFqQixFQUE2QjtBQUM1QlYsT0FBQyxDQUFDUyxLQUFGLEdBQVUsS0FBVjtBQUNBOztBQUNELFFBQUtULENBQUMsQ0FBQ0MsV0FBUCxFQUFxQjtBQUNwQkQsT0FBQyxDQUFDVyxJQUFGLEdBQVMsS0FBVDtBQUNBO0FBQ0QsR0FQRCxFQTdCZ0MsQ0FzQ2hDOztBQUNBZCxRQUFNLENBQUNlLGFBQVAsQ0FBc0IsUUFBdEIsRUFBZ0MsVUFBVVosQ0FBVixFQUFjO0FBRTdDO0FBQ0EsUUFBS0EsQ0FBQyxDQUFDQyxXQUFGLElBQWlCRCxDQUFDLENBQUNhLFdBQXhCLEVBQXNDO0FBQ3JDLFVBQUlWLE1BQUosRUFBWVcsUUFBWjtBQUNBLGFBQU87QUFDTkMsWUFBSSxFQUFFLFVBQVVDLENBQVYsRUFBYUMsUUFBYixFQUF3QjtBQUM3QmQsZ0JBQU0sR0FBR04sTUFBTSxDQUFFLFVBQUYsQ0FBTixDQUNQcUIsSUFETyxDQUNEbEIsQ0FBQyxDQUFDYSxXQUFGLElBQWlCLEVBRGhCLEVBRVBNLElBRk8sQ0FFRDtBQUFFQyxtQkFBTyxFQUFFcEIsQ0FBQyxDQUFDcUIsYUFBYjtBQUE0QkMsZUFBRyxFQUFFdEIsQ0FBQyxDQUFDdUI7QUFBbkMsV0FGQyxFQUdQQyxFQUhPLENBR0gsWUFIRyxFQUdXVixRQUFRLEdBQUcsVUFBVVcsR0FBVixFQUFnQjtBQUM3Q3RCLGtCQUFNLENBQUN1QixNQUFQO0FBQ0FaLG9CQUFRLEdBQUcsSUFBWDs7QUFDQSxnQkFBS1csR0FBTCxFQUFXO0FBQ1ZSLHNCQUFRLENBQUVRLEdBQUcsQ0FBQ2QsSUFBSixLQUFhLE9BQWIsR0FBdUIsR0FBdkIsR0FBNkIsR0FBL0IsRUFBb0NjLEdBQUcsQ0FBQ2QsSUFBeEMsQ0FBUjtBQUNBO0FBQ0QsV0FUTyxDQUFULENBRDZCLENBWTdCOztBQUNBYixrQkFBUSxDQUFDNkIsSUFBVCxDQUFjQyxXQUFkLENBQTJCekIsTUFBTSxDQUFFLENBQUYsQ0FBakM7QUFDQSxTQWZLO0FBZ0JOMEIsYUFBSyxFQUFFLFlBQVc7QUFDakIsY0FBS2YsUUFBTCxFQUFnQjtBQUNmQSxvQkFBUTtBQUNSO0FBQ0Q7QUFwQkssT0FBUDtBQXNCQTtBQUNELEdBNUJEO0FBOEJDLENBekVLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTAzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL3Zhci9kb2N1bWVudFwiLFxuXHRcIi4uL2FqYXhcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgZG9jdW1lbnQgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///103\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(72), __webpack_require__(73), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isFunction, nonce, rquery) {\n  "use strict";\n\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: "callback",\n    jsonpCallback: function () {\n      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === "jsonp") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters["script json"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + " was not called");\n        }\n\n        return responseContainer[0];\n      }; // Force json dataType\n\n\n      s.dataTypes[0] = "json"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // If previous value didn\'t exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        } // Save back as free\n\n\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn\'t screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return "script";\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///104\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(42), __webpack_require__(3), __webpack_require__(106), __webpack_require__(18), __webpack_require__(15), __webpack_require__(28), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, stripAndCollapse, isFunction) {\n  "use strict";\n  /**\n   * Load a url into a page\n   */\n\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n        type,\n        response,\n        self = this,\n        off = url.indexOf(" ");\n\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    } // If it\'s a function\n\n\n    if (isFunction(params)) {\n      // We assume that it\'s the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && typeof params === "object") {\n      type = "POST";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If "type" variable is undefined, then "GET" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || "GET",\n        dataType: "html",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE \'Permission Denied\' errors\n        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets "jqXHR", "status", "error"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n\n    return this;\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9hamF4L2xvYWQuanM/NjRkNSJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJzdHJpcEFuZENvbGxhcHNlIiwiaXNGdW5jdGlvbiIsImZuIiwibG9hZCIsInVybCIsInBhcmFtcyIsImNhbGxiYWNrIiwic2VsZWN0b3IiLCJ0eXBlIiwicmVzcG9uc2UiLCJzZWxmIiwib2ZmIiwiaW5kZXhPZiIsInNsaWNlIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwiYWpheCIsImRhdGFUeXBlIiwiZGF0YSIsImRvbmUiLCJyZXNwb25zZVRleHQiLCJhcmd1bWVudHMiLCJodG1sIiwiYXBwZW5kIiwicGFyc2VIVE1MIiwiZmluZCIsImFsd2F5cyIsImpxWEhSIiwic3RhdHVzIiwiZWFjaCIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHVCQUZPLEVBR1Asc0JBSE8sRUFJUCx3QkFKTyxFQUtQLHVCQUxPLEVBTVAsdUJBTk8sRUFPUCx1QkFQTyxFQVFQLHNCQVJPLENBQUYsbUNBU0gsVUFBVUMsTUFBVixFQUFrQkMsZ0JBQWxCLEVBQW9DQyxVQUFwQyxFQUFpRDtBQUVwRDtBQUVBOzs7O0FBR0FGLFFBQU0sQ0FBQ0csRUFBUCxDQUFVQyxJQUFWLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsTUFBZixFQUF1QkMsUUFBdkIsRUFBa0M7QUFDbEQsUUFBSUMsUUFBSjtBQUFBLFFBQWNDLElBQWQ7QUFBQSxRQUFvQkMsUUFBcEI7QUFBQSxRQUNDQyxJQUFJLEdBQUcsSUFEUjtBQUFBLFFBRUNDLEdBQUcsR0FBR1AsR0FBRyxDQUFDUSxPQUFKLENBQWEsR0FBYixDQUZQOztBQUlBLFFBQUtELEdBQUcsR0FBRyxDQUFDLENBQVosRUFBZ0I7QUFDZkosY0FBUSxHQUFHUCxnQkFBZ0IsQ0FBRUksR0FBRyxDQUFDUyxLQUFKLENBQVdGLEdBQVgsQ0FBRixDQUEzQjtBQUNBUCxTQUFHLEdBQUdBLEdBQUcsQ0FBQ1MsS0FBSixDQUFXLENBQVgsRUFBY0YsR0FBZCxDQUFOO0FBQ0EsS0FSaUQsQ0FVbEQ7OztBQUNBLFFBQUtWLFVBQVUsQ0FBRUksTUFBRixDQUFmLEVBQTRCO0FBRTNCO0FBQ0FDLGNBQVEsR0FBR0QsTUFBWDtBQUNBQSxZQUFNLEdBQUdTLFNBQVQsQ0FKMkIsQ0FNNUI7QUFDQyxLQVBELE1BT08sSUFBS1QsTUFBTSxJQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBakMsRUFBNEM7QUFDbERHLFVBQUksR0FBRyxNQUFQO0FBQ0EsS0FwQmlELENBc0JsRDs7O0FBQ0EsUUFBS0UsSUFBSSxDQUFDSyxNQUFMLEdBQWMsQ0FBbkIsRUFBdUI7QUFDdEJoQixZQUFNLENBQUNpQixJQUFQLENBQWE7QUFDWlosV0FBRyxFQUFFQSxHQURPO0FBR1o7QUFDQTtBQUNBO0FBQ0FJLFlBQUksRUFBRUEsSUFBSSxJQUFJLEtBTkY7QUFPWlMsZ0JBQVEsRUFBRSxNQVBFO0FBUVpDLFlBQUksRUFBRWI7QUFSTSxPQUFiLEVBU0ljLElBVEosQ0FTVSxVQUFVQyxZQUFWLEVBQXlCO0FBRWxDO0FBQ0FYLGdCQUFRLEdBQUdZLFNBQVg7QUFFQVgsWUFBSSxDQUFDWSxJQUFMLENBQVdmLFFBQVEsR0FFbEI7QUFDQTtBQUNBUixjQUFNLENBQUUsT0FBRixDQUFOLENBQWtCd0IsTUFBbEIsQ0FBMEJ4QixNQUFNLENBQUN5QixTQUFQLENBQWtCSixZQUFsQixDQUExQixFQUE2REssSUFBN0QsQ0FBbUVsQixRQUFuRSxDQUprQixHQU1sQjtBQUNBYSxvQkFQRCxFQUxrQyxDQWNuQztBQUNBO0FBQ0E7QUFDQyxPQTFCRCxFQTBCSU0sTUExQkosQ0EwQllwQixRQUFRLElBQUksVUFBVXFCLEtBQVYsRUFBaUJDLE1BQWpCLEVBQTBCO0FBQ2pEbEIsWUFBSSxDQUFDbUIsSUFBTCxDQUFXLFlBQVc7QUFDckJ2QixrQkFBUSxDQUFDd0IsS0FBVCxDQUFnQixJQUFoQixFQUFzQnJCLFFBQVEsSUFBSSxDQUFFa0IsS0FBSyxDQUFDUCxZQUFSLEVBQXNCUSxNQUF0QixFQUE4QkQsS0FBOUIsQ0FBbEM7QUFDQSxTQUZEO0FBR0EsT0E5QkQ7QUErQkE7O0FBRUQsV0FBTyxJQUFQO0FBQ0EsR0ExREQ7QUE0REMsQ0E1RUs7QUFBQSxvR0FBTiIsImZpbGUiOiIxMDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCIsXG5cdFwiLi4vY29yZS9zdHJpcEFuZENvbGxhcHNlXCIsXG5cdFwiLi4vdmFyL2lzRnVuY3Rpb25cIixcblx0XCIuLi9jb3JlL3BhcnNlSFRNTFwiLFxuXHRcIi4uL2FqYXhcIixcblx0XCIuLi90cmF2ZXJzaW5nXCIsXG5cdFwiLi4vbWFuaXB1bGF0aW9uXCIsXG5cdFwiLi4vc2VsZWN0b3JcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgc3RyaXBBbmRDb2xsYXBzZSwgaXNGdW5jdGlvbiApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///105\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(52), __webpack_require__(66), // This is the only module that needs core/support\n__webpack_require__(107)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, rsingleTag, buildFragment, support) {\n  "use strict"; // Argument "data" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== "string") {\n      return [];\n    }\n\n    if (typeof context === "boolean") {\n      keepScripts = context;\n      context = false;\n    }\n\n    var base, parsed, scripts;\n\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document\'s URL (gh-2965)\n\n        base = context.createElement("base");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && []; // Single tag\n\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  };\n\n  return jQuery.parseHTML;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL3BhcnNlSFRNTC5qcz82ZTAwIl0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsImRvY3VtZW50IiwicnNpbmdsZVRhZyIsImJ1aWxkRnJhZ21lbnQiLCJzdXBwb3J0IiwicGFyc2VIVE1MIiwiZGF0YSIsImNvbnRleHQiLCJrZWVwU2NyaXB0cyIsImJhc2UiLCJwYXJzZWQiLCJzY3JpcHRzIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImxvY2F0aW9uIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZXhlYyIsImxlbmd0aCIsInJlbW92ZSIsIm1lcmdlIiwiY2hpbGROb2RlcyJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCxzQkFGTyxFQUdQLHVCQUhPLEVBSVAsdUJBSk8sRUFNUDtBQUNBLHdCQVBPLENBQUYsbUNBUUgsVUFBVUMsTUFBVixFQUFrQkMsUUFBbEIsRUFBNEJDLFVBQTVCLEVBQXdDQyxhQUF4QyxFQUF1REMsT0FBdkQsRUFBaUU7QUFFcEUsZUFGb0UsQ0FJcEU7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FKLFFBQU0sQ0FBQ0ssU0FBUCxHQUFtQixVQUFVQyxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QkMsV0FBekIsRUFBdUM7QUFDekQsUUFBSyxPQUFPRixJQUFQLEtBQWdCLFFBQXJCLEVBQWdDO0FBQy9CLGFBQU8sRUFBUDtBQUNBOztBQUNELFFBQUssT0FBT0MsT0FBUCxLQUFtQixTQUF4QixFQUFvQztBQUNuQ0MsaUJBQVcsR0FBR0QsT0FBZDtBQUNBQSxhQUFPLEdBQUcsS0FBVjtBQUNBOztBQUVELFFBQUlFLElBQUosRUFBVUMsTUFBVixFQUFrQkMsT0FBbEI7O0FBRUEsUUFBSyxDQUFDSixPQUFOLEVBQWdCO0FBRWY7QUFDQTtBQUNBLFVBQUtILE9BQU8sQ0FBQ1Esa0JBQWIsRUFBa0M7QUFDakNMLGVBQU8sR0FBR04sUUFBUSxDQUFDWSxjQUFULENBQXdCRCxrQkFBeEIsQ0FBNEMsRUFBNUMsQ0FBVixDQURpQyxDQUdqQztBQUNBO0FBQ0E7O0FBQ0FILFlBQUksR0FBR0YsT0FBTyxDQUFDTyxhQUFSLENBQXVCLE1BQXZCLENBQVA7QUFDQUwsWUFBSSxDQUFDTSxJQUFMLEdBQVlkLFFBQVEsQ0FBQ2UsUUFBVCxDQUFrQkQsSUFBOUI7QUFDQVIsZUFBTyxDQUFDVSxJQUFSLENBQWFDLFdBQWIsQ0FBMEJULElBQTFCO0FBQ0EsT0FURCxNQVNPO0FBQ05GLGVBQU8sR0FBR04sUUFBVjtBQUNBO0FBQ0Q7O0FBRURTLFVBQU0sR0FBR1IsVUFBVSxDQUFDaUIsSUFBWCxDQUFpQmIsSUFBakIsQ0FBVDtBQUNBSyxXQUFPLEdBQUcsQ0FBQ0gsV0FBRCxJQUFnQixFQUExQixDQTlCeUQsQ0FnQ3pEOztBQUNBLFFBQUtFLE1BQUwsRUFBYztBQUNiLGFBQU8sQ0FBRUgsT0FBTyxDQUFDTyxhQUFSLENBQXVCSixNQUFNLENBQUUsQ0FBRixDQUE3QixDQUFGLENBQVA7QUFDQTs7QUFFREEsVUFBTSxHQUFHUCxhQUFhLENBQUUsQ0FBRUcsSUFBRixDQUFGLEVBQVlDLE9BQVosRUFBcUJJLE9BQXJCLENBQXRCOztBQUVBLFFBQUtBLE9BQU8sSUFBSUEsT0FBTyxDQUFDUyxNQUF4QixFQUFpQztBQUNoQ3BCLFlBQU0sQ0FBRVcsT0FBRixDQUFOLENBQWtCVSxNQUFsQjtBQUNBOztBQUVELFdBQU9yQixNQUFNLENBQUNzQixLQUFQLENBQWMsRUFBZCxFQUFrQlosTUFBTSxDQUFDYSxVQUF6QixDQUFQO0FBQ0EsR0E1Q0Q7O0FBOENBLFNBQU92QixNQUFNLENBQUNLLFNBQWQ7QUFFQyxDQWhFSztBQUFBLG9HQUFOIiwiZmlsZSI6IjEwNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi92YXIvZG9jdW1lbnRcIixcblx0XCIuL3Zhci9yc2luZ2xlVGFnXCIsXG5cdFwiLi4vbWFuaXB1bGF0aW9uL2J1aWxkRnJhZ21lbnRcIixcblxuXHQvLyBUaGlzIGlzIHRoZSBvbmx5IG1vZHVsZSB0aGF0IG5lZWRzIGNvcmUvc3VwcG9ydFxuXHRcIi4vc3VwcG9ydFwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBkb2N1bWVudCwgcnNpbmdsZVRhZywgYnVpbGRGcmFnbWVudCwgc3VwcG9ydCApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5yZXR1cm4galF1ZXJ5LnBhcnNlSFRNTDtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///106\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, support) {\n  "use strict"; // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument("").body;\n    body.innerHTML = "<form></form><form></form>";\n    return body.childNodes.length === 2;\n  }();\n\n  return support;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9jb3JlL3N1cHBvcnQuanM/YzhmNyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJkb2N1bWVudCIsInN1cHBvcnQiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJib2R5IiwiaW1wbGVtZW50YXRpb24iLCJpbm5lckhUTUwiLCJjaGlsZE5vZGVzIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHVCQUZPLENBQUYsbUNBR0gsVUFBVUMsUUFBVixFQUFvQkMsT0FBcEIsRUFBOEI7QUFFakMsZUFGaUMsQ0FJakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUEsU0FBTyxDQUFDQyxrQkFBUixHQUErQixZQUFXO0FBQ3pDLFFBQUlDLElBQUksR0FBR0gsUUFBUSxDQUFDSSxjQUFULENBQXdCRixrQkFBeEIsQ0FBNEMsRUFBNUMsRUFBaURDLElBQTVEO0FBQ0FBLFFBQUksQ0FBQ0UsU0FBTCxHQUFpQiw0QkFBakI7QUFDQSxXQUFPRixJQUFJLENBQUNHLFVBQUwsQ0FBZ0JDLE1BQWhCLEtBQTJCLENBQWxDO0FBQ0EsR0FKNEIsRUFBN0I7O0FBTUEsU0FBT04sT0FBUDtBQUNDLENBbkJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTA3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vdmFyL2RvY3VtZW50XCIsXG5cdFwiLi4vdmFyL3N1cHBvcnRcIlxuXSwgZnVuY3Rpb24oIGRvY3VtZW50LCBzdXBwb3J0ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cbnJldHVybiBzdXBwb3J0O1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///107\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict"; // Attach a bunch of functions for handling common AJAX events\n\n  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9ldmVudC9hamF4LmpzPzEzZDIiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwiZWFjaCIsImkiLCJ0eXBlIiwiZm4iLCJvbiJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCx1QkFGTyxDQUFGLG1DQUdILFVBQVVDLE1BQVYsRUFBbUI7QUFFdEIsZUFGc0IsQ0FJdEI7O0FBQ0FBLFFBQU0sQ0FBQ0MsSUFBUCxDQUFhLENBQ1osV0FEWSxFQUVaLFVBRlksRUFHWixjQUhZLEVBSVosV0FKWSxFQUtaLGFBTFksRUFNWixVQU5ZLENBQWIsRUFPRyxVQUFVQyxDQUFWLEVBQWFDLElBQWIsRUFBb0I7QUFDdEJILFVBQU0sQ0FBQ0ksRUFBUCxDQUFXRCxJQUFYLElBQW9CLFVBQVVDLEVBQVYsRUFBZTtBQUNsQyxhQUFPLEtBQUtDLEVBQUwsQ0FBU0YsSUFBVCxFQUFlQyxFQUFmLENBQVA7QUFDQSxLQUZEO0FBR0EsR0FYRDtBQWFDLENBckJLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTA4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL2V2ZW50XCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///108\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(7), __webpack_require__(35)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9lZmZlY3RzL2FuaW1hdGVkU2VsZWN0b3IuanM/YzM5YiJdLCJuYW1lcyI6WyJkZWZpbmUiLCJqUXVlcnkiLCJleHByIiwicHNldWRvcyIsImFuaW1hdGVkIiwiZWxlbSIsImdyZXAiLCJ0aW1lcnMiLCJmbiIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUFBLGlHQUFRLENBQ1Asc0JBRE8sRUFFUCxzQkFGTyxFQUdQLHVCQUhPLENBQUYsbUNBSUgsVUFBVUMsTUFBVixFQUFtQjtBQUV0Qjs7QUFFQUEsUUFBTSxDQUFDQyxJQUFQLENBQVlDLE9BQVosQ0FBb0JDLFFBQXBCLEdBQStCLFVBQVVDLElBQVYsRUFBaUI7QUFDL0MsV0FBT0osTUFBTSxDQUFDSyxJQUFQLENBQWFMLE1BQU0sQ0FBQ00sTUFBcEIsRUFBNEIsVUFBVUMsRUFBVixFQUFlO0FBQ2pELGFBQU9ILElBQUksS0FBS0csRUFBRSxDQUFDSCxJQUFuQjtBQUNBLEtBRk0sRUFFSEksTUFGSjtBQUdBLEdBSkQ7QUFNQyxDQWRLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTA5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL3NlbGVjdG9yXCIsXG5cdFwiLi4vZWZmZWN0c1wiXG5dLCBmdW5jdGlvbiggalF1ZXJ5ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///109\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(6), __webpack_require__(27), __webpack_require__(3), __webpack_require__(39), __webpack_require__(68), __webpack_require__(69), __webpack_require__(40), __webpack_require__(21), __webpack_require__(8), __webpack_require__(23), __webpack_require__(7) // contains\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, document, documentElement, isFunction, rnumnonpx, curCSS, addGetHookIf, support, isWindow) {\n  "use strict";\n\n  jQuery.offset = {\n    setOffset: function (elem, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = jQuery.css(elem, "position"),\n          curElem = jQuery(elem),\n          props = {}; // Set position first, in-case top/left are set even on static elem\n\n      if (position === "static") {\n        elem.style.position = "relative";\n      }\n\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, "top");\n      curCSSLeft = jQuery.css(elem, "left");\n      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if ("using" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element\'s border box to the document origin\n    offset: function (options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n\n      var rect,\n          win,\n          elem = this[0];\n\n      if (!elem) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element\'s margin box to its offset parent\'s padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function () {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          doc,\n          elem = this[0],\n          parentOffset = {\n        top: 0,\n        left: 0\n      }; // position:fixed elements are offset from the viewport, which itself always has zero offset\n\n      if (jQuery.css(elem, "position") === "fixed") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.parentNode;\n        }\n\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);\n          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);\n        }\n      } // Subtract parent offsets and element margins\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function () {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n\n        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || documentElement;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: "pageXOffset",\n    scrollTop: "pageYOffset"\n  }, function (method, prop) {\n    var top = "pageYOffset" === prop;\n\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n\n  jQuery.each(["top", "left"], function (i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;\n      }\n    });\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///110\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(21), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, isWindow) {\n  "use strict"; // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n  jQuery.each({\n    Height: "height",\n    Width: "width"\n  }, function (name, type) {\n    jQuery.each({\n      padding: "inner" + name,\n      content: type,\n      "": "outer" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),\n            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");\n        return access(this, function (elem, type, value) {\n          var doc;\n\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n\n            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  return jQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9kaW1lbnNpb25zLmpzPzk1N2QiXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5IiwiYWNjZXNzIiwiaXNXaW5kb3ciLCJlYWNoIiwiSGVpZ2h0IiwiV2lkdGgiLCJuYW1lIiwidHlwZSIsInBhZGRpbmciLCJjb250ZW50IiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJmbiIsIm1hcmdpbiIsInZhbHVlIiwiY2hhaW5hYmxlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZXh0cmEiLCJlbGVtIiwiZG9jIiwiaW5kZXhPZiIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwibm9kZVR5cGUiLCJNYXRoIiwibWF4IiwiYm9keSIsInVuZGVmaW5lZCIsImNzcyIsInN0eWxlIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHVCQUZPLEVBR1AsdUJBSE8sRUFJUCx1QkFKTyxDQUFGLG1DQUtILFVBQVVDLE1BQVYsRUFBa0JDLE1BQWxCLEVBQTBCQyxRQUExQixFQUFxQztBQUV4QyxlQUZ3QyxDQUl4Qzs7QUFDQUYsUUFBTSxDQUFDRyxJQUFQLENBQWE7QUFBRUMsVUFBTSxFQUFFLFFBQVY7QUFBb0JDLFNBQUssRUFBRTtBQUEzQixHQUFiLEVBQW1ELFVBQVVDLElBQVYsRUFBZ0JDLElBQWhCLEVBQXVCO0FBQ3pFUCxVQUFNLENBQUNHLElBQVAsQ0FBYTtBQUFFSyxhQUFPLEVBQUUsVUFBVUYsSUFBckI7QUFBMkJHLGFBQU8sRUFBRUYsSUFBcEM7QUFBMEMsVUFBSSxVQUFVRDtBQUF4RCxLQUFiLEVBQ0MsVUFBVUksWUFBVixFQUF3QkMsUUFBeEIsRUFBbUM7QUFFbkM7QUFDQVgsWUFBTSxDQUFDWSxFQUFQLENBQVdELFFBQVgsSUFBd0IsVUFBVUUsTUFBVixFQUFrQkMsS0FBbEIsRUFBMEI7QUFDakQsWUFBSUMsU0FBUyxHQUFHQyxTQUFTLENBQUNDLE1BQVYsS0FBc0JQLFlBQVksSUFBSSxPQUFPRyxNQUFQLEtBQWtCLFNBQXhELENBQWhCO0FBQUEsWUFDQ0ssS0FBSyxHQUFHUixZQUFZLEtBQU1HLE1BQU0sS0FBSyxJQUFYLElBQW1CQyxLQUFLLEtBQUssSUFBN0IsR0FBb0MsUUFBcEMsR0FBK0MsUUFBckQsQ0FEckI7QUFHQSxlQUFPYixNQUFNLENBQUUsSUFBRixFQUFRLFVBQVVrQixJQUFWLEVBQWdCWixJQUFoQixFQUFzQk8sS0FBdEIsRUFBOEI7QUFDbEQsY0FBSU0sR0FBSjs7QUFFQSxjQUFLbEIsUUFBUSxDQUFFaUIsSUFBRixDQUFiLEVBQXdCO0FBRXZCO0FBQ0EsbUJBQU9SLFFBQVEsQ0FBQ1UsT0FBVCxDQUFrQixPQUFsQixNQUFnQyxDQUFoQyxHQUNORixJQUFJLENBQUUsVUFBVWIsSUFBWixDQURFLEdBRU5hLElBQUksQ0FBQ0csUUFBTCxDQUFjQyxlQUFkLENBQStCLFdBQVdqQixJQUExQyxDQUZEO0FBR0EsV0FUaUQsQ0FXbEQ7OztBQUNBLGNBQUthLElBQUksQ0FBQ0ssUUFBTCxLQUFrQixDQUF2QixFQUEyQjtBQUMxQkosZUFBRyxHQUFHRCxJQUFJLENBQUNJLGVBQVgsQ0FEMEIsQ0FHMUI7QUFDQTs7QUFDQSxtQkFBT0UsSUFBSSxDQUFDQyxHQUFMLENBQ05QLElBQUksQ0FBQ1EsSUFBTCxDQUFXLFdBQVdyQixJQUF0QixDQURNLEVBQ3dCYyxHQUFHLENBQUUsV0FBV2QsSUFBYixDQUQzQixFQUVOYSxJQUFJLENBQUNRLElBQUwsQ0FBVyxXQUFXckIsSUFBdEIsQ0FGTSxFQUV3QmMsR0FBRyxDQUFFLFdBQVdkLElBQWIsQ0FGM0IsRUFHTmMsR0FBRyxDQUFFLFdBQVdkLElBQWIsQ0FIRyxDQUFQO0FBS0E7O0FBRUQsaUJBQU9RLEtBQUssS0FBS2MsU0FBVixHQUVOO0FBQ0E1QixnQkFBTSxDQUFDNkIsR0FBUCxDQUFZVixJQUFaLEVBQWtCWixJQUFsQixFQUF3QlcsS0FBeEIsQ0FITSxHQUtOO0FBQ0FsQixnQkFBTSxDQUFDOEIsS0FBUCxDQUFjWCxJQUFkLEVBQW9CWixJQUFwQixFQUEwQk8sS0FBMUIsRUFBaUNJLEtBQWpDLENBTkQ7QUFPQSxTQS9CWSxFQStCVlgsSUEvQlUsRUErQkpRLFNBQVMsR0FBR0YsTUFBSCxHQUFZZSxTQS9CakIsRUErQjRCYixTQS9CNUIsQ0FBYjtBQWdDQSxPQXBDRDtBQXFDQSxLQXpDRDtBQTBDQSxHQTNDRDtBQTZDQSxTQUFPZixNQUFQO0FBQ0MsQ0F4REs7QUFBQSxvR0FBTiIsImZpbGUiOiIxMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuL2NvcmVcIixcblx0XCIuL2NvcmUvYWNjZXNzXCIsXG5cdFwiLi92YXIvaXNXaW5kb3dcIixcblx0XCIuL2Nzc1wiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBhY2Nlc3MsIGlzV2luZG93ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///111\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(12), __webpack_require__(22), __webpack_require__(14), __webpack_require__(3), __webpack_require__(21), __webpack_require__(24), __webpack_require__(113)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, nodeName, camelCase, toType, isFunction, isWindow, slice) {\n  "use strict";\n\n  jQuery.fn.extend({\n    bind: function (types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function (types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function (selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function (selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);\n    }\n  }); // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n\n    if (typeof context === "string") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    } // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n\n\n    if (!isFunction(fn)) {\n      return undefined;\n    } // Simulated bind\n\n\n    args = slice.call(arguments, 2);\n\n    proxy = function () {\n      return fn.apply(context || this, args.concat(slice.call(arguments)));\n    }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")\n    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9kZXByZWNhdGVkLmpzPzM1ODciXSwibmFtZXMiOlsiZGVmaW5lIiwialF1ZXJ5Iiwibm9kZU5hbWUiLCJjYW1lbENhc2UiLCJ0b1R5cGUiLCJpc0Z1bmN0aW9uIiwiaXNXaW5kb3ciLCJzbGljZSIsImZuIiwiZXh0ZW5kIiwiYmluZCIsInR5cGVzIiwiZGF0YSIsIm9uIiwidW5iaW5kIiwib2ZmIiwiZGVsZWdhdGUiLCJzZWxlY3RvciIsInVuZGVsZWdhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm94eSIsImNvbnRleHQiLCJ0bXAiLCJhcmdzIiwidW5kZWZpbmVkIiwiY2FsbCIsImFwcGx5IiwiY29uY2F0IiwiZ3VpZCIsImhvbGRSZWFkeSIsImhvbGQiLCJyZWFkeVdhaXQiLCJyZWFkeSIsImlzQXJyYXkiLCJBcnJheSIsInBhcnNlSlNPTiIsIkpTT04iLCJwYXJzZSIsInR5cGUiLCJub3ciLCJEYXRlIiwiaXNOdW1lcmljIiwib2JqIiwiaXNOYU4iLCJwYXJzZUZsb2F0Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUVQLHVCQUZPLEVBR1AsdUJBSE8sRUFJUCx1QkFKTyxFQUtQLHNCQUxPLEVBTVAsdUJBTk8sRUFPUCx1QkFQTyxFQVNQLHdCQVRPLENBQUYsbUNBVUgsVUFBVUMsTUFBVixFQUFrQkMsUUFBbEIsRUFBNEJDLFNBQTVCLEVBQXVDQyxNQUF2QyxFQUErQ0MsVUFBL0MsRUFBMkRDLFFBQTNELEVBQXFFQyxLQUFyRSxFQUE2RTtBQUVoRjs7QUFFQU4sUUFBTSxDQUFDTyxFQUFQLENBQVVDLE1BQVYsQ0FBa0I7QUFFakJDLFFBQUksRUFBRSxVQUFVQyxLQUFWLEVBQWlCQyxJQUFqQixFQUF1QkosRUFBdkIsRUFBNEI7QUFDakMsYUFBTyxLQUFLSyxFQUFMLENBQVNGLEtBQVQsRUFBZ0IsSUFBaEIsRUFBc0JDLElBQXRCLEVBQTRCSixFQUE1QixD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LElBQUksR0FBR3RDLE1BQU0sQ0FBQ3NDLElBQVAsQ0FBYUksR0FBYixDQUFYO0FBQ0EsV0FBTyxDQUFFSixJQUFJLEtBQUssUUFBVCxJQUFxQkEsSUFBSSxLQUFLLFFBQWhDLEtBRU47QUFDQTtBQUNBO0FBQ0EsS0FBQ0ssS0FBSyxDQUFFRCxHQUFHLEdBQUdFLFVBQVUsQ0FBRUYsR0FBRixDQUFsQixDQUxQO0FBTUEsR0FaRDtBQWNDLENBakdLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9jb3JlXCIsXG5cdFwiLi9jb3JlL25vZGVOYW1lXCIsXG5cdFwiLi9jb3JlL2NhbWVsQ2FzZVwiLFxuXHRcIi4vY29yZS90b1R5cGVcIixcblx0XCIuL3Zhci9pc0Z1bmN0aW9uXCIsXG5cdFwiLi92YXIvaXNXaW5kb3dcIixcblx0XCIuL3Zhci9zbGljZVwiLFxuXG5cdFwiLi9ldmVudC9hbGlhc1wiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBub2RlTmFtZSwgY2FtZWxDYXNlLCB0b1R5cGUsIGlzRnVuY3Rpb24sIGlzV2luZG93LCBzbGljZSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///112\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(17), __webpack_require__(43)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict";\n\n  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  });\n  jQuery.fn.extend({\n    hover: function (fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9ldmVudC9hbGlhcy5qcz82MWU3Il0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsImVhY2giLCJzcGxpdCIsImkiLCJuYW1lIiwiZm4iLCJkYXRhIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwib24iLCJ0cmlnZ2VyIiwiZXh0ZW5kIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxFQUdQLHVCQUhPLEVBSVAsdUJBSk8sQ0FBRixtQ0FLSCxVQUFVQyxNQUFWLEVBQW1CO0FBRXRCOztBQUVBQSxRQUFNLENBQUNDLElBQVAsQ0FBYSxDQUFFLDhEQUNkLHVFQURjLEdBRWQseURBRlksRUFFZ0RDLEtBRmhELENBRXVELEdBRnZELENBQWIsRUFHQyxVQUFVQyxDQUFWLEVBQWFDLElBQWIsRUFBb0I7QUFFcEI7QUFDQUosVUFBTSxDQUFDSyxFQUFQLENBQVdELElBQVgsSUFBb0IsVUFBVUUsSUFBVixFQUFnQkQsRUFBaEIsRUFBcUI7QUFDeEMsYUFBT0UsU0FBUyxDQUFDQyxNQUFWLEdBQW1CLENBQW5CLEdBQ04sS0FBS0MsRUFBTCxDQUFTTCxJQUFULEVBQWUsSUFBZixFQUFxQkUsSUFBckIsRUFBMkJELEVBQTNCLENBRE0sR0FFTixLQUFLSyxPQUFMLENBQWNOLElBQWQsQ0FGRDtBQUdBLEtBSkQ7QUFLQSxHQVhEO0FBYUFKLFFBQU0sQ0FBQ0ssRUFBUCxDQUFVTSxNQUFWLENBQWtCO0FBQ2pCQyxTQUFLLEVBQUUsVUFBVUMsTUFBVixFQUFrQkMsS0FBbEIsRUFBMEI7QUFDaEMsYUFBTyxLQUFLQyxVQUFMLENBQWlCRixNQUFqQixFQUEwQkcsVUFBMUIsQ0FBc0NGLEtBQUssSUFBSUQsTUFBL0MsQ0FBUDtBQUNBO0FBSGdCLEdBQWxCO0FBTUMsQ0E1Qks7QUFBQSxvR0FBTiIsImZpbGUiOiIxMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCIsXG5cblx0XCIuLi9ldmVudFwiLFxuXHRcIi4vdHJpZ2dlclwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxufSApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n  "use strict"; // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9leHBvcnRzL2FtZC5qcz9kOTM3Il0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUFBLGlLQUFRLENBQ1Asc0JBRE8sQ0FBRixtQ0FFSCxVQUFVQyxNQUFWLEVBQW1CO0FBRXRCLGVBRnNCLENBSXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBSyxJQUFMLEVBQWtEO0FBQ2pERCxxQ0FBa0IsRUFBWixtQ0FBZ0IsWUFBVztBQUNoQyxhQUFPQyxNQUFQO0FBQ0EsS0FGSztBQUFBLG9HQUFOO0FBR0E7QUFFQSxDQXpCSztBQUFBLG9HQUFOIiwiZmlsZSI6IjExNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///114\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, noGlobal) {\n  "use strict";\n\n  var // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$;\n\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n\n    return jQuery;\n  }; // Expose jQuery and $ identifiers, even in AMD\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (#13566)\n\n\n  if (!noGlobal) {\n    window.jQuery = window.$ = jQuery;\n  }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L3NyYy9leHBvcnRzL2dsb2JhbC5qcz80ZjQ0Il0sIm5hbWVzIjpbImRlZmluZSIsImpRdWVyeSIsIm5vR2xvYmFsIiwiX2pRdWVyeSIsIndpbmRvdyIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJkZWVwIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUdBQVEsQ0FDUCxzQkFETyxDQUFGLG1DQUVILFVBQVVDLE1BQVYsRUFBa0JDLFFBQWxCLEVBQTZCO0FBRWhDOztBQUVBLE1BRUM7QUFDQUMsU0FBTyxHQUFHQyxNQUFNLENBQUNILE1BSGxCO0FBQUEsTUFLQztBQUNBSSxJQUFFLEdBQUdELE1BQU0sQ0FBQ0UsQ0FOYjs7QUFRQUwsUUFBTSxDQUFDTSxVQUFQLEdBQW9CLFVBQVVDLElBQVYsRUFBaUI7QUFDcEMsUUFBS0osTUFBTSxDQUFDRSxDQUFQLEtBQWFMLE1BQWxCLEVBQTJCO0FBQzFCRyxZQUFNLENBQUNFLENBQVAsR0FBV0QsRUFBWDtBQUNBOztBQUVELFFBQUtHLElBQUksSUFBSUosTUFBTSxDQUFDSCxNQUFQLEtBQWtCQSxNQUEvQixFQUF3QztBQUN2Q0csWUFBTSxDQUFDSCxNQUFQLEdBQWdCRSxPQUFoQjtBQUNBOztBQUVELFdBQU9GLE1BQVA7QUFDQSxHQVZELENBWmdDLENBd0JoQztBQUNBO0FBQ0E7OztBQUNBLE1BQUssQ0FBQ0MsUUFBTixFQUFpQjtBQUNoQkUsVUFBTSxDQUFDSCxNQUFQLEdBQWdCRyxNQUFNLENBQUNFLENBQVAsR0FBV0wsTUFBM0I7QUFDQTtBQUVBLENBakNLO0FBQUEsb0dBQU4iLCJmaWxlIjoiMTE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBub0dsb2JhbCApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cbn0gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///115\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/jquery/src/jquery.js\nvar jquery = __webpack_require__(5);\nvar jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);\n\n// EXTERNAL MODULE: ./node_modules/backbone.marionette/lib/backbone.marionette.js\nvar backbone_marionette = __webpack_require__(76);\n\n// EXTERNAL MODULE: ./node_modules/backbone/backbone.js\nvar backbone = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./src/js/model/UserModel.js\n\nvar UserModel = backbone["Model"].extend({\n  defaults: {\n    login: "",\n    name: "",\n    isLogged: false,\n    state: "login",\n    currentCaseId: 0,\n    vocabularyLoaded: false\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/router/MyRouter.js\n\nvar MyRouter = backbone["Router"].extend({\n  user: null,\n  routes: {\n    "": "default",\n    //страница со списком дел\n    "login(/)": "login",\n    //страница логина\n    "registration": "registration",\n    //страница регистрации\n    "todo/:id(/)": "viewTodo",\n    //страница с просмотром дела\n    "todo/edit/:id": "editTodo",\n    //страница с редактированием дела\n    "*query": "default" //остальные страницы переходят на страницу со списком дел\n\n  },\n  initialize: function initialize(options) {\n    this.user = options.user;\n  },\n  "default": function _default() {\n    this.user.set({\n      state: ""\n    });\n  },\n  login: function login() {\n    this.user.set({\n      state: "login"\n    });\n  },\n  registration: function registration() {\n    this.user.set({\n      state: "registration"\n    });\n  },\n  viewTodo: function viewTodo(id) {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: id\n    });\n  },\n  editTodo: function editTodo(id) {\n    this.user.set({\n      state: "editTodo",\n      currentCaseId: id\n    });\n  }\n});\n\n// EXTERNAL MODULE: ./src/js/node_modules/backbone.marionette.js\nvar node_modules_backbone_marionette = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/js/node_modules/underscore.js\nvar underscore = __webpack_require__(2);\nvar underscore_default = /*#__PURE__*/__webpack_require__.n(underscore);\n\n// CONCATENATED MODULE: ./html/regionTemplate.html\n/* harmony default export */ var regionTemplate = ("<div id =\\"main\\">\\r\\n    <div id=\\"js-nav-region\\"></div>\\r\\n    <div id=\\"js-center-region\\"></div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/resources/UrlStorage.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//Класс для хранения url для обращения к серверу\nvar UrlStorage =\n/*#__PURE__*/\nfunction () {\n  function UrlStorage() {\n    _classCallCheck(this, UrlStorage);\n  }\n\n  _createClass(UrlStorage, null, [{\n    key: "getLocalStorageUrl",\n    //url на получение словаря\n    value: function getLocalStorageUrl() {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/locale/getLocale";\n    }\n  }, {\n    key: "checkUser",\n    value: function checkUser() {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/user/login";\n    }\n  }, {\n    key: "registrationUser",\n    value: function registrationUser() {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/user/registration";\n    }\n  }, {\n    key: "getAllCases",\n    value: function getAllCases() {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/case/getCases";\n    }\n  }, {\n    key: "addCase",\n    value: function addCase() {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/case/addCase";\n    }\n  }, {\n    key: "loadCase",\n    value: function loadCase(currentCaseId) {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/case/getCase/" + currentCaseId;\n    }\n  }, {\n    key: "deleteCase",\n    value: function deleteCase(currentCaseId) {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/case/deleteCase/" + currentCaseId;\n    }\n  }, {\n    key: "updateCase",\n    value: function updateCase(currentCaseId) {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/case/updateCase/" + currentCaseId;\n    }\n  }, {\n    key: "checkAccess",\n    value: function checkAccess(currentCaseId) {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/case/checkAccess/" + currentCaseId;\n    }\n  }, {\n    key: "sendPermissions",\n    value: function sendPermissions(currentCaseId) {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/case/sendPermissions/" + currentCaseId;\n    }\n  }, {\n    key: "getAllUsers",\n    value: function getAllUsers() {\n      return location.protocol + \'//\' + location.host + location.pathname + "app/user/getAllUsers/";\n    }\n  }]);\n\n  return UrlStorage;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/controllers/ResponseStatusHandler.js\nfunction ResponseStatusHandler_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ResponseStatusHandler_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ResponseStatusHandler_createClass(Constructor, protoProps, staticProps) { if (protoProps) ResponseStatusHandler_defineProperties(Constructor.prototype, protoProps); if (staticProps) ResponseStatusHandler_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ResponseStatusHandler =\n/*#__PURE__*/\nfunction () {\n  function ResponseStatusHandler() {\n    ResponseStatusHandler_classCallCheck(this, ResponseStatusHandler);\n  }\n\n  ResponseStatusHandler_createClass(ResponseStatusHandler, null, [{\n    key: "getLocaleResponse",\n    //обработка кодов после получения словаря\n    value: function getLocaleResponse(statusCode) {\n      var message = document.createElement(\'label\');\n\n      if (statusCode !== 200) {\n        message.style.color = "red";\n        message.textContent = "Dictionary wasn\'t loaded";\n      }\n    }\n  }]);\n\n  return ResponseStatusHandler;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/controllers/VocabularyController.js\nfunction VocabularyController_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction VocabularyController_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction VocabularyController_createClass(Constructor, protoProps, staticProps) { if (protoProps) VocabularyController_defineProperties(Constructor.prototype, protoProps); if (staticProps) VocabularyController_defineProperties(Constructor, staticProps); return Constructor; }\n\n//Класс для работы с локалью\nvar VocabularyController =\n/*#__PURE__*/\nfunction () {\n  function VocabularyController() {\n    VocabularyController_classCallCheck(this, VocabularyController);\n  }\n\n  VocabularyController_createClass(VocabularyController, null, [{\n    key: "ExtractTextFromVocabulary",\n    //Получить значение словаря по ключу\n    value: function ExtractTextFromVocabulary(key) {\n      var result;\n      JSON.parse(sessionStorage.getItem("vocabulary")).forEach(function (pair) {\n        if (pair.key === key) {\n          result = pair.value;\n        }\n      });\n      return result;\n    }\n  }]);\n\n  return VocabularyController;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/model/UserServer.js\n\nvar UserServer = backbone["Model"].extend({\n  defaults: {\n    login: "",\n    password: ""\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/controllers/RootController.js\nfunction RootController_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction RootController_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RootController_createClass(Constructor, protoProps, staticProps) { if (protoProps) RootController_defineProperties(Constructor.prototype, protoProps); if (staticProps) RootController_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar RootController_RootController =\n/*#__PURE__*/\nfunction () {\n  function RootController() {\n    RootController_classCallCheck(this, RootController);\n\n    _defineProperty(this, "user", null);\n  }\n\n  RootController_createClass(RootController, [{\n    key: "setUser",\n    value: function setUser(user) {\n      this.user = user;\n    } //Отправка запроса на получение надписей\n\n  }, {\n    key: "getLocaleStorage",\n    value: function getLocaleStorage() {\n      var _this = this;\n\n      var url = UrlStorage.getLocalStorageUrl();\n      var intermediateVocabulary = [];\n      fetch(url, {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        response.forEach(function (element) {\n          intermediateVocabulary.push(element);\n        });\n        sessionStorage.setItem("vocabulary", JSON.stringify(intermediateVocabulary));\n\n        _this.user.set({\n          vocabularyLoaded: true\n        });\n      })["catch"](function (response) {\n        ResponseStatusHandler.getLocaleResponse(response.status);\n      });\n    }\n  }, {\n    key: "checkUser",\n    value: function checkUser() {\n      var url = UrlStorage.checkUser();\n      var login = document.getElementById("loginFormName").value;\n      var password = document.getElementById("loginFormPass").value;\n      var currentUser = this.user;\n      var newUser = new UserServer({\n        login: login,\n        password: password\n      });\n      fetch(url, {\n        method: \'POST\',\n        body: JSON.stringify(newUser),\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        currentUser.set({\n          name: response.name,\n          isLogged: true,\n          state: "",\n          login: login\n        });\n        localStorage.setItem("user", JSON.stringify(currentUser));\n        console.log(currentUser);\n      })["catch"](function (error) {\n        document.getElementById("loginFormMessage").textContent = VocabularyController.ExtractTextFromVocabulary("loginFormMessage");\n        console.info(error);\n      });\n    }\n  }, {\n    key: "registrationUser",\n    value: function registrationUser() {\n      var url = UrlStorage.registrationUser();\n      var login = document.getElementById("login").value;\n      var password = document.getElementById("pass").value;\n      var name = document.getElementById("name").value;\n      var re = new RegExp("^ *$");\n\n      if (re.test(login) || re.test(password) || re.test(name)) {\n        document.getElementById("registrationMessage").textContent = VocabularyController.ExtractTextFromVocabulary("registrationEmpty");\n        setTimeout(function () {\n          document.getElementById("registrationMessage").textContent = "";\n        }, 3000);\n      } else {\n        var currentUser = this.user;\n        var newUser = new UserServer({\n          login: login,\n          password: password,\n          name: name\n        });\n        fetch(url, {\n          method: \'POST\',\n          body: JSON.stringify(newUser),\n          headers: {\n            \'Content-Type\': \'application/json\'\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (response) {\n          currentUser.set({\n            state: "login"\n          });\n        })["catch"](function (error) {\n          document.getElementById("registrationMessage").textContent = VocabularyController.ExtractTextFromVocabulary("registrationMessage");\n        });\n      }\n    }\n  }, {\n    key: "logOut",\n    value: function logOut() {\n      console.log("logOut");\n      this.user.set({\n        name: "",\n        isLogged: false,\n        state: "login"\n      });\n      localStorage.removeItem("user");\n    }\n  }]);\n\n  return RootController;\n}();\n\n\n// CONCATENATED MODULE: ./html/navTemplate.html\n/* harmony default export */ var navTemplate = ("<nav class=\\"navbar navbar-light\\" style=\\"background-color: #e3f2fd;\\r\\n     border-bottom: 1px solid black\\">\\r\\n      <a class=\\"navbar-brand py-0\\">\\r\\n        <img src=\\"Client/img/logo.png\\" width=\\"30\\" height=\\"30\\" class=\\"d-inline-block align-top\\" alt=\\"\\">\\r\\n        <span id=\\"navHeader\\"></span>\\r\\n      </a>\\r\\n    </nav>");\n// CONCATENATED MODULE: ./src/js/views/formViews/LoginNavBar.js\n\n\n\n\nvar LoginNavBar = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(navTemplate),\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("navHeader").textContent = VocabularyController.ExtractTextFromVocabulary("navHeader");\n  }\n});\n\n// CONCATENATED MODULE: ./html/navWhenLoggedTemplate.html\n/* harmony default export */ var navWhenLoggedTemplate = ("<nav class=\\"navbar navbar-light\\" style=\\"background-color: #e3f2fd;\\r\\n     border-bottom: 1px solid black\\">\\r\\n      <a class=\\"navbar-brand py-0\\" >\\r\\n        <img src=\\"Client/img/logo.png\\" width=\\"30\\" height=\\"30\\" class=\\"d-inline-block align-top\\" alt=\\"\\" id=\\"img\\">\\r\\n        <span id=\\"navLoggedHeader\\"></span>\\r\\n      </a>\\r\\n      <form class=\\"form-inline my-2 my-lg-0\\" style=\\"padding: 0; margin: 0\\">\\r\\n            <span style=\\"padding: 0 5px 0 0; margin: 0\\" id=\\"nameOfUser\\"></span>\\r\\n            <button class=\\"btn btn-link\\" id=\\"logout\\" style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button>\\r\\n        </form>\\r\\n    </nav>");\n// CONCATENATED MODULE: ./src/js/views/formViews/NavBar.js\n\n\n\n\n\nvar NavBar = node_modules_backbone_marionette["View"].extend({\n  user: null,\n  template: underscore_default.a.template(navWhenLoggedTemplate),\n  events: {\n    \'click #logout\': \'logoutClick\',\n    \'click #img\': \'imgClick\'\n  },\n  initialize: function initialize(options) {\n    this.user = options.user;\n  },\n  logoutClick: function logoutClick() {\n    console.log("logout");\n    var controller = new RootController_RootController();\n    controller.setUser(this.user);\n    controller.logOut();\n  },\n  imgClick: function imgClick() {\n    this.user.set({\n      state: ""\n    });\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("navLoggedHeader").textContent = VocabularyController.ExtractTextFromVocabulary("navLoggedHeader");\n    document.getElementById("logout").textContent = VocabularyController.ExtractTextFromVocabulary("logout");\n  }\n});\n\n// CONCATENATED MODULE: ./html/loginFormTemplate.html\n/* harmony default export */ var loginFormTemplate = ("<div class=\\"container-fluid\\">\\r\\n  <div class=\\"wrapper\\">\\r\\n  <div class=\\"row align-self-center justify-content-center\\">\\r\\n    <div class=\\"col-xl-3 col-lg-5 col-md-6 col-sm-8 col-xs-8 align-self-center\\">\\r\\n        <fieldset class=\\"loginForm\\">\\r\\n          <h1 class=\\"head\\" id=\\"loginFormHeader\\"></h1>\\r\\n\\r\\n          <table class=\\"labelAndTextForm\\">\\r\\n            <tr>\\r\\n              <td class=\\"leftCol\\"><label id=\\"loginFormLogin\\"></label></td>\\r\\n              <td class=\\"rightCol\\"><input type=\\"text\\" class=\\"form-control\\"\\r\\n                                          placeholder=\\"\\" id=\\"loginFormName\\" name=\\"name\\"></td>\\r\\n            </tr>\\r\\n\\r\\n            <tr>\\r\\n              <td class=\\"leftCol\\"><label id=\\"loginFormPassword\\"></label></td>\\r\\n              <td class=\\"rightCol\\"><input type=\\"password\\" class=\\"form-control\\"\\r\\n                                          placeholder=\\"\\" id=\\"loginFormPass\\" name=\\"pass\\"></td>\\r\\n            </tr>\\r\\n          </table>\\r\\n\\r\\n          <table class=\\"text\\">\\r\\n            <tr>\\r\\n            <td></td>\\r\\n              <td class=\\"txt\\"><span style=\\"margin: 3%; color:red\\" id=\\"loginFormMessage\\"></span> </td>\\r\\n            <td></td>\\r\\n            </tr>\\r\\n          </table>\\r\\n          \\r\\n          <table class=\\"button\\">\\r\\n            <tr>\\r\\n              <td></td>\\r\\n              <td class=\\"but\\">\\r\\n                <input type=\\"submit\\" style=\\"margin-bottom: 7%\\" class = \\"btn btn-outline-primary btn-block\\" id=\\"loginBut\\"/>\\r\\n              </td>\\r\\n              <td></td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <td></td>\\r\\n              <td class=\\"but\\">\\r\\n                <input type=\\"submit\\" class = \\"btn btn-outline-primary btn-block\\" id=\\"registrationBut\\"/>\\r\\n              </td>\\r\\n              <td></td>\\r\\n            </tr>\\r\\n          </table>\\r\\n                 \\r\\n        </fieldset>\\r\\n    </div>\\r\\n  </div>\\r\\n  </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/views/formViews/LoginForm.js\n\n\n\n\n\nvar LoginForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(loginFormTemplate),\n  user: null,\n  events: {\n    \'click #loginBut\': \'loginClick\',\n    \'click #registrationBut\': \'registrationClick\'\n  },\n  regions: {\n    \'centerRegion\': \'#js-center-region\'\n  },\n  initialize: function initialize(options) {\n    this.user = options.user;\n  },\n  loginClick: function loginClick() {\n    var controller = new RootController_RootController();\n    controller.setUser(this.user);\n    controller.checkUser();\n  },\n  registrationClick: function registrationClick() {\n    this.user.set({\n      state: "registration"\n    });\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("loginFormHeader").textContent = VocabularyController.ExtractTextFromVocabulary("loginFormHeader");\n    document.getElementById("loginFormLogin").textContent = VocabularyController.ExtractTextFromVocabulary("loginFormLogin");\n    document.getElementById("loginFormName").placeholder = VocabularyController.ExtractTextFromVocabulary("loginFormName");\n    document.getElementById("loginFormPassword").textContent = VocabularyController.ExtractTextFromVocabulary("loginFormPassword");\n    document.getElementById("loginFormPass").placeholder = VocabularyController.ExtractTextFromVocabulary("loginFormPass");\n    document.getElementById("loginBut").value = VocabularyController.ExtractTextFromVocabulary("loginBut");\n    document.getElementById("registrationBut").value = VocabularyController.ExtractTextFromVocabulary("registrationBut");\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/model/ListToggleModel.js\n\nvar ListToggleModel = backbone["Model"].extend({\n  defaults: {\n    click: false,\n    formState: "none",\n    previousState: "none"\n  }\n});\n\n// CONCATENATED MODULE: ./html/listRegionTemplate.html\n/* harmony default export */ var listRegionTemplate = ("<div id=\\"list-head-region\\"></div>\\r\\n<div id=\\"list-form-region\\"></div>\\r\\n<div id=\\"list-body-region\\"></div>\\r\\n<div id=\\"list-index-region\\"></div>");\n// CONCATENATED MODULE: ./src/js/model/CasesReadyModel.js\n\nvar CasesReadyModel = backbone["Model"].extend({\n  defaults: {\n    ready: false,\n    numOfCurrentPage: 1,\n    casesLength: 0,\n    occupied: false\n  }\n});\n\n// CONCATENATED MODULE: ./html/headListFormTemplate.html\n/* harmony default export */ var headListFormTemplate = ("<div class=\\"container-fluid\\">\\r\\n    <div class=\\"headWrapper\\">\\r\\n        <div class=\\"row\\">\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0 text-left\\"></div>\\r\\n            <div class=\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-xs-6 \\">\\r\\n                <h1 class=\\"listHead\\" id=\\"listHeadHeader\\"></h1>\\r\\n            </div>\\r\\n            <div class=\\"col-xl-4 col-lg-2 col-md-0 col-sm-0 col-xs-0\\">\\r\\n            </div>\\r\\n            <div class=\\"col-xl-3 col-lg-5 col-md-6 col-sm-7 col-xs-6 text-right\\">\\r\\n                <button class=\\"btn btn-secondary active myButton\\" type=\\"button\\" id=\\"headListAdd\\"></button>\\r\\n                <button class=\\"btn btn-secondary active myButton\\" type=\\"button\\" id=\\"headListFilter\\"></button>\\r\\n                <button class=\\"btn btn-secondary active myButton\\" type=\\"button\\" id=\\"headListExport\\"></button>\\r\\n            </div>\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/views/formViews/ListHeadForm.js\n\n\n\n\nvar ListHeadForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(headListFormTemplate),\n  toggle: null,\n  regions: {\n    \'firstRegion\': \'#list-head-region\'\n  },\n  events: {\n    \'click #headListAdd\': \'addClick\',\n    \'click #headListFilter\': \'filterClick\',\n    \'click #headListExport\': \'exportClick\'\n  },\n  initialize: function initialize(options) {\n    this.toggle = options.toggle;\n  },\n  addClick: function addClick() {\n    this.toggle.set({\n      formState: "add"\n    });\n\n    if (this.toggle.get("click")) {\n      this.toggle.set({\n        click: false\n      });\n    } else {\n      this.toggle.set({\n        click: true\n      });\n    }\n  },\n  filterClick: function filterClick() {\n    this.toggle.set({\n      formState: "filter"\n    });\n\n    if (this.toggle.get("click")) {\n      this.toggle.set({\n        click: false\n      });\n    } else {\n      this.toggle.set({\n        click: true\n      });\n    }\n  },\n  exportClick: function exportClick() {\n    this.toggle.set({\n      formState: "export"\n    });\n\n    if (this.toggle.get("click")) {\n      this.toggle.set({\n        click: false\n      });\n    } else {\n      this.toggle.set({\n        click: true\n      });\n    }\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("headListAdd").textContent = VocabularyController.ExtractTextFromVocabulary("headListAdd");\n    document.getElementById("headListFilter").textContent = VocabularyController.ExtractTextFromVocabulary("headListFilter");\n    document.getElementById("headListExport").textContent = VocabularyController.ExtractTextFromVocabulary("headListExport");\n  }\n});\n\n// CONCATENATED MODULE: ./html/addListTemplate.html\n/* harmony default export */ var addListTemplate = ("<div class=\\"container-fluid \\">\\r\\n    <div class=\\"listWrapper\\">\\r\\n        <div class=\\"row justify-content-start\\">\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n            <div class=\\"col-xl-10 col-lg-10 col-md-10 col-sm-12 col-xs-12 \\">\\r\\n                <fieldset class=\\"form\\">\\r\\n                    <table class=\\"addTable\\">\\r\\n                        <tr class=\\"addRow\\">\\r\\n                            <td class=\\"column0\\"></td>\\r\\n                            <td class=\\"column1\\"><label id=\\"addListTheme\\"></label></td>\\r\\n                            <td class=\\"column2\\"><input class=\\"myInput form-control\\" type=\\"text\\" id=\\"themeAdd\\"/></td>\\r\\n                            <td class=\\"column3\\"><label id=\\"addListPriority\\"></label></td>\\r\\n                            <td class=\\"column4\\"><select class=\\"mySelect form-control\\" id=\\"priorityAdd\\">\\r\\n                                <option selected></option>\\r\\n                                <option>Высокий</option>\\r\\n                                <option>Средний</option>\\r\\n                                <option>Низкий</option>\\r\\n                            </select></td>\\r\\n                            <td class=\\"column5\\">\\r\\n                                <label id=\\"addListCategory\\"></label>\\r\\n                            </td>\\r\\n                            <td class=\\"column6\\"><select class=\\"mySelect form-control\\" id=\\"category\\">\\r\\n                                <option selected></option>\\r\\n                                <option>Программирование</option>\\r\\n                                <option>Администрирование</option>\\r\\n                                <option>Обучение</option>\\r\\n                            </select></td>\\r\\n                            <td class=\\"column7\\"></td>\\r\\n                        </tr>\\r\\n                        <tr class=\\"addRow\\">\\r\\n                            <td class=\\"column0\\"></td>\\r\\n                            <td class=\\"column1\\"><label id=\\"addListDescription\\"></label></td>\\r\\n                            <td class=\\"column2\\">\\r\\n                                <textarea class=\\"myDescription form-control\\" type=\\"text\\" id=\\"descriptionAdd\\" \\r\\n                                rows=\\"3\\" maxlength=\\"256\\"></textarea>\\r\\n                            </td>\\r\\n                            <td class=\\"column3\\"><label id=\\"addListPlaneDate\\"></label></td>\\r\\n                            <td class=\\"column4\\">\\r\\n                            <input id=\\"plannedDateAdd\\" width=\\"70%\\" type=\\"datetime-local\\" class=\\"myInput form-control\\"/>\\r\\n                            </td>\\r\\n                            <td class=\\"column5\\">\\r\\n                                <label id=\\"addListAuthor\\"></label>\\r\\n                            </td>\\r\\n                            <td class=\\"column6\\">\\r\\n                                <input class=\\"myInput form-control\\" type=\\"text\\" id=\\"authorAdd\\" placeholder=\\"\\" readonly/>\\r\\n                            </td>\\r\\n                            <td class=\\"column7\\"></td>\\r\\n                        </tr>\\r\\n                        <tr class=\\"addRow\\">\\r\\n                            <td class=\\"column0\\"></td>\\r\\n                            <td class=\\"column1\\"><span class=\\"warn\\" id=\\"addListWarn\\"></span></td>\\r\\n                            <td class=\\"column2\\"></td>\\r\\n                            <td class=\\"column3\\"></td>\\r\\n                            <td class=\\"column4\\"></td>\\r\\n                            <td class=\\"column5\\"></td>\\r\\n                            <td class=\\"column6\\"><input type=\\"submit\\" class =\\"btn btn-secondary addListBtn\\"\\r\\n                                                       id=\\"addListApply\\" /></td>\\r\\n                            <td class=\\"column7\\"></td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                </fieldset>\\r\\n            </div>\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/model/CaseModel.js\n\nvar CaseModel = backbone["Model"].extend({\n  defaults: {\n    theme: "",\n    category: "",\n    planeDate: new Date(),\n    priority: "",\n    userName: "",\n    description: "",\n    done: false\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/controllers/ListController.js\nfunction ListController_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ListController_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ListController_createClass(Constructor, protoProps, staticProps) { if (protoProps) ListController_defineProperties(Constructor.prototype, protoProps); if (staticProps) ListController_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction ListController_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar ListController_ListController =\n/*#__PURE__*/\nfunction () {\n  function ListController() {\n    ListController_classCallCheck(this, ListController);\n\n    ListController_defineProperty(this, "cases", []);\n\n    ListController_defineProperty(this, "mark", null);\n  }\n\n  ListController_createClass(ListController, [{\n    key: "setCases",\n    value: function setCases(cases) {\n      this.cases = cases;\n    }\n  }, {\n    key: "setMark",\n    value: function setMark(mark) {\n      this.mark = mark;\n    }\n  }, {\n    key: "getAllCases",\n    value: function getAllCases() {\n      var _this = this;\n\n      var url = UrlStorage.getAllCases();\n      var intermediateCase = this.cases;\n      intermediateCase.splice(0, intermediateCase.length);\n      fetch(url, {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        response.forEach(function (doing) {\n          intermediateCase.push(doing);\n        });\n      }).then(function (response) {\n        var currentUser = JSON.parse(localStorage.getItem("user"));\n        document.getElementById("nameOfUser").textContent = currentUser.name;\n\n        _this.mark.set({\n          ready: true\n        });\n\n        _this.mark.set({\n          occupied: false\n        });\n      })["catch"](function (error) {\n        console.info(error);\n      });\n    }\n  }, {\n    key: "addCase",\n    value: function addCase() {\n      var _this2 = this;\n\n      var url = UrlStorage.addCase();\n      var currentUser = JSON.parse(localStorage.getItem("user"));\n      var theme = document.getElementById("themeAdd").value;\n      var priority = this.transformPriority();\n      var category = this.transformCategory();\n      var description = document.getElementById("descriptionAdd").value;\n      var planeDate = new Date(document.getElementById("plannedDateAdd").value);\n      var intermediateCase = new CaseModel({\n        theme: theme,\n        category: category,\n        planeDate: planeDate,\n        priority: priority,\n        userName: currentUser.login,\n        description: description\n      });\n      fetch(url, {\n        method: \'POST\',\n        body: JSON.stringify(intermediateCase),\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        _this2.getAllCases();\n      })["catch"](function (error) {\n        console.info(error);\n      });\n    }\n  }, {\n    key: "transformPriority",\n    value: function transformPriority() {\n      var priority = document.getElementById("priorityAdd").value;\n      var result = "";\n\n      if (priority === VocabularyController.ExtractTextFromVocabulary("optionsPriorityHigh")) {\n        result = "high";\n      } else if (priority === VocabularyController.ExtractTextFromVocabulary("optionsPriorityMedium")) {\n        result = "medium";\n      } else if (priority === VocabularyController.ExtractTextFromVocabulary("optionsPriorityLow")) {\n        result = "low";\n      }\n\n      console.log(priority + " " + result);\n      return result;\n    }\n  }, {\n    key: "transformCategory",\n    value: function transformCategory() {\n      var category = document.getElementById("category").value;\n      var result = "";\n\n      if (category === VocabularyController.ExtractTextFromVocabulary("optionsCategoryProgramming")) {\n        result = "programming";\n      } else if (category === VocabularyController.ExtractTextFromVocabulary("optionsCategoryAdministrating")) {\n        result = "administrating";\n      } else if (category === VocabularyController.ExtractTextFromVocabulary("optionsCategoryEducation")) {\n        result = "education";\n      }\n\n      return result;\n    }\n  }, {\n    key: "setDate",\n    value: function setDate(string) {\n      var date = string.split(" ");\n      var time = date[3].split(":");\n      var resultDate = new Date(date[2], date[1], date[0], time[0], time[1], time[2]);\n      return resultDate;\n    }\n  }]);\n\n  return ListController;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/views/formViews/AddListForm.js\n\n\n\n\n\nvar AddListForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(addListTemplate),\n  mark: null,\n  cases: null,\n  initialize: function initialize(options) {\n    this.mark = options.mark;\n    this.cases = options.cases;\n  },\n  events: {\n    \'click #addListApply\': \'addClick\'\n  },\n  regions: {\n    \'secondRegion\': \'#list-form-region\'\n  },\n  addClick: function addClick() {\n    if (!this.mark.get("occupied")) {\n      this.mark.set({\n        occupied: true\n      });\n      var mark = true;\n\n      if (document.getElementById("themeAdd").value === "") {\n        document.getElementById("themeAdd").style.borderColor = "#ff0000";\n        mark = false;\n      } else {\n        document.getElementById("themeAdd").style.borderColor = "";\n      }\n\n      if (document.getElementById("priorityAdd").value === "") {\n        document.getElementById("priorityAdd").style.borderColor = "#ff0000";\n        mark = false;\n      } else {\n        document.getElementById("priorityAdd").style.borderColor = "";\n      }\n\n      if (document.getElementById("plannedDateAdd").value === "") {\n        document.getElementById("plannedDateAdd").style.borderColor = "#ff0000";\n        mark = false;\n      } else {\n        document.getElementById("plannedDateAdd").style.borderColor = "";\n      }\n\n      if (document.getElementById("category").value === "") {\n        document.getElementById("category").style.borderColor = "#ff0000";\n        mark = false;\n      } else {\n        document.getElementById("category").style.borderColor = "";\n      }\n\n      if (mark) {\n        document.getElementById("addListWarn").style.visibility = "hidden";\n        var controller = new ListController_ListController();\n        controller.setMark(this.mark);\n        controller.setCases(this.cases);\n        controller.addCase();\n      } else {\n        document.getElementById("addListWarn").style.visibility = "visible";\n        document.getElementById("addListWarn").textContent = VocabularyController.ExtractTextFromVocabulary("addListWarn");\n      }\n    }\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("addListTheme").textContent = VocabularyController.ExtractTextFromVocabulary("addListTheme");\n    document.getElementById("addListPriority").textContent = VocabularyController.ExtractTextFromVocabulary("addListPriority");\n    document.getElementById("addListCategory").textContent = VocabularyController.ExtractTextFromVocabulary("addListCategory");\n    document.getElementById("addListDescription").textContent = VocabularyController.ExtractTextFromVocabulary("addListDescription");\n    document.getElementById("addListPlaneDate").textContent = VocabularyController.ExtractTextFromVocabulary("addListPlaneDate");\n    document.getElementById("addListAuthor").textContent = VocabularyController.ExtractTextFromVocabulary("addListAuthor");\n    document.getElementById("addListApply").value = VocabularyController.ExtractTextFromVocabulary("addListApply");\n    document.getElementById("authorAdd").placeholder = localStorage.getItem("user").name;\n  }\n});\n\n// CONCATENATED MODULE: ./html/filterTemplate.html\n/* harmony default export */ var filterTemplate = ("<div class=\\"container-fluid \\">\\r\\n    <div class=\\"listWrapper\\">\\r\\n    <div class=\\"row justify-content-start\\">\\r\\n        <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n        <div class=\\"col-xl-10 col-lg-10 col-md-10 col-sm-12 col-xs-12 \\">\\r\\n            <fieldset class=\\"form\\">\\r\\n                <table class=\\"filterTable\\">\\r\\n                    <tr class=\\"filterRow\\">\\r\\n                        <td class=\\"column0\\"></td>\\r\\n                        <td class=\\"column1\\"><label id=\\"filterTheme\\"></label></td>\\r\\n                        <td class=\\"column2\\"><input class=\\"myInput form-control\\" type=\\"text\\" id=\\"theme\\"/></td>\\r\\n                        <td class=\\"column3\\"><label id=\\"filterPriority\\"></label></td>\\r\\n                        <td class=\\"column4\\"><select class=\\"mySelect form-control\\" id=\\"priority\\">\\r\\n                            <option selected></option>\\r\\n                            <option>�������</option>\\r\\n                            <option>�������</option>\\r\\n                            <option>������</option>\\r\\n                        </select></td>\\r\\n                        <td class=\\"column5\\">\\r\\n                            <div class=\\"form-check\\">\\r\\n                                <input class=\\"form-check-input\\" type=\\"checkbox\\" value=\\"\\" id=\\"done\\">\\r\\n                                <label class=\\"form-check-label\\" for=\\"done\\" id=\\"filterDone\\"></label>\\r\\n                            </div>\\r\\n                        </td>\\r\\n                        <td class=\\"column6\\"></td>\\r\\n                        <td class=\\"column7\\"></td>\\r\\n                    </tr>\\r\\n                    <tr class=\\"filterRow\\">\\r\\n                        <td class=\\"column0\\"></td>\\r\\n                        <td class=\\"column1\\"><label id=\\"filterCategory\\"></label></td>\\r\\n                        <td class=\\"column2\\">\\r\\n                            <select class=\\"mySelect form-control\\" id=\\"category\\">\\r\\n                            <option selected></option>\\r\\n                            <option>����������������</option>\\r\\n                            <option>�����������������</option>\\r\\n                            <option>��������</option>\\r\\n                            </select>\\r\\n                        </td>\\r\\n                        <td class=\\"column3\\"><label id=\\"filterAuthor\\"></label></td>\\r\\n                        <td class=\\"column4\\">\\r\\n                            <input class=\\"myInput form-control\\" type=\\"text\\" id=\\"author\\"/>\\r\\n                        </td>\\r\\n                        <td class=\\"column5\\">\\r\\n                            <label id=\\"filterDoneWith\\"></label>\\r\\n                        </td>\\r\\n                        <td class=\\"column6\\">\\r\\n                            <input id=\\"doneWith\\" width=\\"70%\\" />\\r\\n                            <script>\\r\\n                                $(\'#doneWith\').datetimepicker({\\r\\n                                    uiLibrary: \'bootstrap4\',\\r\\n                                    modal: false,\\r\\n                                    footer: true,\\r\\n                                    format: \'dd mm yyyy HH:MM:ss\'\\r\\n                                });\\r\\n                            <\/script>\\r\\n                        </td>\\r\\n                        <td class=\\"column7\\"></td>\\r\\n                    </tr>\\r\\n                    <tr class=\\"filterRow\\">\\r\\n                        <td class=\\"column0\\"></td>\\r\\n                        <td class=\\"column1\\"><label id=\\"filterPlanningWith\\"></label></td>\\r\\n                        <td class=\\"column2\\"><input id=\\"planningWith\\" width=\\"70%\\" />\\r\\n                            <script>\\r\\n                                $(\'#planningWith\').datetimepicker({\\r\\n                                    uiLibrary: \'bootstrap4\',\\r\\n                                    modal: false,\\r\\n                                    footer: true,\\r\\n                                    format: \'dd mm yyyy HH:MM:ss\'\\r\\n                                });\\r\\n                            <\/script></td>\\r\\n                        <td class=\\"column3\\"><label id=\\"filterCreatedWith\\"></label></td>\\r\\n                        <td class=\\"column4\\"><input id=\\"createdWith\\" width=\\"70%\\" />\\r\\n                            <script>\\r\\n                                $(\'#createdWith\').datetimepicker({\\r\\n                                    uiLibrary: \'bootstrap4\',\\r\\n                                    modal: false,\\r\\n                                    footer: true,\\r\\n                                    format: \'dd mm yyyy HH:MM:ss\'\\r\\n                                });\\r\\n                            <\/script></td>\\r\\n                        <td class=\\"column5\\"><label id=\\"filterDoneBy\\"></label></td>\\r\\n                        <td class=\\"column6\\"><input id=\\"doneBy\\" width=\\"70%\\" />\\r\\n                            <script>\\r\\n                                $(\'#doneBy\').datetimepicker({\\r\\n                                    uiLibrary: \'bootstrap4\',\\r\\n                                    modal: false,\\r\\n                                    footer: true,\\r\\n                                    format: \'dd mm yyyy HH:MM:ss\'\\r\\n                                });\\r\\n                            <\/script></td>\\r\\n                        <td class=\\"column7\\"></td>\\r\\n                    </tr>\\r\\n                    <tr class=\\"filterRow\\">\\r\\n                        <td class=\\"column0\\"></td>\\r\\n                        <td class=\\"column1\\"><label id=\\"filterPlanningBy\\"></label></td>\\r\\n                        <td class=\\"column2\\"><input id=\\"planningBy\\" width=\\"70%\\" />\\r\\n                            <script>\\r\\n                                $(\'#planningBy\').datetimepicker({\\r\\n                                    uiLibrary: \'bootstrap4\',\\r\\n                                    modal: false,\\r\\n                                    footer: true,\\r\\n                                    format: \'dd mm yyyy HH:MM:ss\'\\r\\n                                });\\r\\n                            <\/script></td>\\r\\n                        <td class=\\"column3\\"><label id=\\"filterCreatedBy\\"></label></td>\\r\\n                        <td class=\\"column4\\"><input id=\\"createdBy\\" width=\\"70%\\" />\\r\\n                            <script>\\r\\n                                $(\'#createdBy\').datetimepicker({\\r\\n                                    uiLibrary: \'bootstrap4\',\\r\\n                                    modal: false,\\r\\n                                    footer: true,\\r\\n                                    format: \'dd mm yyyy HH:MM:ss\'\\r\\n                                });\\r\\n                            <\/script></td>\\r\\n                        <td class=\\"column5\\"></td>\\r\\n                        <td class=\\"column6\\"><input type=\\"submit\\" class =\\"btn btn-secondary\\"\\r\\n                                                id=\\"filterApply\\" value=\\"\\"/></td>\\r\\n                        <td class=\\"column7\\"></td>\\r\\n                    </tr>\\r\\n                </table>\\r\\n            </fieldset>\\r\\n        </div>\\r\\n        <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n    </div>\\r\\n    </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/views/formViews/FilterForm.js\n\n\n\n\nvar FilterForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(filterTemplate),\n  regions: {\n    \'secondRegion\': \'#list-form-region\'\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("filterTheme").textContent = VocabularyController.ExtractTextFromVocabulary("filterTheme");\n    document.getElementById("filterPriority").textContent = VocabularyController.ExtractTextFromVocabulary("filterPriority");\n    document.getElementById("filterDone").textContent = VocabularyController.ExtractTextFromVocabulary("filterDone");\n    document.getElementById("filterCategory").textContent = VocabularyController.ExtractTextFromVocabulary("filterCategory");\n    document.getElementById("filterAuthor").textContent = VocabularyController.ExtractTextFromVocabulary("filterAuthor");\n    document.getElementById("filterDoneWith").textContent = VocabularyController.ExtractTextFromVocabulary("filterDoneWith");\n    document.getElementById("filterPlanningWith").textContent = VocabularyController.ExtractTextFromVocabulary("filterPlanningWith");\n    document.getElementById("filterCreatedWith").textContent = VocabularyController.ExtractTextFromVocabulary("filterCreatedWith");\n    document.getElementById("filterDoneBy").textContent = VocabularyController.ExtractTextFromVocabulary("filterDoneBy");\n    document.getElementById("filterPlanningBy").textContent = VocabularyController.ExtractTextFromVocabulary("filterPlanningBy");\n    document.getElementById("filterCreatedBy").textContent = VocabularyController.ExtractTextFromVocabulary("filterCreatedBy");\n    document.getElementById("filterApply").value = VocabularyController.ExtractTextFromVocabulary("filterApply");\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/model/SortModel.js\n\nvar SortModel = backbone["Model"].extend({\n  defaults: {\n    theme: false,\n    category: false,\n    planeDate: false,\n    priority: false,\n    author: false,\n    createdDate: false,\n    done: false,\n    completeDate: false,\n    sortMode: "ascending"\n  }\n});\n\n// CONCATENATED MODULE: ./html/tableTemplate.html\n/* harmony default export */ var tableTemplate = ("<div class=\\"container-fluid \\">\\r\\n    <div class=\\"tableWrapper\\">\\r\\n        <div class=\\"row\\">\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0 text-left\\"></div>\\r\\n            <div class=\\"col-xl-10 col-lg-10 col-md-10 col-sm-12 col-xs-12 text-left\\">\\r\\n            <table class=\\"table table-striped table-bordered table-hover table-sm myTable\\">\\r\\n                <thead>\\r\\n                <tr>\\r\\n                    <th class=\\"col0\\" scope=\\"col\\">\\r\\n                        <span id=\\"tableTheme\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortTheme\\"> <i id=\\"themeIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col1\\" scope=\\"col\\">\\r\\n                        <span id=\\"tableCategory\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortCategory\\"> <i id=\\"categoryIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col2\\" scope=\\"col\\">\\r\\n                        <span id=\\"tablePlaneDate\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortPlaneDate\\"> <i id=\\"planeDateIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col3\\" scope=\\"col\\">\\r\\n                        <span id=\\"tablePriority\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortPriority\\"> <i id=\\"priorityIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col4\\" scope=\\"col\\">\\r\\n                        <span id=\\"tableAuthor\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortAuthor\\"> <i id=\\"authorIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col5\\" scope=\\"col\\">\\r\\n                        <span id=\\"tableCreatedDate\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortCreatedDate\\"> <i id=\\"createdDateIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col6\\" scope=\\"col\\">\\r\\n                        <span id=\\"tableDone\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortDone\\"> <i id=\\"doneIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col7\\" scope=\\"col\\">\\r\\n                        <span id=\\"tableCompleteDate\\"/>\\r\\n                        <button class=\\"btn sortBut\\" id=\\"sortCompleteDate\\"> <i id=\\"completeDateIcon\\" class=\\"fa fa-angle-down\\"></i> </button>\\r\\n                    </th>\\r\\n                    <th class=\\"col8\\" scope=\\"col\\" id=\\"tableAct\\"></th>\\r\\n                </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col00\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col01\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col02\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col03\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col04\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col05\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col06\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check0\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col07\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col08\\"><button class=\\"btn btn-link viewButton\\" id=\\"view0\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col10\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col11\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col12\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col13\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col14\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col15\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col16\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check1\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col17\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col18\\"><button class=\\"btn btn-link viewButton\\" id=\\"view1\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col20\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col21\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col22\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col23\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col24\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col25\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col26\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check2\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col27\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col28\\"><button class=\\"btn btn-link viewButton\\" id=\\"view2\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col30\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col31\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col32\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col33\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col34\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col35\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col36\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check3\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col37\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col38\\"><button class=\\"btn btn-link viewButton\\" id=\\"view3\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col40\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col41\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col42\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col43\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col44\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col45\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col46\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check4\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col47\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col48\\"><button class=\\"btn btn-link viewButton\\" id=\\"view4\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col50\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col51\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col52\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col53\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col54\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col55\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col56\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check5\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col57\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col58\\"><button class=\\"btn btn-link viewButton\\" id=\\"view5\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col60\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col61\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col62\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col63\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col64\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col65\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col66\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check6\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col67\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col68\\"><button class=\\"btn btn-link viewButton\\" id=\\"view6\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col70\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col71\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col72\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col73\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col74\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col75\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col76\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check7\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col77\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col78\\"><button class=\\"btn btn-link viewButton\\" id=\\"view7\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col80\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col81\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col82\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col83\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col84\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col85\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col86\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check8\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col87\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col88\\"><button class=\\"btn btn-link viewButton\\" id=\\"view8\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                        <td class=\\"col0\\" id=\\"col90\\"></td>\\r\\n                        <td class=\\"col1\\" id=\\"col91\\"></td>\\r\\n                        <td class=\\"col2\\" id=\\"col92\\"></td>\\r\\n                        <td class=\\"col3\\" id=\\"col93\\"></td>\\r\\n                        <td class=\\"col4\\" id=\\"col94\\"></td>\\r\\n                        <td class=\\"col5\\" id=\\"col95\\"></td>\\r\\n                        <td class=\\"col6\\" id=\\"col96\\"><input type=\\"checkbox\\" class=\\"myCheckbox\\" disabled id=\\"check9\\"></td>\\r\\n                        <td class=\\"col7\\" id=\\"col97\\"></td>\\r\\n                        <td class=\\"col8\\" id=\\"col98\\"><button class=\\"btn btn-link viewButton\\" id=\\"view9\\" \\r\\n                        style=\\"padding: 0; margin: 0\\" type=\\"submit\\"></button></td>\\r\\n                    </tr>\\r\\n                </tbody>\\r\\n            </table>\\r\\n            </div>\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0 text-left\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>");\n// EXTERNAL MODULE: ./src/js/node_modules/moment.js\nvar moment = __webpack_require__(19);\nvar moment_default = /*#__PURE__*/__webpack_require__.n(moment);\n\n// CONCATENATED MODULE: ./src/js/resources/SortConst.js\nfunction SortConst_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction SortConst_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SortConst_createClass(Constructor, protoProps, staticProps) { if (protoProps) SortConst_defineProperties(Constructor.prototype, protoProps); if (staticProps) SortConst_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SortConst =\n/*#__PURE__*/\nfunction () {\n  function SortConst() {\n    SortConst_classCallCheck(this, SortConst);\n  }\n\n  SortConst_createClass(SortConst, null, [{\n    key: "getCategory",\n    value: function getCategory() {\n      return "category";\n    }\n  }, {\n    key: "getCompleteDate",\n    value: function getCompleteDate() {\n      return "completeDate";\n    }\n  }, {\n    key: "getCreatedDate",\n    value: function getCreatedDate() {\n      return "createdDate";\n    }\n  }, {\n    key: "getPlaneDate",\n    value: function getPlaneDate() {\n      return "planeDate";\n    }\n  }, {\n    key: "getTheme",\n    value: function getTheme() {\n      return "theme";\n    }\n  }, {\n    key: "getAuthor",\n    value: function getAuthor() {\n      return "userName";\n    }\n  }, {\n    key: "getAscending",\n    value: function getAscending() {\n      return "ascending";\n    }\n  }, {\n    key: "getDescending",\n    value: function getDescending() {\n      return "descending";\n    }\n  }, {\n    key: "getThemeId",\n    value: function getThemeId() {\n      return "themeId";\n    }\n  }, {\n    key: "getDone",\n    value: function getDone() {\n      return "done";\n    }\n  }, {\n    key: "getPriority",\n    value: function getPriority() {\n      return "priority";\n    }\n  }, {\n    key: "getLowPriority",\n    value: function getLowPriority() {\n      return "low";\n    }\n  }, {\n    key: "getMiddlePriority",\n    value: function getMiddlePriority() {\n      return "medium";\n    }\n  }, {\n    key: "getHighPriority",\n    value: function getHighPriority() {\n      return "high";\n    }\n  }]);\n\n  return SortConst;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/views/formViews/TableForm.js\n\n\n\n\n\n\n\n\nvar TableForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(tableTemplate),\n  cases: null,\n  mark: null,\n  user: null,\n  sort: null,\n  sortModel: null,\n  listForLineNums: [],\n  modelEvents: {\n    \'change:ready\': \'readyChange\',\n    \'change:numOfCurrentPage\': \'loadTable\'\n  },\n  events: {\n    \'click #view0\': \'view0case\',\n    \'click #view1\': \'view1case\',\n    \'click #view2\': \'view2case\',\n    \'click #view3\': \'view3case\',\n    \'click #view4\': \'view4case\',\n    \'click #view5\': \'view5case\',\n    \'click #view6\': \'view6case\',\n    \'click #view7\': \'view7case\',\n    \'click #view8\': \'view8case\',\n    \'click #view9\': \'view9case\',\n    \'click #sortTheme\': \'sortTheme\',\n    \'click #sortCategory\': \'sortCategory\',\n    \'click #sortPlaneDate\': \'sortPlaneDate\',\n    \'click #sortPriority\': \'sortPriorityClick\',\n    \'click #sortAuthor\': \'sortAuthor\',\n    \'click #sortCreatedDate\': \'sortCreatedDate\',\n    \'click #sortDone\': \'sortDoneClick\',\n    \'click #sortCompleteDate\': \'sortCompleteDate\'\n  },\n  initialize: function initialize(options) {\n    this.mark = options.mark;\n    this.cases = options.cases;\n    this.user = options.user;\n    this.sort = options.sort;\n    this.sortModel = new SortModel({\n      theme: false,\n      category: false,\n      planeDate: false,\n      priority: false,\n      author: false,\n      createdDate: false,\n      done: false,\n      completeDate: false\n    });\n  },\n  regions: {\n    \'thirdRegion\': \'#list-body-region\'\n  },\n  onRender: function onRender() {\n    this.loadTable();\n  },\n  loadTable: function loadTable() {\n    var controller = new ListController_ListController();\n    controller.setCases(this.cases);\n    controller.setMark(this.mark);\n    controller.getAllCases();\n  },\n  readyChange: function readyChange() {\n    if (this.mark.get("ready") === true) {\n      var counter = 0;\n      this.listForLineNums.splice(0, this.listForLineNums.length);\n      this.clearTable();\n\n      if (this.sortModel.get("theme")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortText(SortConst.getAscending(), SortConst.getTheme()) : this.sortText(SortConst.getDescending(), SortConst.getTheme());\n      } else if (this.sortModel.get("category")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortText(SortConst.getAscending(), SortConst.getCategory()) : this.sortText(SortConst.getDescending(), SortConst.getCategory());\n      } else if (this.sortModel.get("planeDate")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortDate(SortConst.getAscending(), SortConst.getPlaneDate()) : this.sortDate(SortConst.getDescending(), SortConst.getPlaneDate());\n      } else if (this.sortModel.get("priority")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortPriority(SortConst.getAscending()) : this.sortPriority(SortConst.getDescending());\n      } else if (this.sortModel.get("author")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortText(SortConst.getAscending(), SortConst.getAuthor()) : this.sortText(SortConst.getDescending(), SortConst.getAuthor());\n      } else if (this.sortModel.get("createdDate")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortDate(SortConst.getAscending(), SortConst.getCreatedDate()) : this.sortDate(SortConst.getDescending(), SortConst.getCreatedDate());\n      } else if (this.sortModel.get("done")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortDone(SortConst.getAscending()) : this.sortDone(SortConst.getDescending());\n      } else if (this.sortModel.get("completeDate")) {\n        this.cases = this.sortModel.get("sortMode") === SortConst.getAscending() ? this.sortDate(SortConst.getAscending(), SortConst.getCompleteDate()) : this.sortDate(SortConst.getDescending(), SortConst.getCompleteDate());\n      }\n\n      for (var i = (this.mark.get("numOfCurrentPage") - 1) * 10; i < this.cases.length; i++) {\n        var currentCase = this.cases[i];\n\n        if (i < this.mark.get("numOfCurrentPage") * 10) {\n          this.listForLineNums.push(currentCase.themeId);\n          document.getElementById("col" + counter + "0").textContent = currentCase.theme;\n          document.getElementById("col" + counter + "1").textContent = this.getCategory(currentCase.category);\n          document.getElementById("col" + counter + "2").textContent = this.getDate(currentCase.planeDate);\n          document.getElementById("col" + counter + "3").textContent = this.getPriority(currentCase.priority);\n          document.getElementById("col" + counter + "4").textContent = currentCase.userName;\n          document.getElementById("col" + counter + "5").textContent = this.getDate(currentCase.createdDate);\n          document.getElementById("check" + counter).checked = currentCase.done;\n          document.getElementById("check" + counter).style.visibility = "visible";\n          document.getElementById("col" + counter + "7").textContent = this.getDate(currentCase.completeDate);\n          document.getElementById("view" + counter).style.visibility = "visible";\n          counter++;\n        }\n      }\n\n      this.mark.set({\n        casesLength: this.cases.length\n      });\n      this.mark.set({\n        ready: false\n      });\n    }\n  },\n  getPriority: function getPriority(priority) {\n    if (priority === "high") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsPriorityHigh");\n    } else if (priority === "medium") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsPriorityMedium");\n    } else if (priority === "low") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsPriorityLow");\n    }\n  },\n  getCategory: function getCategory(category) {\n    if (category === "programming") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsCategoryProgramming");\n    } else if (category === "administrating") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsCategoryAdministrating");\n    } else if (category === "education") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsCategoryEducation");\n    }\n  },\n  getDate: function getDate(date) {\n    if (date !== null) {\n      return moment_default()(new Date(date)).format(\'DD MM YYYY hh:mm:ss\');\n    } else {\n      return "";\n    }\n  },\n  clearTable: function clearTable() {\n    for (var i = 0; i < 10; i++) {\n      document.getElementById("col" + i + "0").textContent = "";\n      document.getElementById("col" + i + "1").textContent = "";\n      document.getElementById("col" + i + "2").textContent = "";\n      document.getElementById("col" + i + "3").textContent = "";\n      document.getElementById("col" + i + "4").textContent = "";\n      document.getElementById("col" + i + "5").textContent = "";\n      document.getElementById("check" + i).style.visibility = "hidden";\n      document.getElementById("col" + i + "7").textContent = "";\n      document.getElementById("view" + i).style.visibility = "hidden";\n    }\n  },\n  view0case: function view0case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[0]\n    });\n  },\n  view1case: function view1case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[1]\n    });\n  },\n  view2case: function view2case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[2]\n    });\n  },\n  view3case: function view3case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[3]\n    });\n  },\n  view4case: function view4case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[4]\n    });\n  },\n  view5case: function view5case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[5]\n    });\n  },\n  view6case: function view6case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[6]\n    });\n  },\n  view7case: function view7case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[7]\n    });\n  },\n  view8case: function view8case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[8]\n    });\n  },\n  view9case: function view9case() {\n    this.user.set({\n      state: "viewTodo",\n      currentCaseId: this.listForLineNums[9]\n    });\n  },\n  sortByThemeId: function sortByThemeId(arr) {\n    var size = arr.length;\n    var resultArray = [];\n\n    while (resultArray.length < size) {\n      var minId = arr[0][SortConst.getThemeId()];\n      var minIndex = 0;\n\n      for (var i = 0; i < arr.length; i++) {\n        if (minId > arr[i][SortConst.getThemeId()]) {\n          minId = arr[i][SortConst.getThemeId()];\n          minIndex = i;\n        }\n      }\n\n      resultArray.push(arr[minIndex]);\n      arr.splice(minIndex, 1);\n    }\n\n    return resultArray;\n  },\n  deleteByThemeId: function deleteByThemeId(deleteArr, pastCases) {\n    var arr = deleteArr.slice();\n\n    while (arr.length > 0) {\n      var deletedCase = arr[0];\n\n      for (var i = 0; i < pastCases.length; i++) {\n        if (deletedCase[SortConst.getThemeId()] === pastCases[i][SortConst.getThemeId()]) {\n          pastCases.splice(i, 1);\n        }\n      }\n\n      arr.shift();\n    }\n\n    return pastCases;\n  },\n  sortTheme: function sortTheme() {\n    if (this.sort.get("theme")) {\n      this.sort.set("theme", false);\n      document.getElementById("themeIcon").classList.remove("fa-angle-up");\n      document.getElementById("themeIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set("theme", true);\n      document.getElementById("themeIcon").classList.remove("fa-angle-down");\n      document.getElementById("themeIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getTheme());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortCategory: function sortCategory() {\n    if (this.sort.get("category")) {\n      this.sort.set("category", false);\n      document.getElementById("categoryIcon").classList.remove("fa-angle-up");\n      document.getElementById("categoryIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set("category", true);\n      document.getElementById("categoryIcon").classList.remove("fa-angle-down");\n      document.getElementById("categoryIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getCategory());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortPlaneDate: function sortPlaneDate() {\n    if (this.sort.get(SortConst.getPlaneDate())) {\n      this.sort.set(SortConst.getPlaneDate(), false);\n      document.getElementById("planeDateIcon").classList.remove("fa-angle-up");\n      document.getElementById("planeDateIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set(SortConst.getPlaneDate(), true);\n      document.getElementById("planeDateIcon").classList.remove("fa-angle-down");\n      document.getElementById("planeDateIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getPlaneDate());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortPriorityClick: function sortPriorityClick() {\n    if (this.sort.get("priority")) {\n      this.sort.set("priority", false);\n      document.getElementById("priorityIcon").classList.remove("fa-angle-up");\n      document.getElementById("priorityIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set("priority", true);\n      document.getElementById("priorityIcon").classList.remove("fa-angle-down");\n      document.getElementById("priorityIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getPriority());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortPriority: function sortPriority(sortMode) {\n    var pastCases = this.cases.slice();\n    var newCases = [];\n    var lowPriorityCases = [];\n    var middlePriorityCases = [];\n    var highPriorityCases = [];\n\n    for (var i = 0; i < pastCases.length; i++) {\n      if (pastCases[i][SortConst.getPriority()] === SortConst.getLowPriority()) {\n        lowPriorityCases.push(pastCases[i]);\n      } else if (pastCases[i][SortConst.getPriority()] === SortConst.getMiddlePriority()) {\n        middlePriorityCases.push(pastCases[i]);\n      } else {\n        highPriorityCases.push(pastCases[i]);\n      }\n    }\n\n    lowPriorityCases = this.sortByThemeId(lowPriorityCases);\n    middlePriorityCases = this.sortByThemeId(middlePriorityCases);\n    highPriorityCases = this.sortByThemeId(highPriorityCases);\n\n    if (sortMode === SortConst.getAscending()) {\n      lowPriorityCases.forEach(function (item) {\n        newCases.push(item);\n      });\n      middlePriorityCases.forEach(function (item) {\n        newCases.push(item);\n      });\n      highPriorityCases.forEach(function (item) {\n        newCases.push(item);\n      });\n    } else {\n      highPriorityCases.forEach(function (item) {\n        newCases.push(item);\n      });\n      middlePriorityCases.forEach(function (item) {\n        newCases.push(item);\n      });\n      lowPriorityCases.forEach(function (item) {\n        newCases.push(item);\n      });\n    }\n\n    return newCases;\n  },\n  sortAuthor: function sortAuthor() {\n    if (this.sort.get("author")) {\n      this.sort.set("author", false);\n      document.getElementById("authorIcon").classList.remove("fa-angle-up");\n      document.getElementById("authorIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set("author", true);\n      document.getElementById("authorIcon").classList.remove("fa-angle-down");\n      document.getElementById("authorIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getAuthor());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortCreatedDate: function sortCreatedDate() {\n    if (this.sort.get(SortConst.getCreatedDate())) {\n      this.sort.set(SortConst.getCreatedDate(), false);\n      document.getElementById("createdDateIcon").classList.remove("fa-angle-up");\n      document.getElementById("createdDateIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set(SortConst.getCreatedDate(), true);\n      document.getElementById("createdDateIcon").classList.remove("fa-angle-down");\n      document.getElementById("createdDateIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getCreatedDate());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortDoneClick: function sortDoneClick() {\n    if (this.sort.get("done")) {\n      this.sort.set("done", false);\n      document.getElementById("doneIcon").classList.remove("fa-angle-up");\n      document.getElementById("doneIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set("done", true);\n      document.getElementById("doneIcon").classList.remove("fa-angle-down");\n      document.getElementById("doneIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getDone());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortCompleteDate: function sortCompleteDate() {\n    if (this.sort.get(SortConst.getCompleteDate())) {\n      this.sort.set(SortConst.getCompleteDate(), false);\n      document.getElementById("completeDateIcon").classList.remove("fa-angle-up");\n      document.getElementById("completeDateIcon").classList.add("fa-angle-down");\n      this.sortModel.set({\n        sortMode: SortConst.getDescending()\n      });\n    } else {\n      this.sort.set(SortConst.getCompleteDate(), true);\n      document.getElementById("completeDateIcon").classList.remove("fa-angle-down");\n      document.getElementById("completeDateIcon").classList.add("fa-angle-up");\n      this.sortModel.set({\n        sortMode: SortConst.getAscending()\n      });\n    }\n\n    this.switchSortModel(SortConst.getCompleteDate());\n    this.mark.set({\n      "ready": true\n    });\n  },\n  sortDate: function sortDate(sortMode, dateType) {\n    var size = this.cases.length;\n    var pastCases = this.cases.slice();\n    var newCases = [];\n    var emptyDateCases = [];\n\n    for (var i = 0; i < pastCases.length; i++) {\n      if (pastCases[i][dateType] === null) {\n        emptyDateCases.push(pastCases[i]);\n      }\n    }\n\n    emptyDateCases = this.sortByThemeId(emptyDateCases);\n    this.deleteByThemeId(emptyDateCases, pastCases);\n\n    if (sortMode === SortConst.getAscending()) {\n      emptyDateCases.forEach(function (item) {\n        newCases.push(item);\n      });\n\n      while (newCases.length < size) {\n        var minDate = new Date(pastCases[0][dateType]);\n        var equalDate = [pastCases[0]];\n\n        for (var _i = 1; _i < pastCases.length; _i++) {\n          var currentDate = new Date(pastCases[_i][dateType]);\n\n          if (minDate > currentDate) {\n            minDate = currentDate;\n            equalDate = [pastCases[_i]];\n          } else if (minDate === currentDate) {\n            equalDate.push(pastCases[_i]);\n          }\n        }\n\n        if (equalDate.length > 1) {\n          equalDate = this.sortByThemeId(equalDate);\n        }\n\n        equalDate.forEach(function (item) {\n          newCases.push(item);\n        });\n        pastCases = this.deleteByThemeId(equalDate, pastCases);\n      }\n    } else {\n      while (newCases.length < size - emptyDateCases.length) {\n        var maxDate = new Date(pastCases[0][dateType]);\n        var _equalDate = [pastCases[0]];\n\n        for (var _i2 = 1; _i2 < pastCases.length; _i2++) {\n          var _currentDate = new Date(pastCases[_i2][dateType]);\n\n          if (maxDate < _currentDate) {\n            maxDate = _currentDate;\n            _equalDate = [pastCases[_i2]];\n          } else if (maxDate === _currentDate) {\n            _equalDate.push(pastCases[_i2]);\n          }\n        }\n\n        if (_equalDate.length > 1) {\n          _equalDate = this.sortByThemeId(_equalDate);\n        }\n\n        _equalDate.forEach(function (item) {\n          newCases.push(item);\n        });\n\n        pastCases = this.deleteByThemeId(_equalDate, pastCases);\n      }\n\n      emptyDateCases.forEach(function (item) {\n        newCases.push(item);\n      });\n    }\n\n    return newCases;\n  },\n  sortText: function sortText(sortMode, textType) {\n    var size = this.cases.length;\n    var pastCases = this.cases.slice();\n    var newCases = [];\n    var emptyTextCases = [];\n\n    for (var i = 0; i < pastCases.length; i++) {\n      if (pastCases[i][textType] === null) {\n        emptyTextCases.push(pastCases[i]);\n      }\n    }\n\n    emptyTextCases = this.sortByThemeId(emptyTextCases);\n    this.deleteByThemeId(emptyTextCases, pastCases);\n\n    if (sortMode === SortConst.getAscending()) {\n      emptyTextCases.forEach(function (item) {\n        newCases.push(item);\n      });\n\n      while (newCases.length < size) {\n        var minText = pastCases[0][textType];\n        var equalText = [pastCases[0]];\n\n        for (var _i3 = 1; _i3 < pastCases.length; _i3++) {\n          var currentText = pastCases[_i3][textType];\n\n          if (minText > currentText) {\n            minText = currentText;\n            equalText = [pastCases[_i3]];\n          } else if (minText === currentText) {\n            equalText.push(pastCases[_i3]);\n          }\n        }\n\n        if (equalText.length > 1) {\n          equalText = this.sortByThemeId(equalText);\n        }\n\n        equalText.forEach(function (item) {\n          newCases.push(item);\n        });\n        pastCases = this.deleteByThemeId(equalText, pastCases);\n      }\n    } else {\n      while (newCases.length < size) {\n        var maxText = pastCases[0][textType];\n        var _equalText = [pastCases[0]];\n\n        for (var _i4 = 1; _i4 < pastCases.length; _i4++) {\n          var _currentText = pastCases[_i4][textType];\n\n          if (maxText < _currentText) {\n            maxText = _currentText;\n            _equalText = [pastCases[_i4]];\n          } else if (maxText === _currentText) {\n            _equalText.push(pastCases[_i4]);\n          }\n        }\n\n        if (_equalText.length > 1) {\n          _equalText = this.sortByThemeId(_equalText);\n        }\n\n        _equalText.forEach(function (item) {\n          newCases.push(item);\n        });\n\n        emptyTextCases.forEach(function (item) {\n          newCases.push(item);\n        });\n        pastCases = this.deleteByThemeId(_equalText, pastCases);\n      }\n    }\n\n    return newCases;\n  },\n  sortDone: function sortDone(sortMode) {\n    var pastCases = this.cases.slice();\n    var newCases = [];\n    var doneCases = [];\n    var undoneCases = [];\n\n    for (var i = 0; i < pastCases.length; i++) {\n      if (pastCases[i][SortConst.getDone()]) {\n        doneCases.push(pastCases[i]);\n      } else {\n        undoneCases.push(pastCases[i]);\n      }\n    }\n\n    doneCases = this.sortByThemeId(doneCases);\n    undoneCases = this.sortByThemeId(undoneCases);\n\n    if (sortMode === SortConst.getAscending()) {\n      undoneCases.forEach(function (item) {\n        newCases.push(item);\n      });\n      doneCases.forEach(function (item) {\n        newCases.push(item);\n      });\n    } else {\n      doneCases.forEach(function (item) {\n        newCases.push(item);\n      });\n      undoneCases.forEach(function (item) {\n        newCases.push(item);\n      });\n    }\n\n    return newCases;\n  },\n  switchSortModel: function switchSortModel(SortType) {\n    if (SortType === SortConst.getAuthor()) {\n      this.sortModel.set({\n        theme: false,\n        category: false,\n        planeDate: false,\n        priority: false,\n        author: true,\n        createdDate: false,\n        done: false,\n        completeDate: false\n      });\n    } else if (SortType === SortConst.getCategory()) {\n      this.sortModel.set({\n        theme: false,\n        category: true,\n        planeDate: false,\n        priority: false,\n        author: false,\n        createdDate: false,\n        done: false,\n        completeDate: false\n      });\n    } else if (SortType === SortConst.getTheme()) {\n      this.sortModel.set({\n        theme: true,\n        category: false,\n        planeDate: false,\n        priority: false,\n        author: false,\n        createdDate: false,\n        done: false,\n        completeDate: false\n      });\n    } else if (SortType === SortConst.getCompleteDate()) {\n      this.sortModel.set({\n        theme: false,\n        category: false,\n        planeDate: false,\n        priority: false,\n        author: false,\n        createdDate: false,\n        done: false,\n        completeDate: true\n      });\n    } else if (SortType === SortConst.getCreatedDate()) {\n      this.sortModel.set({\n        theme: false,\n        category: false,\n        planeDate: false,\n        priority: false,\n        author: false,\n        createdDate: true,\n        done: false,\n        completeDate: false\n      });\n    } else if (SortType === SortConst.getPlaneDate()) {\n      this.sortModel.set({\n        theme: false,\n        category: false,\n        planeDate: true,\n        priority: false,\n        author: false,\n        createdDate: false,\n        done: false,\n        completeDate: false\n      });\n    } else if (SortType === SortConst.getDone()) {\n      this.sortModel.set({\n        theme: false,\n        category: false,\n        planeDate: false,\n        priority: false,\n        author: false,\n        createdDate: false,\n        done: true,\n        completeDate: false\n      });\n    } else if (SortType === SortConst.getPriority()) {\n      this.sortModel.set({\n        theme: false,\n        category: false,\n        planeDate: false,\n        priority: true,\n        author: false,\n        createdDate: false,\n        done: false,\n        completeDate: false\n      });\n    }\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("tableTheme").textContent = VocabularyController.ExtractTextFromVocabulary("tableTheme");\n    document.getElementById("tableCategory").textContent = VocabularyController.ExtractTextFromVocabulary("tableCategory");\n    document.getElementById("tablePlaneDate").textContent = VocabularyController.ExtractTextFromVocabulary("tablePlaneDate");\n    document.getElementById("tablePriority").textContent = VocabularyController.ExtractTextFromVocabulary("tablePriority");\n    document.getElementById("tableAuthor").textContent = VocabularyController.ExtractTextFromVocabulary("tableAuthor");\n    document.getElementById("tableCreatedDate").textContent = VocabularyController.ExtractTextFromVocabulary("tableCreatedDate");\n    document.getElementById("tableDone").textContent = VocabularyController.ExtractTextFromVocabulary("tableDone");\n    document.getElementById("tableCompleteDate").textContent = VocabularyController.ExtractTextFromVocabulary("tableCompleteDate");\n    document.getElementById("tableAct").textContent = VocabularyController.ExtractTextFromVocabulary("tableAct");\n    document.getElementById("view0").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view1").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view2").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view3").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view4").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view5").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view6").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view7").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view8").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n    document.getElementById("view9").textContent = VocabularyController.ExtractTextFromVocabulary("tableView");\n  }\n});\n\n// CONCATENATED MODULE: ./html/indexTemplate.html\n/* harmony default export */ var indexTemplate = ("<div class=\\"container-fluid mt-2\\">\\r\\n    <div class=\\"row\\">\\r\\n        <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n        <div class=\\"col-xl-11 col-lg-11 col-md-12 col-sm-12 col-xs-12 text-left\\">\\r\\n            <div class=\\"btn-group mr-2\\" role=\\"group\\" aria-label=\\"First group\\" id=\\"page-group\\">\\r\\n                <button type=\\"button\\" class=\\"btn btn-outline-secondary indexButton\\">1</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/views/formViews/IndexForm.js\n\n\n\n\nvar IndexForm = node_modules_backbone_marionette["View"].extend({\n  mark: null,\n  amountOfPages: null,\n  template: underscore_default.a.template(indexTemplate),\n  modelEvents: {\n    \'change:casesLength\': \'lengthChange\',\n    \'change:ready\': \'showIndexes\'\n  },\n  initialize: function initialize(options) {\n    this.mark = options.mark;\n    this.amountOfPages = 1;\n  },\n  lengthChange: function lengthChange() {\n    var amountOfPages = Math.floor(this.mark.get("casesLength") / 10);\n    var currentPage = this.mark.get("numOfCurrentPage");\n\n    if (this.mark.get("casesLength") % 10 !== 0) {\n      amountOfPages++;\n    }\n\n    if (currentPage > amountOfPages) {\n      while (currentPage > amountOfPages) {\n        currentPage--;\n      }\n\n      this.amountOfPages = amountOfPages;\n      this.mark.set({\n        numOfCurrentPage: currentPage\n      });\n    } else if (this.amountOfPages !== amountOfPages) {\n      this.amountOfPages = amountOfPages;\n      this.showIndexes();\n    }\n  },\n  showIndexes: function showIndexes() {\n    var buttonGroup = document.getElementById("page-group");\n    var mark = this.mark;\n    var currentPage = mark.get("numOfCurrentPage");\n\n    while (buttonGroup.lastChild) {\n      buttonGroup.removeChild(buttonGroup.lastChild);\n    }\n\n    if (this.amountOfPages <= 5) {\n      for (var i = 1; i <= this.amountOfPages; i++) {\n        buttonGroup.appendChild(this.createButton(mark, i));\n      }\n    } else {\n      if (currentPage < 3) {\n        for (var _i = 1; _i <= 3; _i++) {\n          buttonGroup.appendChild(this.createButton(mark, _i));\n        }\n\n        buttonGroup.appendChild(this.createThreeDots());\n        buttonGroup.appendChild(this.createButton(mark, this.amountOfPages));\n      } else if (currentPage >= this.amountOfPages - 2) {\n        buttonGroup.appendChild(this.createBeginButton(mark));\n\n        for (var _i2 = currentPage - 1; _i2 <= this.amountOfPages; _i2++) {\n          buttonGroup.appendChild(this.createButton(mark, _i2));\n        }\n      } else {\n        buttonGroup.appendChild(this.createBeginButton(mark));\n\n        for (var _i3 = currentPage - 1; _i3 <= currentPage + 1; _i3++) {\n          buttonGroup.appendChild(this.createButton(mark, _i3));\n        }\n\n        buttonGroup.appendChild(this.createThreeDots());\n        buttonGroup.appendChild(this.createButton(mark, this.amountOfPages));\n      }\n    }\n  },\n  createButton: function createButton(mark, i) {\n    var elem = document.createElement("button");\n    var access = this.mark.get("clickAccess");\n    elem.classList.add(\'btn\');\n\n    if (mark.get("numOfCurrentPage") === i) {\n      elem.classList.add(\'btn-secondary\');\n    } else {\n      elem.classList.add(\'btn-outline-secondary\');\n    }\n\n    elem.classList.add(\'indexButton\');\n    elem.textContent = "" + i;\n    elem.addEventListener("click", function () {\n      mark.set({\n        numOfCurrentPage: i\n      });\n    });\n    return elem;\n  },\n  createThreeDots: function createThreeDots() {\n    var elem = document.createElement("span");\n    elem.textContent = "...";\n    elem.classList.add(\'threeDots\');\n    return elem;\n  },\n  createBeginButton: function createBeginButton(mark) {\n    var elem = document.createElement("button");\n    elem.classList.add(\'btn\');\n    elem.classList.add(\'btn-outline-secondary\');\n    elem.classList.add(\'indexButton\');\n    elem.textContent = VocabularyController.ExtractTextFromVocabulary("indexBegin");\n    ;\n    elem.addEventListener("click", function () {\n      mark.set({\n        numOfCurrentPage: 1\n      });\n    });\n    return elem;\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/views/formViews/ListForm.js\n\n\n\n\n\n\n\n\n\n\n\nvar ListForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(listRegionTemplate),\n  toggle: null,\n  mark: null,\n  user: null,\n  cases: [],\n  modelEvents: {\n    \'change:click\': \'clickChange\'\n  },\n  regions: {\n    \'firstRegion\': \'#list-head-region\',\n    \'secondRegion\': \'#list-form-region\',\n    \'thirdRegion\': \'#list-body-region\',\n    \'fourthRegion\': \'#list-index-region\'\n  },\n  initialize: function initialize(options) {\n    this.toggle = options.toggle;\n    this.mark = new CasesReadyModel();\n    this.mark.set({\n      ready: false,\n      num: 1\n    });\n    this.user = options.user;\n  },\n  onRender: function onRender() {\n    this.showHeadForm();\n    this.showBodyForm();\n    this.showIndexForm();\n  },\n  clickChange: function clickChange() {\n    if (this.toggle.get("formState") === "none") {\n      this.getRegion(\'secondRegion\').empty();\n      this.toggle.set({\n        previousState: "none"\n      });\n    } else if (this.toggle.get("formState") === "add") {\n      if (this.toggle.get("previousState") === "add") {\n        this.getRegion(\'secondRegion\').empty();\n        this.toggle.set({\n          previousState: "none"\n        });\n      } else {\n        this.showAddForm();\n        this.toggle.set({\n          previousState: "add"\n        });\n      }\n    } else if (this.toggle.get("formState") === "filter") {\n      if (this.toggle.get("previousState") === "filter") {\n        this.getRegion(\'secondRegion\').empty();\n        this.toggle.set({\n          previousState: "none"\n        });\n      } else {\n        this.showFilterForm();\n        this.toggle.set({\n          previousState: "filter"\n        });\n      }\n    } else if (this.toggle.get("formState") === "export") {\n      this.getRegion(\'secondRegion\').empty();\n      this.toggle.set({\n        previousState: "none"\n      });\n    }\n  },\n  showHeadForm: function showHeadForm() {\n    var region = this.getRegion(\'firstRegion\');\n    var listHeadForm = new ListHeadForm({\n      toggle: this.toggle\n    });\n    region.show(listHeadForm);\n  },\n  showAddForm: function showAddForm() {\n    var currentUser = JSON.parse(localStorage.getItem("user"));\n    var region = this.getRegion(\'secondRegion\');\n    var addForm = new AddListForm({\n      mark: this.mark,\n      cases: this.cases\n    });\n    region.show(addForm);\n    document.getElementById("authorAdd").placeholder = currentUser.name;\n  },\n  showFilterForm: function showFilterForm() {\n    var region = this.getRegion(\'secondRegion\');\n    var filterForm = new FilterForm();\n    region.show(filterForm);\n  },\n  showBodyForm: function showBodyForm() {\n    var region = this.getRegion(\'thirdRegion\');\n    var sort = new SortModel({\n      theme: false,\n      category: false,\n      planeDate: false,\n      priority: false,\n      author: false,\n      createdDate: false,\n      done: false,\n      completeDate: false\n    });\n    this.mark.set({\n      ready: false\n    });\n    var tableForm = new TableForm({\n      model: this.mark,\n      mark: this.mark,\n      cases: this.cases,\n      user: this.user,\n      sort: sort\n    });\n    region.show(tableForm);\n  },\n  showIndexForm: function showIndexForm() {\n    var region = this.getRegion(\'fourthRegion\');\n    var indexForm = new IndexForm({\n      model: this.mark,\n      mark: this.mark\n    });\n    region.show(indexForm);\n  }\n});\n\n// CONCATENATED MODULE: ./html/registrationFormTemplate.html\n/* harmony default export */ var registrationFormTemplate = ("<div class=\\"container-fluid\\">\\r\\n  <div class=\\"wrapper\\">\\r\\n  <div class=\\"row align-self-center justify-content-center\\">\\r\\n    <div class=\\"col-xl-3 col-lg-5 col-md-6 col-sm-8 col-xs-8 align-self-center\\">\\r\\n        <fieldset class=\\"loginForm\\">\\r\\n          <h1 class=\\"head\\" id=\\"registrationHeader\\"></h1>\\r\\n\\r\\n          <table class=\\"labelAndTextForm\\">\\r\\n            <tr>\\r\\n              <td class=\\"leftCol\\"><label id=\\"registrationLogin\\"></label></td>\\r\\n              <td class=\\"rightCol\\"><input type=\\"text\\" class=\\"form-control\\" id=\\"login\\" name=\\"login\\"></td>\\r\\n            </tr>\\r\\n\\r\\n            <tr>\\r\\n              <td class=\\"leftCol\\"><label id=\\"registrationPassword\\"></label></td>\\r\\n              <td class=\\"rightCol\\"><input type=\\"password\\" class=\\"form-control\\" id=\\"pass\\" name=\\"pass\\"></td>\\r\\n            </tr>\\r\\n            \\r\\n            <tr>\\r\\n              <td class=\\"leftCol\\"><label>Name:</label></td>\\r\\n              <td class=\\"rightCol\\"><input type=\\"text\\" class=\\"form-control\\" id=\\"name\\" name=\\"name\\"></td>\\r\\n            </tr>\\r\\n          </table>\\r\\n          \\r\\n          <table class=\\"text\\">\\r\\n            <tr>\\r\\n            <td></td>\\r\\n              <td class=\\"txt\\"><span style=\\"margin 3%; color:red\\" id=\\"registrationMessage\\"></span> </td>\\r\\n            <td></td>\\r\\n            </tr>\\r\\n          </table>\\r\\n\\r\\n          <table class=\\"button\\">\\r\\n            <tr>\\r\\n              <td></td>\\r\\n              <td class=\\"but\\">\\r\\n                <input type=\\"submit\\" class = \\"btn btn-outline-primary btn-block\\" id=\\"registrationSubmit\\" value=\\"\\"/>\\r\\n              </td>\\r\\n              <td></td>\\r\\n            </tr>    \\r\\n          </table>\\r\\n        </fieldset>\\r\\n    </div>\\r\\n  </div>\\r\\n  </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/views/formViews/RegistrationForm.js\n\n\n\n\n\nvar RegistrationForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(registrationFormTemplate),\n  user: null,\n  events: {\n    \'click #registrationSubmit\': \'registrationClick\'\n  },\n  regions: {\n    \'centerRegion\': \'#js-center-region\'\n  },\n  initialize: function initialize(options) {\n    this.user = options.user;\n  },\n  registrationClick: function registrationClick() {\n    var controller = new RootController_RootController();\n    controller.setUser(this.user);\n    controller.registrationUser();\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("registrationHeader").textContent = VocabularyController.ExtractTextFromVocabulary("registrationHeader");\n    document.getElementById("registrationLogin").textContent = VocabularyController.ExtractTextFromVocabulary("registrationLogin");\n    document.getElementById("registrationPassword").textContent = VocabularyController.ExtractTextFromVocabulary("registrationPassword");\n    document.getElementById("registrationSubmit").value = VocabularyController.ExtractTextFromVocabulary("registrationSubmit");\n  }\n});\n\n// CONCATENATED MODULE: ./html/viewTodoTemplate.html\n/* harmony default export */ var viewTodoTemplate = ("<div class=\\"container-fluid\\">\\r\\n  <div class=\\"row viewRow1\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-xs-6 text-left\\">\\r\\n      <h1 class=\\"viewHead\\" id=\\"viewHead\\"></h1>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-4 col-lg-3 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-3 col-lg-3 col-md-5 col-sm-6 col-xs-6 text-right\\">\\r\\n      <input type=\\"submit\\" class = \\"btn btn-secondary viewButton\\" id=\\"viewEdit\\" style=\\"visibility: hidden\\" value=\\"\\"/>\\r\\n      <input type=\\"submit\\" class = \\"btn btn-secondary\\" id=\\"viewDelete\\" style=\\"visibility: hidden\\" value=\\"\\"/>\\r\\n      <input type=\\"submit\\" class = \\"btn btn-secondary\\" id=\\"viewPermissions\\" style=\\"visibility: hidden\\" value=\\"\\"/>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow2\\">\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-4 col-sm-6 col-xs-6\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewTheme\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-3 col-md-4 col-sm-6 col-xs-6\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewThemeName\\"></span>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-6 col-lg-5 col-md-3 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow3\\">\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-4 col-sm-6 col-xs-6\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewDescriptionLabel\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-3 col-md-4 col-sm-6 col-xs-6\\">\\r\\n      <ul class=\\"containerSpan\\">\\r\\n          <span class=\\"fontView\\" id=\\"viewDescription\\"></span>\\r\\n      </ul>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-6 col-lg-5 col-md-3 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow4\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewAuthor\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewName\\"></span>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-3 col-md-3 col-sm-1 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewCreationDateLabel\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewCreationDate\\"></span>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow5\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewPriorityLabel\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewPriority\\"></span>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-3 col-md-3 col-sm-1 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewPlaneDateLabel\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewPlaneDate\\"></span>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow6\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewCategoryLabel\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewCategory\\"></span>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-3 col-md-3 col-sm-1 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewCompleteDateLabel\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewCompleteDate\\"></span>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow7\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"viewDoneLabel\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <span class=\\"fontView\\" id=\\"viewDone\\"></span>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-9 col-lg-8 col-md-8 col-sm-7 col-xs-6\\">\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow8\\">\\r\\n    <div class=\\"col-xl-8 col-lg-8 col-md-7 col-sm-6 col-xs-6\\"></div>\\r\\n    <div class=\\"col-xl-3 col-lg-3 col-md-5 col-sm-6 col-xs-6 text-right\\">\\r\\n      <input type=\\"submit\\" id=\\"viewBack\\" class = \\"btn btn-secondary\\"/>\\r\\n    </div>\\r\\n      <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow8\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-10 col-lg-10 col-md-12 col-sm-12 col-xs-12\\" id=\\"permission-region\\">\\r\\n    </div>\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/controllers/ViewController.js\nfunction ViewController_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ViewController_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ViewController_createClass(Constructor, protoProps, staticProps) { if (protoProps) ViewController_defineProperties(Constructor.prototype, protoProps); if (staticProps) ViewController_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction ViewController_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar ViewController_ViewController =\n/*#__PURE__*/\nfunction () {\n  function ViewController() {\n    ViewController_classCallCheck(this, ViewController);\n\n    ViewController_defineProperty(this, "user", null);\n\n    ViewController_defineProperty(this, "todo", null);\n\n    ViewController_defineProperty(this, "access", null);\n  }\n\n  ViewController_createClass(ViewController, [{\n    key: "setUser",\n    value: function setUser(user) {\n      this.user = user;\n    }\n  }, {\n    key: "setMark",\n    value: function setMark(mark) {\n      this.mark = mark;\n    }\n  }, {\n    key: "setAccess",\n    value: function setAccess(access) {\n      this.access = access;\n    }\n  }, {\n    key: "checkAccess",\n    value: function checkAccess() {\n      var _this = this;\n\n      var url = UrlStorage.checkAccess(this.user.get("currentCaseId"));\n      var login = this.user.get("login");\n      var access = this.access;\n      fetch(url, {\n        method: \'POST\',\n        body: login,\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.access === false) {\n          jquery_default()("#viewEdit").css("visibility", "hidden");\n          jquery_default()("#viewDelete").css("visibility", "hidden");\n          jquery_default()("#viewPermissions").css("visibility", "hidden");\n        } else {\n          jquery_default()("#viewEdit").css("visibility", "visible");\n          jquery_default()("#viewDelete").css("visibility", "visible");\n          jquery_default()("#viewPermissions").css("visibility", "visible");\n        }\n      })["catch"](function (error) {\n        _this.user.set({\n          state: ""\n        });\n      });\n    }\n  }, {\n    key: "loadCase",\n    value: function loadCase(todo) {\n      var _this2 = this;\n\n      var url = UrlStorage.loadCase(this.user.get("currentCaseId"));\n      this.todo = todo;\n      var intermediateCase = this.todo;\n      fetch(url, {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        var currentUser = JSON.parse(localStorage.getItem("user"));\n        intermediateCase.set({\n          theme: response.theme,\n          category: response.category,\n          planeDate: response.planeDate,\n          priority: response.priority,\n          userName: response.userName,\n          description: response.description,\n          done: response.done,\n          createdDate: response.createdDate,\n          completeDate: response.completeDate\n        });\n        document.getElementById("nameOfUser").textContent = currentUser.name;\n\n        _this2.mark.set({\n          ready: true\n        });\n      })["catch"](function (error) {\n        _this2.user.set({\n          state: ""\n        });\n      });\n    }\n  }, {\n    key: "deleteCase",\n    value: function deleteCase(todo) {\n      var _this3 = this;\n\n      var url = UrlStorage.deleteCase(this.user.get("currentCaseId"));\n      this.todo = todo;\n      fetch(url, {\n        method: \'POST\',\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        _this3.user.set({\n          state: ""\n        });\n      })["catch"](function (error) {\n        console.info(error);\n\n        _this3.user.set({\n          state: ""\n        });\n      });\n    }\n  }, {\n    key: "updateCase",\n    value: function updateCase(todo) {\n      var _this4 = this;\n\n      var url = UrlStorage.updateCase(this.user.get("currentCaseId"));\n      this.todo = todo;\n      var currentUser = JSON.parse(localStorage.getItem("user"));\n      var theme = document.getElementById("editTheme").value;\n      var priority = this.transformPriority();\n      var category = this.transformCategory();\n      var description = document.getElementById("editDescription").value;\n      var planeDate = document.getElementById("editPlaneDate").value !== "" ? new Date(document.getElementById("editPlaneDate").value) : null;\n      var createdDate = document.getElementById("editCreationDate").value !== "" ? new Date(document.getElementById("editCreationDate").value) : null;\n      var completeDate = document.getElementById("editCompleteDate").value !== "" ? new Date(document.getElementById("editCompleteDate").value) : null;\n      var done = document.getElementById("editDone").checked;\n      var intermediateCase = new CaseModel({\n        theme: theme,\n        category: category,\n        planeDate: planeDate,\n        priority: priority,\n        userName: currentUser.login,\n        description: description,\n        createdDate: createdDate,\n        completeDate: completeDate,\n        done: done\n      });\n      fetch(url, {\n        method: \'POST\',\n        body: JSON.stringify(intermediateCase),\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        _this4.user.set({\n          state: "viewTodo"\n        });\n      })["catch"](function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: "transformPriority",\n    value: function transformPriority() {\n      var priority = document.getElementById("editPriority").value;\n      var result = "";\n\n      if (priority === VocabularyController.ExtractTextFromVocabulary("optionsPriorityHigh")) {\n        result = "high";\n      } else if (priority === VocabularyController.ExtractTextFromVocabulary("optionsPriorityMedium")) {\n        result = "medium";\n      } else if (priority === VocabularyController.ExtractTextFromVocabulary("optionsPriorityLow")) {\n        result = "low";\n      }\n\n      return result;\n    }\n  }, {\n    key: "transformCategory",\n    value: function transformCategory() {\n      var category = document.getElementById("editCategory").value;\n      var result = "";\n\n      if (category === VocabularyController.ExtractTextFromVocabulary("optionsCategoryProgramming")) {\n        result = "programming";\n      } else if (category === VocabularyController.ExtractTextFromVocabulary("optionsCategoryAdministrating")) {\n        result = "administrating";\n      } else if (category === VocabularyController.ExtractTextFromVocabulary("optionsCategoryEducation")) {\n        result = "education";\n      }\n\n      return result;\n    }\n  }, {\n    key: "setDate",\n    value: function setDate(string) {\n      var date = string.split(" ");\n      var time = date[3].split(":");\n      var resultDate = new Date(date[2], date[1], date[0], time[0], time[1], time[2]);\n      return resultDate;\n    }\n  }]);\n\n  return ViewController;\n}();\n\n\n// CONCATENATED MODULE: ./html/permissionsTemplate.html\n/* harmony default export */ var permissionsTemplate = ("<div class=\\"container-fluid \\">\\r\\n    <div class=\\"listWrapper\\">\\r\\n        <div class=\\"row justify-content-start\\">\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n            <div class=\\"col-xl-10 col-lg-10 col-md-10 col-sm-12 col-xs-12 \\">\\r\\n                <fieldset class=\\"form\\">\\r\\n                    <table class=\\"filterTable\\">\\r\\n                        <tr class=\\"filterRow\\" id=\\"usersRow\\"></tr>\\r\\n                        <tr class=\\"filterRow\\"></tr>\\r\\n                        <tr class=\\"filterRow\\"></tr>\\r\\n                        <tr class=\\"filterRow\\">\\r\\n                            <td class=\\"column0\\"></td>\\r\\n                            <td class=\\"column1\\"></td>\\r\\n                            <td class=\\"column2\\"></td>\\r\\n                            <td class=\\"column3\\"></td>\\r\\n                            <td class=\\"column4\\"></td>\\r\\n                            <td class=\\"column5\\"></td>\\r\\n                            <td class=\\"column6\\"><input type=\\"submit\\" class =\\"btn btn-secondary\\"\\r\\n                                                       id=\\"PermissionsSubmit\\" value=\\"Принять\\"/></td>\\r\\n                            <td class=\\"column7\\"></td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                </fieldset>\\r\\n            </div>\\r\\n            <div class=\\"col-xl-1 col-lg-1 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/controllers/PermissionsController.js\nfunction PermissionsController_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction PermissionsController_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PermissionsController_createClass(Constructor, protoProps, staticProps) { if (protoProps) PermissionsController_defineProperties(Constructor.prototype, protoProps); if (staticProps) PermissionsController_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction PermissionsController_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar PermissionsController_PermissionsController =\n/*#__PURE__*/\nfunction () {\n  function PermissionsController() {\n    PermissionsController_classCallCheck(this, PermissionsController);\n\n    PermissionsController_defineProperty(this, "user", null);\n  }\n\n  PermissionsController_createClass(PermissionsController, [{\n    key: "setUser",\n    value: function setUser(user) {\n      this.user = user;\n    }\n  }, {\n    key: "getAllUsers",\n    value: function getAllUsers() {\n      var _this = this;\n\n      var url = UrlStorage.getAllUsers();\n      var login = this.user.get("login");\n      var caseId = this.user.get("currentCaseId");\n      fetch(url, {\n        method: \'POST\',\n        body: caseId,\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        for (var i = 0; i < response.length; i++) {\n          if (response[i].login !== login) {\n            jquery_default()("#usersRow").append("<span id=\'loginOfUser\' style=\'padding: 5px\'></span>").append("<input type=\\"checkbox\\" class=\'usersCheckbox\' style=\'padding-right: 15px\' id=\\"check\\">");\n            jquery_default()("#loginOfUser").attr("id", "userName" + i).text(response[i].login);\n            jquery_default()("#check").attr("id", response[i].login);\n\n            if (response[i].access) {\n              jquery_default()("#" + response[i].login).prop("checked", true);\n            }\n          }\n        }\n      })["catch"](function (error) {\n        _this.user.set({\n          state: ""\n        });\n      });\n    }\n  }, {\n    key: "sendPermissions",\n    value: function sendPermissions() {\n      var _this2 = this;\n\n      var url = UrlStorage.sendPermissions(this.user.get("currentCaseId"));\n      var login = this.user.get("login");\n      var body = this.createJSONPermissions();\n      fetch(url, {\n        method: \'POST\',\n        body: body,\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).then(function (response) {\n        jquery_default()("#usersRow").append("<span id=\'message\'>Отправлено</span>");\n        setTimeout(function () {\n          jquery_default()("#message").remove();\n        }, 3000);\n      })["catch"](function (error) {\n        _this2.user.set({\n          state: ""\n        });\n      });\n    }\n  }, {\n    key: "createJSONPermissions",\n    value: function createJSONPermissions() {\n      var permissions = [];\n      var permObjects = jquery_default()(".usersCheckbox");\n\n      for (var i = 0; i < permObjects.length; i++) {\n        permissions.push({\n          login: permObjects[i].id,\n          access: permObjects[i].checked\n        });\n      }\n\n      return JSON.stringify(permissions);\n    }\n  }]);\n\n  return PermissionsController;\n}();\n\n\n// CONCATENATED MODULE: ./src/js/views/formViews/UsersPermissionsForm.js\n\n\n\n\n\n\n\nvar UsersPermissionsForm = node_modules_backbone_marionette["View"].extend({\n  user: null,\n  template: underscore_default.a.template(permissionsTemplate),\n  regions: {\n    \'secondRegion\': \'#list-form-region\'\n  },\n  events: {\n    \'click #PermissionsSubmit\': \'submitClick\'\n  },\n  initialize: function initialize(options) {\n    this.user = options.user;\n  },\n  onRender: function onRender() {\n    this.loadUsers();\n  },\n  loadUsers: function loadUsers() {\n    var controller = new PermissionsController_PermissionsController();\n    controller.setUser(this.user);\n    controller.getAllUsers();\n  },\n  submitClick: function submitClick() {\n    var controller = new PermissionsController_PermissionsController();\n    controller.setUser(this.user);\n    controller.sendPermissions();\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/views/formViews/ViewTodoForm.js\n\n\n\n\n\n\n\n\n\nvar ViewTodoForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(viewTodoTemplate),\n  user: null,\n  todo: null,\n  access: false,\n  modelEvents: {\n    \'change:ready\': \'showCase\'\n  },\n  events: {\n    \'click #viewBack\': \'backClick\',\n    \'click #viewDelete\': \'deleteClick\',\n    \'click #viewEdit\': \'editClick\',\n    \'click #viewPermissions\': \'permissionsClick\'\n  },\n  regions: {\n    \'firstRegion\': \'#permission-region\'\n  },\n  initialize: function initialize(options) {\n    this.user = options.user;\n    this.todo = new CaseModel();\n    this.mark = options.mark;\n  },\n  onRender: function onRender() {\n    this.checkAccess();\n    this.loadCase();\n  },\n  permissionsClick: function permissionsClick() {\n    var region = this.getRegion(\'firstRegion\');\n    var usersPermissionsForm = new UsersPermissionsForm({\n      user: this.user\n    });\n    region.show(usersPermissionsForm);\n  },\n  backClick: function backClick() {\n    this.user.set({\n      state: ""\n    });\n  },\n  checkAccess: function checkAccess() {\n    var controller = new ViewController_ViewController();\n    controller.setUser(this.user);\n    controller.setAccess(this.access);\n    controller.checkAccess();\n  },\n  deleteClick: function deleteClick() {\n    var controller = new ViewController_ViewController();\n    controller.setUser(this.user);\n    controller.setMark(this.mark);\n    controller.deleteCase(this.todo);\n  },\n  editClick: function editClick() {\n    this.user.set({\n      state: "editTodo"\n    });\n  },\n  loadCase: function loadCase() {\n    var controller = new ViewController_ViewController();\n    controller.setUser(this.user);\n    controller.setMark(this.mark);\n    controller.loadCase(this.todo);\n  },\n  showCase: function showCase() {\n    document.getElementById("viewHead").textContent = VocabularyController.ExtractTextFromVocabulary("viewTodoHead") + " " + this.user.get("currentCaseId");\n    document.getElementById("viewThemeName").textContent = this.todo.get("theme");\n    document.getElementById("viewDescription").textContent = this.todo.get("description");\n    document.getElementById("viewName").textContent = this.todo.get("userName");\n    document.getElementById("viewCreationDate").textContent = this.getDate(this.todo.get("createdDate"));\n    document.getElementById("viewPriority").textContent = this.getPriority(this.todo.get("priority"));\n    document.getElementById("viewPlaneDate").textContent = this.getDate(this.todo.get("planeDate"));\n    document.getElementById("viewCategory").textContent = this.getCategory(this.todo.get("category"));\n    document.getElementById("viewCompleteDate").textContent = this.getDate(this.todo.get("completeDate"));\n    document.getElementById("viewDone").textContent = this.getDone(this.todo.get("done"));\n  },\n  getPriority: function getPriority(priority) {\n    if (priority === "high") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsPriorityHigh");\n    } else if (priority === "medium") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsPriorityMedium");\n    } else if (priority === "low") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsPriorityLow");\n    }\n  },\n  getCategory: function getCategory(category) {\n    if (category === "programming") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsCategoryProgramming");\n    } else if (category === "administrating") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsCategoryAdministrating");\n    } else if (category === "education") {\n      return VocabularyController.ExtractTextFromVocabulary("optionsCategoryEducation");\n    }\n  },\n  getDone: function getDone(done) {\n    if (done) {\n      return VocabularyController.ExtractTextFromVocabulary("optionsDoneYes");\n    } else {\n      return VocabularyController.ExtractTextFromVocabulary("optionsDoneNo");\n    }\n  },\n  getDate: function getDate(date) {\n    if (date !== null) {\n      return moment_default()(new Date(date)).format(\'DD MM YYYY hh:mm:ss\');\n    } else {\n      return "";\n    }\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("viewHead").textContent = VocabularyController.ExtractTextFromVocabulary("viewHead");\n    document.getElementById("viewEdit").value = VocabularyController.ExtractTextFromVocabulary("viewEdit");\n    document.getElementById("viewDelete").value = VocabularyController.ExtractTextFromVocabulary("viewDelete");\n    document.getElementById("viewTheme").textContent = VocabularyController.ExtractTextFromVocabulary("viewTheme");\n    document.getElementById("viewDescriptionLabel").textContent = VocabularyController.ExtractTextFromVocabulary("viewDescriptionLabel");\n    document.getElementById("viewAuthor").textContent = VocabularyController.ExtractTextFromVocabulary("viewAuthor");\n    document.getElementById("viewCreationDateLabel").textContent = VocabularyController.ExtractTextFromVocabulary("viewCreationDateLabel");\n    document.getElementById("viewPriorityLabel").textContent = VocabularyController.ExtractTextFromVocabulary("viewPriorityLabel");\n    document.getElementById("viewPlaneDateLabel").textContent = VocabularyController.ExtractTextFromVocabulary("viewPlaneDateLabel");\n    document.getElementById("viewCategoryLabel").textContent = VocabularyController.ExtractTextFromVocabulary("viewCategoryLabel");\n    document.getElementById("viewCompleteDateLabel").textContent = VocabularyController.ExtractTextFromVocabulary("viewCompleteDateLabel");\n    document.getElementById("viewDoneLabel").textContent = VocabularyController.ExtractTextFromVocabulary("viewDoneLabel");\n    document.getElementById("viewBack").value = VocabularyController.ExtractTextFromVocabulary("viewBack");\n    document.getElementById("viewPermissions").value = VocabularyController.ExtractTextFromVocabulary("viewPermissions");\n  }\n});\n\n// CONCATENATED MODULE: ./html/editTodoTemplate.html\n/* harmony default export */ var editTodoTemplate = ("<div class=\\"container-fluid\\">\\r\\n  <div class=\\"row viewRow1\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-xs-6 text-left\\">\\r\\n      <h1 class=\\"viewHead\\" id=\\"editHead\\"></h1>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-4 col-lg-3 col-md-1 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-3 col-lg-3 col-md-5 col-sm-6 col-xs-6 text-right\\">\\r\\n      <input type=\\"submit\\" class = \\"btn btn-secondary\\" id=\\"editSave\\"/>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow2\\">\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-4 col-sm-6 col-xs-6\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoTheme\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-3 col-md-4 col-sm-6 col-xs-6\\">\\r\\n      <input class=\\"myInput form-control\\" type=\\"text\\" id=\\"editTheme\\"/>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-6 col-lg-5 col-md-3 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow3\\">\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-4 col-sm-6 col-xs-6\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoDescription\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-xs-6\\">\\r\\n      <ul class=\\"containerSpan\\">\\r\\n        <textarea class=\\"editDescription form-control\\" type=\\"text\\" id=\\"editDescription\\" rows=\\"3\\" maxlength=\\"256\\"></textarea>\\r\\n      </ul>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-5 col-lg-4 col-md-2 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow4\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoAuthor\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <input class=\\"myInput form-control\\" type=\\"text\\" id=\\"editAuthor\\" placeholder=\\"\\" readonly/>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-2 col-md-3 col-sm-1 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoCreationDate\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n    <input id=\\"editCreationDate\\" width=\\"70%\\" type=\\"datetime-local\\" class=\\"myInput form-control\\"/>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow5\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoPriority\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <select class=\\"mySelect form-control\\" id=\\"editPriority\\">\\r\\n        <option selected></option>\\r\\n        <option>Высокий</option>\\r\\n        <option>Средний</option>\\r\\n        <option>Низкий</option>\\r\\n      </select>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-2 col-md-3 col-sm-1 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoPlaneDate\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n    <input id=\\"editPlaneDate\\" width=\\"70%\\" type=\\"datetime-local\\" class=\\"myInput form-control\\"/>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow6\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoCategory\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <select class=\\"mySelect form-control\\" id=\\"editCategory\\">\\r\\n        <option selected></option>\\r\\n        <option>Программирование</option>\\r\\n        <option>Администрирование</option>\\r\\n        <option>Обучение</option>\\r\\n      </select>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-3 col-lg-1 col-md-3 col-sm-1 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <label class=\\"fontView\\" id=\\"editTodoCompleteDate\\"></label>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n    <input id=\\"editCompleteDate\\" width=\\"70%\\" type=\\"datetime-local\\" class=\\"myInput form-control\\"/>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow7\\">\\r\\n    <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n    <div class=\\"col-xl-1 col-lg-2 col-md-2 col-sm-2 col-xs-3\\">\\r\\n    </div>\\r\\n    <div class=\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-xs-3\\">\\r\\n      <div class=\\"form-check\\">\\r\\n        <input class=\\"form-check-input\\" type=\\"checkbox\\" value=\\"\\" id=\\"editDone\\">\\r\\n        <label class=\\"form-check-label\\" for=\\"editDone\\" id=\\"editTodoDone\\"></label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\"col-xl-9 col-lg-8 col-md-8 col-sm-7 col-xs-6\\">\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\"row viewRow8\\">\\r\\n    <div class=\\"col-xl-8 col-lg-8 col-md-7 col-sm-6 col-xs-6\\"></div>\\r\\n    <div class=\\"col-xl-3 col-lg-3 col-md-5 col-sm-6 col-xs-6 text-right\\">\\r\\n      <input type=\\"submit\\" id=\\"editCancel\\" class = \\"btn btn-secondary\\" value=\\"\\"/>\\r\\n    </div>\\r\\n      <div class=\\"col-xl-1 col-lg-1 col-md-0 col-sm-0 col-xs-0\\"></div>\\r\\n  </div>\\r\\n</div>");\n// CONCATENATED MODULE: ./src/js/views/formViews/EditTodoForm.js\n\n\n\n\n\n\n\n\nvar EditTodoForm = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(editTodoTemplate),\n  user: null,\n  todo: null,\n  modelEvents: {\n    \'change:ready\': \'showCase\'\n  },\n  events: {\n    \'click #editSave\': \'saveClick\',\n    \'click #editCancel\': \'cancelClick\'\n  },\n  initialize: function initialize(options) {\n    this.user = options.user;\n    this.todo = new CaseModel();\n    this.mark = options.mark;\n  },\n  onRender: function onRender() {\n    this.loadCase();\n  },\n  cancelClick: function cancelClick() {\n    this.user.set({\n      state: "viewTodo"\n    });\n  },\n  saveClick: function saveClick() {\n    var controller = new ViewController_ViewController();\n    controller.setUser(this.user);\n    controller.setMark(this.mark);\n    controller.updateCase(this.todo);\n  },\n  loadCase: function loadCase() {\n    var controller = new ViewController_ViewController();\n    controller.setUser(this.user);\n    controller.setMark(this.mark);\n    controller.loadCase(this.todo);\n  },\n  showCase: function showCase() {\n    document.getElementById("editHead").textContent = "Редактирование дела № " + this.user.get("currentCaseId");\n    document.getElementById("editTheme").value = this.todo.get("theme");\n    document.getElementById("editDescription").value = this.todo.get("description");\n    document.getElementById("editAuthor").value = this.todo.get("userName");\n    document.getElementById("editCreationDate").value = this.getDate(this.todo.get("createdDate"));\n    document.getElementById("editPriority").value = this.getPriority(this.todo.get("priority"));\n    document.getElementById("editPlaneDate").value = this.getDate(this.todo.get("planeDate"));\n    document.getElementById("editCategory").value = this.getCategory(this.todo.get("category"));\n    document.getElementById("editCompleteDate").value = this.getDate(this.todo.get("completeDate"));\n    document.getElementById("editSave").checked = this.todo.get("editSave");\n    document.getElementById("editDone").checked = this.todo.get("done");\n  },\n  getPriority: function getPriority(priority) {\n    if (priority === "high") {\n      return "Высокий";\n    } else if (priority === "medium") {\n      return "Средний";\n    } else if (priority === "low") {\n      return "Низкий";\n    }\n  },\n  getCategory: function getCategory(category) {\n    if (category === "programming") {\n      return "Программирование";\n    } else if (category === "administrating") {\n      return "Администрирование";\n    } else if (category === "education") {\n      return "Обучение";\n    }\n  },\n  getDate: function getDate(date) {\n    if (date !== null) {\n      return moment_default()(new Date(date)).format(\'DD MM YYYY HH:mm:ss\');\n    } else {\n      return "";\n    }\n  },\n  onAttach: function onAttach() {\n    this.fillText();\n  },\n  fillText: function fillText() {\n    document.getElementById("editHead").textContent = VocabularyController.ExtractTextFromVocabulary("editHead");\n    document.getElementById("editTodoTheme").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoTheme");\n    document.getElementById("editTodoDescription").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoDescription");\n    document.getElementById("editTodoAuthor").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoAuthor");\n    document.getElementById("editTodoCreationDate").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoCreationDate");\n    document.getElementById("editTodoPlaneDate").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoPlaneDate");\n    document.getElementById("editTodoCategory").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoCategory");\n    document.getElementById("editTodoCompleteDate").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoCompleteDate");\n    document.getElementById("editTodoDone").textContent = VocabularyController.ExtractTextFromVocabulary("editTodoDone");\n    document.getElementById("editCancel").value = VocabularyController.ExtractTextFromVocabulary("editCancel");\n  }\n});\n\n// CONCATENATED MODULE: ./src/js/views/Root.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Root = node_modules_backbone_marionette["View"].extend({\n  template: underscore_default.a.template(regionTemplate),\n  router: null,\n  user: null,\n  modelEvents: {\n    \'change:state\': \'stateChange\',\n    \'change:currentCaseId\': \'stateChange\',\n    \'change:vocabularyLoaded\': \'stateChange\'\n  },\n  regions: {\n    \'firstRegion\': \'#js-nav-region\',\n    \'secondRegion\': \'#js-center-region\'\n  },\n  initialize: function initialize(options) {\n    this.router = options.router;\n    this.user = options.user;\n    this.status = options.status;\n  },\n  onRender: function onRender() {\n    this.loadVocabulary();\n  },\n  loadVocabulary: function loadVocabulary() {\n    var controller = new RootController_RootController();\n    controller.setUser(this.user);\n    controller.getLocaleStorage();\n  },\n  stateChange: function stateChange() {\n    if (this.user.get("isLogged") === false && this.user.get("state") !== "registration") {\n      this.router.navigate("login", true);\n    }\n\n    if (this.user.get("state") === "") {\n      this.showNavBar();\n      this.showListForm();\n      this.router.navigate("", true);\n    } else if (this.user.get("state") === "registration") {\n      this.showLoginNavBar();\n      this.showRegistrationForm();\n      this.router.navigate("registration", true);\n    } else if (this.user.get("state") === "login") {\n      this.showLoginNavBar();\n      this.showLoginForm();\n      this.router.navigate("login", true);\n    } else if (this.user.get("state") === "viewTodo") {\n      this.showNavBar();\n      this.showViewForm();\n      this.router.navigate("todo/" + this.user.get("currentCaseId"), true);\n    } else if (this.user.get("state") === "editTodo") {\n      this.showNavBar();\n      this.showEditForm();\n      this.router.navigate("todo/edit/" + this.user.get("currentCaseId"), true);\n    } else {\n      this.router.navigate("login", true);\n    }\n  },\n  showLoginNavBar: function showLoginNavBar() {\n    var region = this.getRegion(\'firstRegion\');\n    var navBar = new LoginNavBar();\n    region.show(navBar);\n  },\n  showNavBar: function showNavBar() {\n    var region = this.getRegion(\'firstRegion\');\n    var navBar = new NavBar({\n      user: this.user\n    });\n    region.show(navBar);\n  },\n  showLoginForm: function showLoginForm() {\n    var region = this.getRegion(\'secondRegion\');\n    var loginForm = new LoginForm({\n      user: this.user\n    });\n    region.show(loginForm);\n  },\n  showListForm: function showListForm() {\n    var toggle = new ListToggleModel();\n    var region = this.getRegion(\'secondRegion\');\n    var listForm = new ListForm({\n      model: toggle,\n      toggle: toggle,\n      user: this.user\n    });\n    region.show(listForm);\n  },\n  showRegistrationForm: function showRegistrationForm() {\n    var region = this.getRegion(\'secondRegion\');\n    var registrationForm = new RegistrationForm({\n      user: this.user\n    });\n    region.show(registrationForm);\n  },\n  showViewForm: function showViewForm() {\n    var region = this.getRegion(\'secondRegion\');\n    var mark = new CasesReadyModel({\n      ready: false\n    });\n    var viewForm = new ViewTodoForm({\n      user: this.user,\n      model: mark,\n      mark: mark\n    });\n    region.show(viewForm);\n  },\n  showEditForm: function showEditForm() {\n    var region = this.getRegion(\'secondRegion\');\n    var mark = new CasesReadyModel({\n      ready: false\n    });\n    var editForm = new EditTodoForm({\n      user: this.user,\n      model: mark,\n      mark: mark\n    });\n    region.show(editForm);\n  }\n});\n\n// CONCATENATED MODULE: ./src/app.js\n\n\n\n\n\n //Контейнер для запуска приложения\n\nvar App = backbone_marionette["Application"].extend({\n  region: \'body\',\n  //Создание корневого представления\n  onStart: function onStart() {\n    var user = null;\n\n    if (localStorage.getItem("user") !== null) {\n      var oldUser = JSON.parse(localStorage.getItem("user"));\n      user = new UserModel();\n\n      if (oldUser.isLogged === true) {\n        user.set({\n          name: oldUser.name,\n          isLogged: true,\n          state: "",\n          login: oldUser.login\n        });\n      }\n    } else {\n      user = new UserModel();\n    }\n\n    var myRouter = new MyRouter({\n      user: user\n    });\n    var root = new Root({\n      model: user,\n      router: myRouter,\n      user: user\n    });\n    backbone["history"].start();\n    root.render();\n    this.showView(root);\n  }\n}); //Запуск приложения\n\njquery_default()(function () {\n  new App().start();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///116\n')}]);